
F4_QueueUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dec  08005dec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df4  08005df4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f50  20000078  08005e74  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012fc8  08005e74  00022fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015133  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c93  00000000  00000000  000351db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  00038f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181f8  00000000  00000000  00039f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e485  00000000  00000000  00052140  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095302  00000000  00000000  000605c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f58c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  000f5944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d58 	.word	0x08005d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005d58 	.word	0x08005d58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f8d8 	bl	800075e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 fb8c 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f002 faa0 	bl	8002af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20012e10 	.word	0x20012e10

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20012e10 	.word	0x20012e10

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4907      	ldr	r1, [pc, #28]	; (80006a0 <__NVIC_EnableIRQ+0x38>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff4c 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000786:	f7ff ff61 	bl	800064c <__NVIC_GetPriorityGrouping>
 800078a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	6978      	ldr	r0, [r7, #20]
 8000792:	f7ff ffb1 	bl	80006f8 <NVIC_EncodePriority>
 8000796:	4602      	mov	r2, r0
 8000798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff80 	bl	80006a4 <__NVIC_SetPriority>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff54 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d004      	beq.n	80007e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00c      	b.n	8000800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2205      	movs	r2, #5
 80007ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f022 0201 	bic.w	r2, r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	e159      	b.n	8000adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	429a      	cmp	r2, r3
 8000842:	f040 8148 	bne.w	8000ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00b      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d007      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	2b11      	cmp	r3, #17
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0xfc>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b12      	cmp	r3, #18
 8000906:	d123      	bne.n	8000950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	691a      	ldr	r2, [r3, #16]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	69b9      	ldr	r1, [r7, #24]
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0203 	and.w	r2, r3, #3
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a2 	beq.w	8000ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ae:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <HAL_GPIO_Init+0x2e8>)
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3302      	adds	r3, #2
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	220f      	movs	r2, #15
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4013      	ands	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a48      	ldr	r2, [pc, #288]	; (8000af8 <HAL_GPIO_Init+0x2ec>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d019      	beq.n	8000a0e <HAL_GPIO_Init+0x202>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a47      	ldr	r2, [pc, #284]	; (8000afc <HAL_GPIO_Init+0x2f0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x1fe>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <HAL_GPIO_Init+0x2f4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x1fa>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a45      	ldr	r2, [pc, #276]	; (8000b04 <HAL_GPIO_Init+0x2f8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x1f6>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <HAL_GPIO_Init+0x2fc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x1f2>
 80009fa:	2304      	movs	r3, #4
 80009fc:	e008      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 80009fe:	2307      	movs	r3, #7
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e004      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e002      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a20:	4934      	ldr	r1, [pc, #208]	; (8000af4 <HAL_GPIO_Init+0x2e8>)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	f67f aea2 	bls.w	8000828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3724      	adds	r7, #36	; 0x24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e25b      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d075      	beq.n	8000c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b2e:	4ba3      	ldr	r3, [pc, #652]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d00c      	beq.n	8000b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b3a:	4ba0      	ldr	r3, [pc, #640]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d112      	bne.n	8000b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b46:	4b9d      	ldr	r3, [pc, #628]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b52:	d10b      	bne.n	8000b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b54:	4b99      	ldr	r3, [pc, #612]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d05b      	beq.n	8000c18 <HAL_RCC_OscConfig+0x108>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d157      	bne.n	8000c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e236      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d106      	bne.n	8000b84 <HAL_RCC_OscConfig+0x74>
 8000b76:	4b91      	ldr	r3, [pc, #580]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a90      	ldr	r2, [pc, #576]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e01d      	b.n	8000bc0 <HAL_RCC_OscConfig+0xb0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x98>
 8000b8e:	4b8b      	ldr	r3, [pc, #556]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a8a      	ldr	r2, [pc, #552]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4b88      	ldr	r3, [pc, #544]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a87      	ldr	r2, [pc, #540]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_RCC_OscConfig+0xb0>
 8000ba8:	4b84      	ldr	r3, [pc, #528]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a83      	ldr	r2, [pc, #524]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a80      	ldr	r2, [pc, #512]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d013      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fd10 	bl	80005ec <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd0:	f7ff fd0c 	bl	80005ec <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e1fb      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	4b76      	ldr	r3, [pc, #472]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f0      	beq.n	8000bd0 <HAL_RCC_OscConfig+0xc0>
 8000bee:	e014      	b.n	8000c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fcfc 	bl	80005ec <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcf8 	bl	80005ec <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e1e7      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	4b6c      	ldr	r3, [pc, #432]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0xe8>
 8000c16:	e000      	b.n	8000c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d063      	beq.n	8000cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c26:	4b65      	ldr	r3, [pc, #404]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c32:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d11c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c3e:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d116      	bne.n	8000c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	4b5c      	ldr	r3, [pc, #368]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e1bb      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4952      	ldr	r1, [pc, #328]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	e03a      	b.n	8000cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d020      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c80:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <HAL_RCC_OscConfig+0x2b0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c86:	f7ff fcb1 	bl	80005ec <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fcad 	bl	80005ec <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e19c      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f0      	beq.n	8000c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	4940      	ldr	r1, [pc, #256]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <HAL_RCC_OscConfig+0x2b0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc90 	bl	80005ec <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc8c 	bl	80005ec <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e17b      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d030      	beq.n	8000d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d016      	beq.n	8000d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc70 	bl	80005ec <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc6c 	bl	80005ec <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e15b      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x200>
 8000d2e:	e015      	b.n	8000d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d36:	f7ff fc59 	bl	80005ec <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fc55 	bl	80005ec <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e144      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80a0 	beq.w	8000eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d96:	2301      	movs	r3, #1
 8000d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d121      	bne.n	8000dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000db2:	f7ff fc1b 	bl	80005ec <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db8:	e011      	b.n	8000dde <HAL_RCC_OscConfig+0x2ce>
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	42470000 	.word	0x42470000
 8000dc4:	42470e80 	.word	0x42470e80
 8000dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dcc:	f7ff fc0e 	bl	80005ec <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e0fd      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dde:	4b81      	ldr	r3, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x4d4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d106      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2f0>
 8000df2:	4b7d      	ldr	r3, [pc, #500]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	4a7c      	ldr	r2, [pc, #496]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfe:	e01c      	b.n	8000e3a <HAL_RCC_OscConfig+0x32a>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d10c      	bne.n	8000e22 <HAL_RCC_OscConfig+0x312>
 8000e08:	4b77      	ldr	r3, [pc, #476]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0c:	4a76      	ldr	r2, [pc, #472]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6713      	str	r3, [r2, #112]	; 0x70
 8000e14:	4b74      	ldr	r3, [pc, #464]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	4a73      	ldr	r2, [pc, #460]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e20:	e00b      	b.n	8000e3a <HAL_RCC_OscConfig+0x32a>
 8000e22:	4b71      	ldr	r3, [pc, #452]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e26:	4a70      	ldr	r2, [pc, #448]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e28:	f023 0301 	bic.w	r3, r3, #1
 8000e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2e:	4b6e      	ldr	r3, [pc, #440]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e32:	4a6d      	ldr	r2, [pc, #436]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e34:	f023 0304 	bic.w	r3, r3, #4
 8000e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d015      	beq.n	8000e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e42:	f7ff fbd3 	bl	80005ec <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	e00a      	b.n	8000e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fbcf 	bl	80005ec <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e0bc      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	4b61      	ldr	r3, [pc, #388]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0ee      	beq.n	8000e4a <HAL_RCC_OscConfig+0x33a>
 8000e6c:	e014      	b.n	8000e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fbbd 	bl	80005ec <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e74:	e00a      	b.n	8000e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f7ff fbb9 	bl	80005ec <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e0a6      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1ee      	bne.n	8000e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d105      	bne.n	8000eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9e:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a51      	ldr	r2, [pc, #324]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8092 	beq.w	8000fd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb4:	4b4c      	ldr	r3, [pc, #304]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d05c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d141      	bne.n	8000f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec8:	4b48      	ldr	r3, [pc, #288]	; (8000fec <HAL_RCC_OscConfig+0x4dc>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fb8d 	bl	80005ec <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed6:	f7ff fb89 	bl	80005ec <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e078      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	019b      	lsls	r3, r3, #6
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	061b      	lsls	r3, r3, #24
 8000f18:	4933      	ldr	r1, [pc, #204]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_RCC_OscConfig+0x4dc>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fb62 	bl	80005ec <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2c:	f7ff fb5e 	bl	80005ec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e04d      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x41c>
 8000f4a:	e045      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <HAL_RCC_OscConfig+0x4dc>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fb4b 	bl	80005ec <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff fb47 	bl	80005ec <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e036      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x44a>
 8000f78:	e02e      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e029      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d11c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d115      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fae:	4013      	ands	r3, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d10d      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d001      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40007000 	.word	0x40007000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	42470060 	.word	0x42470060

08000ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e0cc      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	429a      	cmp	r2, r3
 8001010:	d90c      	bls.n	800102c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001012:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d001      	beq.n	800102c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0b8      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d020      	beq.n	800107a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a58      	ldr	r2, [pc, #352]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800104e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001068:	4b50      	ldr	r3, [pc, #320]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	494d      	ldr	r1, [pc, #308]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	4313      	orrs	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d044      	beq.n	8001110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d107      	bne.n	800109e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d119      	bne.n	80010ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e07f      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d003      	beq.n	80010ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d109      	bne.n	80010ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e06f      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e067      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f023 0203 	bic.w	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4934      	ldr	r1, [pc, #208]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010e0:	f7ff fa84 	bl	80005ec <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e8:	f7ff fa80 	bl	80005ec <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e04f      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 020c 	and.w	r2, r3, #12
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	429a      	cmp	r2, r3
 800110e:	d1eb      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d20c      	bcs.n	8001138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d001      	beq.n	8001138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e032      	b.n	800119e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4916      	ldr	r1, [pc, #88]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	490e      	ldr	r1, [pc, #56]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001176:	f000 f821 	bl	80011bc <HAL_RCC_GetSysClockFreq>
 800117a:	4601      	mov	r1, r0
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	fa21 f303 	lsr.w	r3, r1, r3
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fd98 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023c00 	.word	0x40023c00
 80011ac:	40023800 	.word	0x40023800
 80011b0:	08005da0 	.word	0x08005da0
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000

080011bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011d2:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_GetSysClockFreq+0x158>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d007      	beq.n	80011ee <HAL_RCC_GetSysClockFreq+0x32>
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d008      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0x38>
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 808d 	bne.w	8001302 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011ea:	60bb      	str	r3, [r7, #8]
       break;
 80011ec:	e08c      	b.n	8001308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011ee:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_RCC_GetSysClockFreq+0x160>)
 80011f0:	60bb      	str	r3, [r7, #8]
      break;
 80011f2:	e089      	b.n	8001308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_GetSysClockFreq+0x158>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <HAL_RCC_GetSysClockFreq+0x158>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d023      	beq.n	8001252 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120a:	4b42      	ldr	r3, [pc, #264]	; (8001314 <HAL_RCC_GetSysClockFreq+0x158>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	099b      	lsrs	r3, r3, #6
 8001210:	f04f 0400 	mov.w	r4, #0
 8001214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	ea03 0501 	and.w	r5, r3, r1
 8001220:	ea04 0602 	and.w	r6, r4, r2
 8001224:	4a3d      	ldr	r2, [pc, #244]	; (800131c <HAL_RCC_GetSysClockFreq+0x160>)
 8001226:	fb02 f106 	mul.w	r1, r2, r6
 800122a:	2200      	movs	r2, #0
 800122c:	fb02 f205 	mul.w	r2, r2, r5
 8001230:	440a      	add	r2, r1
 8001232:	493a      	ldr	r1, [pc, #232]	; (800131c <HAL_RCC_GetSysClockFreq+0x160>)
 8001234:	fba5 0101 	umull	r0, r1, r5, r1
 8001238:	1853      	adds	r3, r2, r1
 800123a:	4619      	mov	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f04f 0400 	mov.w	r4, #0
 8001242:	461a      	mov	r2, r3
 8001244:	4623      	mov	r3, r4
 8001246:	f7ff f81b 	bl	8000280 <__aeabi_uldivmod>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e049      	b.n	80012e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001252:	4b30      	ldr	r3, [pc, #192]	; (8001314 <HAL_RCC_GetSysClockFreq+0x158>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	099b      	lsrs	r3, r3, #6
 8001258:	f04f 0400 	mov.w	r4, #0
 800125c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	ea03 0501 	and.w	r5, r3, r1
 8001268:	ea04 0602 	and.w	r6, r4, r2
 800126c:	4629      	mov	r1, r5
 800126e:	4632      	mov	r2, r6
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	f04f 0400 	mov.w	r4, #0
 8001278:	0154      	lsls	r4, r2, #5
 800127a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800127e:	014b      	lsls	r3, r1, #5
 8001280:	4619      	mov	r1, r3
 8001282:	4622      	mov	r2, r4
 8001284:	1b49      	subs	r1, r1, r5
 8001286:	eb62 0206 	sbc.w	r2, r2, r6
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	f04f 0400 	mov.w	r4, #0
 8001292:	0194      	lsls	r4, r2, #6
 8001294:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001298:	018b      	lsls	r3, r1, #6
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	eb64 0402 	sbc.w	r4, r4, r2
 80012a0:	f04f 0100 	mov.w	r1, #0
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	00e2      	lsls	r2, r4, #3
 80012aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012ae:	00d9      	lsls	r1, r3, #3
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	195b      	adds	r3, r3, r5
 80012b6:	eb44 0406 	adc.w	r4, r4, r6
 80012ba:	f04f 0100 	mov.w	r1, #0
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	02a2      	lsls	r2, r4, #10
 80012c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012c8:	0299      	lsls	r1, r3, #10
 80012ca:	460b      	mov	r3, r1
 80012cc:	4614      	mov	r4, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f04f 0400 	mov.w	r4, #0
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	f7fe ffd0 	bl	8000280 <__aeabi_uldivmod>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_GetSysClockFreq+0x158>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	3301      	adds	r3, #1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	60bb      	str	r3, [r7, #8]
      break;
 8001300:	e002      	b.n	8001308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001304:	60bb      	str	r3, [r7, #8]
      break;
 8001306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001308:	68bb      	ldr	r3, [r7, #8]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	00f42400 	.word	0x00f42400
 800131c:	017d7840 	.word	0x017d7840

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_RCC_GetHCLKFreq+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800133c:	f7ff fff0 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001340:	4601      	mov	r1, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_GetPCLK1Freq+0x24>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	08005db0 	.word	0x08005db0

08001360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001364:	f7ff ffdc 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001368:	4601      	mov	r1, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0b5b      	lsrs	r3, r3, #13
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	08005db0 	.word	0x08005db0

08001388 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	220f      	movs	r2, #15
 8001396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_RCC_GetClockConfig+0x60>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 020f 	and.w	r2, r3, #15
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e01d      	b.n	800143a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f815 	bl	8001442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3304      	adds	r3, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f000 f968 	bl	8001700 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b06      	cmp	r3, #6
 800147e:	d007      	beq.n	8001490 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d122      	bne.n	80014fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d11b      	bne.n	80014fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f06f 0202 	mvn.w	r2, #2
 80014ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f8ee 	bl	80016c2 <HAL_TIM_IC_CaptureCallback>
 80014e6:	e005      	b.n	80014f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f8e0 	bl	80016ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f8f1 	bl	80016d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b04      	cmp	r3, #4
 8001506:	d122      	bne.n	800154e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b04      	cmp	r3, #4
 8001514:	d11b      	bne.n	800154e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f06f 0204 	mvn.w	r2, #4
 800151e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f8c4 	bl	80016c2 <HAL_TIM_IC_CaptureCallback>
 800153a:	e005      	b.n	8001548 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f8b6 	bl	80016ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8c7 	bl	80016d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b08      	cmp	r3, #8
 800155a:	d122      	bne.n	80015a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11b      	bne.n	80015a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f06f 0208 	mvn.w	r2, #8
 8001572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f89a 	bl	80016c2 <HAL_TIM_IC_CaptureCallback>
 800158e:	e005      	b.n	800159c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f88c 	bl	80016ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f89d 	bl	80016d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d122      	bne.n	80015f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d11b      	bne.n	80015f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f06f 0210 	mvn.w	r2, #16
 80015c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2208      	movs	r2, #8
 80015cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f870 	bl	80016c2 <HAL_TIM_IC_CaptureCallback>
 80015e2:	e005      	b.n	80015f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f862 	bl	80016ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f873 	bl	80016d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10e      	bne.n	8001622 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f06f 0201 	mvn.w	r2, #1
 800161a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 fa51 	bl	8002ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162c:	2b80      	cmp	r3, #128	; 0x80
 800162e:	d10e      	bne.n	800164e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b80      	cmp	r3, #128	; 0x80
 800163c:	d107      	bne.n	800164e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8e3 	bl	8001814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	2b40      	cmp	r3, #64	; 0x40
 800165a:	d10e      	bne.n	800167a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d107      	bne.n	800167a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f838 	bl	80016ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	2b20      	cmp	r3, #32
 8001686:	d10e      	bne.n	80016a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 0320 	and.w	r3, r3, #32
 8001692:	2b20      	cmp	r3, #32
 8001694:	d107      	bne.n	80016a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f06f 0220 	mvn.w	r2, #32
 800169e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8ad 	bl	8001800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <TIM_Base_SetConfig+0xe4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00f      	beq.n	8001738 <TIM_Base_SetConfig+0x38>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171e:	d00b      	beq.n	8001738 <TIM_Base_SetConfig+0x38>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <TIM_Base_SetConfig+0xe8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d007      	beq.n	8001738 <TIM_Base_SetConfig+0x38>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a30      	ldr	r2, [pc, #192]	; (80017ec <TIM_Base_SetConfig+0xec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d003      	beq.n	8001738 <TIM_Base_SetConfig+0x38>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a2f      	ldr	r2, [pc, #188]	; (80017f0 <TIM_Base_SetConfig+0xf0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d108      	bne.n	800174a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <TIM_Base_SetConfig+0xe4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01b      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d017      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <TIM_Base_SetConfig+0xe8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <TIM_Base_SetConfig+0xec>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00f      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <TIM_Base_SetConfig+0xf0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00b      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <TIM_Base_SetConfig+0xf4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d007      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a1e      	ldr	r2, [pc, #120]	; (80017f8 <TIM_Base_SetConfig+0xf8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d003      	beq.n	800178a <TIM_Base_SetConfig+0x8a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <TIM_Base_SetConfig+0xfc>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d108      	bne.n	800179c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <TIM_Base_SetConfig+0xe4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d103      	bne.n	80017d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	615a      	str	r2, [r3, #20]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40000400 	.word	0x40000400
 80017ec:	40000800 	.word	0x40000800
 80017f0:	40000c00 	.word	0x40000c00
 80017f4:	40014000 	.word	0x40014000
 80017f8:	40014400 	.word	0x40014400
 80017fc:	40014800 	.word	0x40014800

08001800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e03f      	b.n	80018ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f001 f97a 	bl	8002b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800186a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fb97 	bl	8001fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2220      	movs	r2, #32
 80018b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b088      	sub	sp, #32
 80018c6:	af02      	add	r7, sp, #8
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b20      	cmp	r3, #32
 80018e0:	f040 8083 	bne.w	80019ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_UART_Transmit+0x2e>
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e07b      	b.n	80019ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_UART_Transmit+0x40>
 80018fe:	2302      	movs	r3, #2
 8001900:	e074      	b.n	80019ec <HAL_UART_Transmit+0x12a>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2221      	movs	r2, #33	; 0x21
 8001914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001918:	f7fe fe68 	bl	80005ec <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001932:	e042      	b.n	80019ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194a:	d122      	bne.n	8001992 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f9b6 	bl	8001cc8 <UART_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e042      	b.n	80019ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001978:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3302      	adds	r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	e017      	b.n	80019ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	e013      	b.n	80019ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2200      	movs	r2, #0
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f993 	bl	8001cc8 <UART_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e01f      	b.n	80019ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019be:	b29b      	uxth	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1b7      	bne.n	8001934 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f97a 	bl	8001cc8 <UART_WaitOnFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e006      	b.n	80019ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2220      	movs	r2, #32
 80019e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	4613      	mov	r3, r2
 8001a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d140      	bne.n	8001a90 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <HAL_UART_Receive_IT+0x26>
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e039      	b.n	8001a92 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_UART_Receive_IT+0x38>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e032      	b.n	8001a92 <HAL_UART_Receive_IT+0x9e>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2222      	movs	r2, #34	; 0x22
 8001a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0220 	orr.w	r2, r2, #32
 8001a8a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10d      	bne.n	8001af2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_UART_IRQHandler+0x52>
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f9d6 	bl	8001e9c <UART_Receive_IT>
      return;
 8001af0:	e0d1      	b.n	8001c96 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80b0 	beq.w	8001c5a <HAL_UART_IRQHandler+0x1ba>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_UART_IRQHandler+0x70>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80a5 	beq.w	8001c5a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <HAL_UART_IRQHandler+0x90>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_UART_IRQHandler+0xb0>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	f043 0202 	orr.w	r2, r3, #2
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00a      	beq.n	8001b70 <HAL_UART_IRQHandler+0xd0>
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b68:	f043 0204 	orr.w	r2, r3, #4
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00f      	beq.n	8001b9a <HAL_UART_IRQHandler+0xfa>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <HAL_UART_IRQHandler+0xee>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	f043 0208 	orr.w	r2, r3, #8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d078      	beq.n	8001c94 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_UART_IRQHandler+0x11c>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f970 	bl	8001e9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	bf0c      	ite	eq
 8001bca:	2301      	moveq	r3, #1
 8001bcc:	2300      	movne	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_UART_IRQHandler+0x144>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d031      	beq.n	8001c48 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8b9 	bl	8001d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	d123      	bne.n	8001c40 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c06:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_UART_IRQHandler+0x1fc>)
 8001c16:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fdd3 	bl	80007c8 <HAL_DMA_Abort_IT>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c32:	4610      	mov	r0, r2
 8001c34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c36:	e00e      	b.n	8001c56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f83b 	bl	8001cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c3e:	e00a      	b.n	8001c56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f837 	bl	8001cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c46:	e006      	b.n	8001c56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f833 	bl	8001cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c54:	e01e      	b.n	8001c94 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c56:	bf00      	nop
    return;
 8001c58:	e01c      	b.n	8001c94 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_UART_IRQHandler+0x1d6>
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f8a6 	bl	8001dc0 <UART_Transmit_IT>
    return;
 8001c74:	e00f      	b.n	8001c96 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_UART_IRQHandler+0x1f6>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8ee 	bl	8001e6c <UART_EndTransmit_IT>
    return;
 8001c90:	bf00      	nop
 8001c92:	e000      	b.n	8001c96 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001c94:	bf00      	nop
  }
}
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	08001d99 	.word	0x08001d99

08001ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd8:	e02c      	b.n	8001d34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d028      	beq.n	8001d34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ce8:	f7fe fc80 	bl	80005ec <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d21d      	bcs.n	8001d34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695a      	ldr	r2, [r3, #20]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e00f      	b.n	8001d54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d0c3      	beq.n	8001cda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff ff7e 	bl	8001cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b21      	cmp	r3, #33	; 0x21
 8001dd2:	d144      	bne.n	8001e5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ddc:	d11a      	bne.n	8001e14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001df2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	1c9a      	adds	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	621a      	str	r2, [r3, #32]
 8001e06:	e00e      	b.n	8001e26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	621a      	str	r2, [r3, #32]
 8001e12:	e008      	b.n	8001e26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6211      	str	r1, [r2, #32]
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4619      	mov	r1, r3
 8001e34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10f      	bne.n	8001e5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff07 	bl	8001ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b22      	cmp	r3, #34	; 0x22
 8001eae:	d171      	bne.n	8001f94 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb8:	d123      	bne.n	8001f02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10e      	bne.n	8001ee6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	1c9a      	adds	r2, r3, #2
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ee4:	e029      	b.n	8001f3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
 8001f00:	e01b      	b.n	8001f3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6858      	ldr	r0, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6291      	str	r1, [r2, #40]	; 0x28
 8001f1a:	b2c2      	uxtb	r2, r0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e00c      	b.n	8001f3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	1c58      	adds	r0, r3, #1
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	6288      	str	r0, [r1, #40]	; 0x28
 8001f32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4619      	mov	r1, r3
 8001f48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d120      	bne.n	8001f90 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0220 	bic.w	r2, r2, #32
 8001f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fd1a 	bl	80029c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e002      	b.n	8001f96 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fe2:	f023 030c 	bic.w	r3, r3, #12
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200e:	f040 818b 	bne.w	8002328 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4ac1      	ldr	r2, [pc, #772]	; (800231c <UART_SetConfig+0x37c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d005      	beq.n	8002028 <UART_SetConfig+0x88>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4abf      	ldr	r2, [pc, #764]	; (8002320 <UART_SetConfig+0x380>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 80bd 	bne.w	80021a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002028:	f7ff f99a 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 800202c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	461d      	mov	r5, r3
 8002032:	f04f 0600 	mov.w	r6, #0
 8002036:	46a8      	mov	r8, r5
 8002038:	46b1      	mov	r9, r6
 800203a:	eb18 0308 	adds.w	r3, r8, r8
 800203e:	eb49 0409 	adc.w	r4, r9, r9
 8002042:	4698      	mov	r8, r3
 8002044:	46a1      	mov	r9, r4
 8002046:	eb18 0805 	adds.w	r8, r8, r5
 800204a:	eb49 0906 	adc.w	r9, r9, r6
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800205a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800205e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002062:	4688      	mov	r8, r1
 8002064:	4691      	mov	r9, r2
 8002066:	eb18 0005 	adds.w	r0, r8, r5
 800206a:	eb49 0106 	adc.w	r1, r9, r6
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	461d      	mov	r5, r3
 8002074:	f04f 0600 	mov.w	r6, #0
 8002078:	196b      	adds	r3, r5, r5
 800207a:	eb46 0406 	adc.w	r4, r6, r6
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	f7fe f8fd 	bl	8000280 <__aeabi_uldivmod>
 8002086:	4603      	mov	r3, r0
 8002088:	460c      	mov	r4, r1
 800208a:	461a      	mov	r2, r3
 800208c:	4ba5      	ldr	r3, [pc, #660]	; (8002324 <UART_SetConfig+0x384>)
 800208e:	fba3 2302 	umull	r2, r3, r3, r2
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	461d      	mov	r5, r3
 800209c:	f04f 0600 	mov.w	r6, #0
 80020a0:	46a9      	mov	r9, r5
 80020a2:	46b2      	mov	sl, r6
 80020a4:	eb19 0309 	adds.w	r3, r9, r9
 80020a8:	eb4a 040a 	adc.w	r4, sl, sl
 80020ac:	4699      	mov	r9, r3
 80020ae:	46a2      	mov	sl, r4
 80020b0:	eb19 0905 	adds.w	r9, r9, r5
 80020b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020cc:	4689      	mov	r9, r1
 80020ce:	4692      	mov	sl, r2
 80020d0:	eb19 0005 	adds.w	r0, r9, r5
 80020d4:	eb4a 0106 	adc.w	r1, sl, r6
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	461d      	mov	r5, r3
 80020de:	f04f 0600 	mov.w	r6, #0
 80020e2:	196b      	adds	r3, r5, r5
 80020e4:	eb46 0406 	adc.w	r4, r6, r6
 80020e8:	461a      	mov	r2, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	f7fe f8c8 	bl	8000280 <__aeabi_uldivmod>
 80020f0:	4603      	mov	r3, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <UART_SetConfig+0x384>)
 80020f8:	fba3 1302 	umull	r1, r3, r3, r2
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	2164      	movs	r1, #100	; 0x64
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	3332      	adds	r3, #50	; 0x32
 800210a:	4a86      	ldr	r2, [pc, #536]	; (8002324 <UART_SetConfig+0x384>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002118:	4498      	add	r8, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	461d      	mov	r5, r3
 800211e:	f04f 0600 	mov.w	r6, #0
 8002122:	46a9      	mov	r9, r5
 8002124:	46b2      	mov	sl, r6
 8002126:	eb19 0309 	adds.w	r3, r9, r9
 800212a:	eb4a 040a 	adc.w	r4, sl, sl
 800212e:	4699      	mov	r9, r3
 8002130:	46a2      	mov	sl, r4
 8002132:	eb19 0905 	adds.w	r9, r9, r5
 8002136:	eb4a 0a06 	adc.w	sl, sl, r6
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002146:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800214a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800214e:	4689      	mov	r9, r1
 8002150:	4692      	mov	sl, r2
 8002152:	eb19 0005 	adds.w	r0, r9, r5
 8002156:	eb4a 0106 	adc.w	r1, sl, r6
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	461d      	mov	r5, r3
 8002160:	f04f 0600 	mov.w	r6, #0
 8002164:	196b      	adds	r3, r5, r5
 8002166:	eb46 0406 	adc.w	r4, r6, r6
 800216a:	461a      	mov	r2, r3
 800216c:	4623      	mov	r3, r4
 800216e:	f7fe f887 	bl	8000280 <__aeabi_uldivmod>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	461a      	mov	r2, r3
 8002178:	4b6a      	ldr	r3, [pc, #424]	; (8002324 <UART_SetConfig+0x384>)
 800217a:	fba3 1302 	umull	r1, r3, r3, r2
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2164      	movs	r1, #100	; 0x64
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	3332      	adds	r3, #50	; 0x32
 800218c:	4a65      	ldr	r2, [pc, #404]	; (8002324 <UART_SetConfig+0x384>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	f003 0207 	and.w	r2, r3, #7
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4442      	add	r2, r8
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e26f      	b.n	8002682 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021a2:	f7ff f8c9 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 80021a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	461d      	mov	r5, r3
 80021ac:	f04f 0600 	mov.w	r6, #0
 80021b0:	46a8      	mov	r8, r5
 80021b2:	46b1      	mov	r9, r6
 80021b4:	eb18 0308 	adds.w	r3, r8, r8
 80021b8:	eb49 0409 	adc.w	r4, r9, r9
 80021bc:	4698      	mov	r8, r3
 80021be:	46a1      	mov	r9, r4
 80021c0:	eb18 0805 	adds.w	r8, r8, r5
 80021c4:	eb49 0906 	adc.w	r9, r9, r6
 80021c8:	f04f 0100 	mov.w	r1, #0
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021dc:	4688      	mov	r8, r1
 80021de:	4691      	mov	r9, r2
 80021e0:	eb18 0005 	adds.w	r0, r8, r5
 80021e4:	eb49 0106 	adc.w	r1, r9, r6
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	461d      	mov	r5, r3
 80021ee:	f04f 0600 	mov.w	r6, #0
 80021f2:	196b      	adds	r3, r5, r5
 80021f4:	eb46 0406 	adc.w	r4, r6, r6
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	f7fe f840 	bl	8000280 <__aeabi_uldivmod>
 8002200:	4603      	mov	r3, r0
 8002202:	460c      	mov	r4, r1
 8002204:	461a      	mov	r2, r3
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <UART_SetConfig+0x384>)
 8002208:	fba3 2302 	umull	r2, r3, r3, r2
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	461d      	mov	r5, r3
 8002216:	f04f 0600 	mov.w	r6, #0
 800221a:	46a9      	mov	r9, r5
 800221c:	46b2      	mov	sl, r6
 800221e:	eb19 0309 	adds.w	r3, r9, r9
 8002222:	eb4a 040a 	adc.w	r4, sl, sl
 8002226:	4699      	mov	r9, r3
 8002228:	46a2      	mov	sl, r4
 800222a:	eb19 0905 	adds.w	r9, r9, r5
 800222e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800223e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002246:	4689      	mov	r9, r1
 8002248:	4692      	mov	sl, r2
 800224a:	eb19 0005 	adds.w	r0, r9, r5
 800224e:	eb4a 0106 	adc.w	r1, sl, r6
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	461d      	mov	r5, r3
 8002258:	f04f 0600 	mov.w	r6, #0
 800225c:	196b      	adds	r3, r5, r5
 800225e:	eb46 0406 	adc.w	r4, r6, r6
 8002262:	461a      	mov	r2, r3
 8002264:	4623      	mov	r3, r4
 8002266:	f7fe f80b 	bl	8000280 <__aeabi_uldivmod>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	461a      	mov	r2, r3
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <UART_SetConfig+0x384>)
 8002272:	fba3 1302 	umull	r1, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2164      	movs	r1, #100	; 0x64
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	3332      	adds	r3, #50	; 0x32
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <UART_SetConfig+0x384>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002292:	4498      	add	r8, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	461d      	mov	r5, r3
 8002298:	f04f 0600 	mov.w	r6, #0
 800229c:	46a9      	mov	r9, r5
 800229e:	46b2      	mov	sl, r6
 80022a0:	eb19 0309 	adds.w	r3, r9, r9
 80022a4:	eb4a 040a 	adc.w	r4, sl, sl
 80022a8:	4699      	mov	r9, r3
 80022aa:	46a2      	mov	sl, r4
 80022ac:	eb19 0905 	adds.w	r9, r9, r5
 80022b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022c8:	4689      	mov	r9, r1
 80022ca:	4692      	mov	sl, r2
 80022cc:	eb19 0005 	adds.w	r0, r9, r5
 80022d0:	eb4a 0106 	adc.w	r1, sl, r6
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	461d      	mov	r5, r3
 80022da:	f04f 0600 	mov.w	r6, #0
 80022de:	196b      	adds	r3, r5, r5
 80022e0:	eb46 0406 	adc.w	r4, r6, r6
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	f7fd ffca 	bl	8000280 <__aeabi_uldivmod>
 80022ec:	4603      	mov	r3, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <UART_SetConfig+0x384>)
 80022f4:	fba3 1302 	umull	r1, r3, r3, r2
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	2164      	movs	r1, #100	; 0x64
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <UART_SetConfig+0x384>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4442      	add	r2, r8
 8002318:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800231a:	e1b2      	b.n	8002682 <UART_SetConfig+0x6e2>
 800231c:	40011000 	.word	0x40011000
 8002320:	40011400 	.word	0x40011400
 8002324:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4ad7      	ldr	r2, [pc, #860]	; (800268c <UART_SetConfig+0x6ec>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d005      	beq.n	800233e <UART_SetConfig+0x39e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4ad6      	ldr	r2, [pc, #856]	; (8002690 <UART_SetConfig+0x6f0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	f040 80d1 	bne.w	80024e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800233e:	f7ff f80f 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 8002342:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	469a      	mov	sl, r3
 8002348:	f04f 0b00 	mov.w	fp, #0
 800234c:	46d0      	mov	r8, sl
 800234e:	46d9      	mov	r9, fp
 8002350:	eb18 0308 	adds.w	r3, r8, r8
 8002354:	eb49 0409 	adc.w	r4, r9, r9
 8002358:	4698      	mov	r8, r3
 800235a:	46a1      	mov	r9, r4
 800235c:	eb18 080a 	adds.w	r8, r8, sl
 8002360:	eb49 090b 	adc.w	r9, r9, fp
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002370:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002374:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002378:	4688      	mov	r8, r1
 800237a:	4691      	mov	r9, r2
 800237c:	eb1a 0508 	adds.w	r5, sl, r8
 8002380:	eb4b 0609 	adc.w	r6, fp, r9
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4619      	mov	r1, r3
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	0094      	lsls	r4, r2, #2
 8002398:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800239c:	008b      	lsls	r3, r1, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	4623      	mov	r3, r4
 80023a2:	4628      	mov	r0, r5
 80023a4:	4631      	mov	r1, r6
 80023a6:	f7fd ff6b 	bl	8000280 <__aeabi_uldivmod>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	461a      	mov	r2, r3
 80023b0:	4bb8      	ldr	r3, [pc, #736]	; (8002694 <UART_SetConfig+0x6f4>)
 80023b2:	fba3 2302 	umull	r2, r3, r3, r2
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	469b      	mov	fp, r3
 80023c0:	f04f 0c00 	mov.w	ip, #0
 80023c4:	46d9      	mov	r9, fp
 80023c6:	46e2      	mov	sl, ip
 80023c8:	eb19 0309 	adds.w	r3, r9, r9
 80023cc:	eb4a 040a 	adc.w	r4, sl, sl
 80023d0:	4699      	mov	r9, r3
 80023d2:	46a2      	mov	sl, r4
 80023d4:	eb19 090b 	adds.w	r9, r9, fp
 80023d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023dc:	f04f 0100 	mov.w	r1, #0
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023f0:	4689      	mov	r9, r1
 80023f2:	4692      	mov	sl, r2
 80023f4:	eb1b 0509 	adds.w	r5, fp, r9
 80023f8:	eb4c 060a 	adc.w	r6, ip, sl
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4619      	mov	r1, r3
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	f04f 0400 	mov.w	r4, #0
 800240e:	0094      	lsls	r4, r2, #2
 8002410:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002414:	008b      	lsls	r3, r1, #2
 8002416:	461a      	mov	r2, r3
 8002418:	4623      	mov	r3, r4
 800241a:	4628      	mov	r0, r5
 800241c:	4631      	mov	r1, r6
 800241e:	f7fd ff2f 	bl	8000280 <__aeabi_uldivmod>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	461a      	mov	r2, r3
 8002428:	4b9a      	ldr	r3, [pc, #616]	; (8002694 <UART_SetConfig+0x6f4>)
 800242a:	fba3 1302 	umull	r1, r3, r3, r2
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	3332      	adds	r3, #50	; 0x32
 800243c:	4a95      	ldr	r2, [pc, #596]	; (8002694 <UART_SetConfig+0x6f4>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002448:	4498      	add	r8, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	469b      	mov	fp, r3
 800244e:	f04f 0c00 	mov.w	ip, #0
 8002452:	46d9      	mov	r9, fp
 8002454:	46e2      	mov	sl, ip
 8002456:	eb19 0309 	adds.w	r3, r9, r9
 800245a:	eb4a 040a 	adc.w	r4, sl, sl
 800245e:	4699      	mov	r9, r3
 8002460:	46a2      	mov	sl, r4
 8002462:	eb19 090b 	adds.w	r9, r9, fp
 8002466:	eb4a 0a0c 	adc.w	sl, sl, ip
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800247a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800247e:	4689      	mov	r9, r1
 8002480:	4692      	mov	sl, r2
 8002482:	eb1b 0509 	adds.w	r5, fp, r9
 8002486:	eb4c 060a 	adc.w	r6, ip, sl
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	f04f 0400 	mov.w	r4, #0
 800249c:	0094      	lsls	r4, r2, #2
 800249e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024a2:	008b      	lsls	r3, r1, #2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	4628      	mov	r0, r5
 80024aa:	4631      	mov	r1, r6
 80024ac:	f7fd fee8 	bl	8000280 <__aeabi_uldivmod>
 80024b0:	4603      	mov	r3, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <UART_SetConfig+0x6f4>)
 80024b8:	fba3 1302 	umull	r1, r3, r3, r2
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	2164      	movs	r1, #100	; 0x64
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	3332      	adds	r3, #50	; 0x32
 80024ca:	4a72      	ldr	r2, [pc, #456]	; (8002694 <UART_SetConfig+0x6f4>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	f003 020f 	and.w	r2, r3, #15
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4442      	add	r2, r8
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	e0d0      	b.n	8002682 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024e0:	f7fe ff2a 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 80024e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	469a      	mov	sl, r3
 80024ea:	f04f 0b00 	mov.w	fp, #0
 80024ee:	46d0      	mov	r8, sl
 80024f0:	46d9      	mov	r9, fp
 80024f2:	eb18 0308 	adds.w	r3, r8, r8
 80024f6:	eb49 0409 	adc.w	r4, r9, r9
 80024fa:	4698      	mov	r8, r3
 80024fc:	46a1      	mov	r9, r4
 80024fe:	eb18 080a 	adds.w	r8, r8, sl
 8002502:	eb49 090b 	adc.w	r9, r9, fp
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002512:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002516:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800251a:	4688      	mov	r8, r1
 800251c:	4691      	mov	r9, r2
 800251e:	eb1a 0508 	adds.w	r5, sl, r8
 8002522:	eb4b 0609 	adc.w	r6, fp, r9
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	f04f 0400 	mov.w	r4, #0
 8002538:	0094      	lsls	r4, r2, #2
 800253a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800253e:	008b      	lsls	r3, r1, #2
 8002540:	461a      	mov	r2, r3
 8002542:	4623      	mov	r3, r4
 8002544:	4628      	mov	r0, r5
 8002546:	4631      	mov	r1, r6
 8002548:	f7fd fe9a 	bl	8000280 <__aeabi_uldivmod>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	461a      	mov	r2, r3
 8002552:	4b50      	ldr	r3, [pc, #320]	; (8002694 <UART_SetConfig+0x6f4>)
 8002554:	fba3 2302 	umull	r2, r3, r3, r2
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	469b      	mov	fp, r3
 8002562:	f04f 0c00 	mov.w	ip, #0
 8002566:	46d9      	mov	r9, fp
 8002568:	46e2      	mov	sl, ip
 800256a:	eb19 0309 	adds.w	r3, r9, r9
 800256e:	eb4a 040a 	adc.w	r4, sl, sl
 8002572:	4699      	mov	r9, r3
 8002574:	46a2      	mov	sl, r4
 8002576:	eb19 090b 	adds.w	r9, r9, fp
 800257a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800258e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002592:	4689      	mov	r9, r1
 8002594:	4692      	mov	sl, r2
 8002596:	eb1b 0509 	adds.w	r5, fp, r9
 800259a:	eb4c 060a 	adc.w	r6, ip, sl
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	f04f 0400 	mov.w	r4, #0
 80025b0:	0094      	lsls	r4, r2, #2
 80025b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025b6:	008b      	lsls	r3, r1, #2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	4628      	mov	r0, r5
 80025be:	4631      	mov	r1, r6
 80025c0:	f7fd fe5e 	bl	8000280 <__aeabi_uldivmod>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <UART_SetConfig+0x6f4>)
 80025cc:	fba3 1302 	umull	r1, r3, r3, r2
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	2164      	movs	r1, #100	; 0x64
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	3332      	adds	r3, #50	; 0x32
 80025de:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <UART_SetConfig+0x6f4>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ea:	4498      	add	r8, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	469b      	mov	fp, r3
 80025f0:	f04f 0c00 	mov.w	ip, #0
 80025f4:	46d9      	mov	r9, fp
 80025f6:	46e2      	mov	sl, ip
 80025f8:	eb19 0309 	adds.w	r3, r9, r9
 80025fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002600:	4699      	mov	r9, r3
 8002602:	46a2      	mov	sl, r4
 8002604:	eb19 090b 	adds.w	r9, r9, fp
 8002608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800261c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002620:	4689      	mov	r9, r1
 8002622:	4692      	mov	sl, r2
 8002624:	eb1b 0509 	adds.w	r5, fp, r9
 8002628:	eb4c 060a 	adc.w	r6, ip, sl
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f04f 0400 	mov.w	r4, #0
 800263e:	0094      	lsls	r4, r2, #2
 8002640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002644:	008b      	lsls	r3, r1, #2
 8002646:	461a      	mov	r2, r3
 8002648:	4623      	mov	r3, r4
 800264a:	4628      	mov	r0, r5
 800264c:	4631      	mov	r1, r6
 800264e:	f7fd fe17 	bl	8000280 <__aeabi_uldivmod>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	461a      	mov	r2, r3
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <UART_SetConfig+0x6f4>)
 800265a:	fba3 1302 	umull	r1, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2164      	movs	r1, #100	; 0x64
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	4a09      	ldr	r2, [pc, #36]	; (8002694 <UART_SetConfig+0x6f4>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4442      	add	r2, r8
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	e7ff      	b.n	8002682 <UART_SetConfig+0x6e2>
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268c:	40011000 	.word	0x40011000
 8002690:	40011400 	.word	0x40011400
 8002694:	51eb851f 	.word	0x51eb851f

08002698 <print_task>:
 */

#include "main.h"
extern UART_HandleTypeDef huart2;
void print_task(void *param)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b094      	sub	sp, #80	; 0x50
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	uint8_t arr[10];
	uint8_t msg[50];
	while (1)
	{

		if (xQueueReceive(queue_print, &msg, portMAX_DELAY) == pdPASS)
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <print_task+0x5c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f107 010c 	add.w	r1, r7, #12
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 ff19 	bl	80034e4 <xQueueReceive>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d1f3      	bne.n	80026a0 <print_task+0x8>
		{
			free_spaces = uxQueueSpacesAvailable(queue_print);
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <print_task+0x5c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 ffed 	bl	800369c <uxQueueSpacesAvailable>
 80026c2:	64f8      	str	r0, [r7, #76]	; 0x4c
			sprintf((char *)arr, "Left: %u\n", (unsigned int)free_spaces);
 80026c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ca:	490b      	ldr	r1, [pc, #44]	; (80026f8 <print_task+0x60>)
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 ff39 	bl	8005544 <siprintf>
			HAL_UART_Transmit(&huart2, arr, 10, 1000);
 80026d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	220a      	movs	r2, #10
 80026dc:	4807      	ldr	r0, [pc, #28]	; (80026fc <print_task+0x64>)
 80026de:	f7ff f8f0 	bl	80018c2 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart2, msg, 50, HAL_MAX_DELAY);
 80026e2:	f107 010c 	add.w	r1, r7, #12
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	2232      	movs	r2, #50	; 0x32
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <print_task+0x64>)
 80026ee:	f7ff f8e8 	bl	80018c2 <HAL_UART_Transmit>
		if (xQueueReceive(queue_print, &msg, portMAX_DELAY) == pdPASS)
 80026f2:	e7d5      	b.n	80026a0 <print_task+0x8>
 80026f4:	20012f40 	.word	0x20012f40
 80026f8:	08005d70 	.word	0x08005d70
 80026fc:	20012ecc 	.word	0x20012ecc

08002700 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002706:	f7fd ff3b 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270a:	f000 f855 	bl	80027b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800270e:	f000 f92f 	bl	8002970 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002712:	f000 f8af 	bl	8002874 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002716:	f000 f8d7 	bl	80028c8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800271a:	f000 f8ff 	bl	800291c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(print_task, "print_task", 400, NULL, 2, &handle_print_task);
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <main+0x98>)
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2302      	movs	r3, #2
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800272c:	491b      	ldr	r1, [pc, #108]	; (800279c <main+0x9c>)
 800272e:	481c      	ldr	r0, [pc, #112]	; (80027a0 <main+0xa0>)
 8002730:	f001 f942 	bl	80039b8 <xTaskCreate>
 8002734:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d009      	beq.n	8002750 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	e7fe      	b.n	800274e <main+0x4e>

  queue_print = xQueueCreate(20, sizeof(data1));
 8002750:	2200      	movs	r2, #0
 8002752:	2132      	movs	r1, #50	; 0x32
 8002754:	2014      	movs	r0, #20
 8002756:	f000 fca5 	bl	80030a4 <xQueueGenericCreate>
 800275a:	4602      	mov	r2, r0
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <main+0xa4>)
 800275e:	601a      	str	r2, [r3, #0]

  configASSERT(queue_print != NULL);
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <main+0xa4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <main+0x7c>
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e7fe      	b.n	800277a <main+0x7a>

  // run scheduler

  // memset(data6,0,sizeof(data6));
  HAL_UART_Receive_IT(&huart1, &data_byte1, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	490a      	ldr	r1, [pc, #40]	; (80027a8 <main+0xa8>)
 8002780:	480a      	ldr	r0, [pc, #40]	; (80027ac <main+0xac>)
 8002782:	f7ff f937 	bl	80019f4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
 8002786:	2201      	movs	r2, #1
 8002788:	4909      	ldr	r1, [pc, #36]	; (80027b0 <main+0xb0>)
 800278a:	480a      	ldr	r0, [pc, #40]	; (80027b4 <main+0xb4>)
 800278c:	f7ff f932 	bl	80019f4 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8002790:	f001 fa56 	bl	8003c40 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002794:	e7fe      	b.n	8002794 <main+0x94>
 8002796:	bf00      	nop
 8002798:	20012e88 	.word	0x20012e88
 800279c:	08005d7c 	.word	0x08005d7c
 80027a0:	08002699 	.word	0x08002699
 80027a4:	20012f40 	.word	0x20012f40
 80027a8:	20012e47 	.word	0x20012e47
 80027ac:	20012e48 	.word	0x20012e48
 80027b0:	20012e46 	.word	0x20012e46
 80027b4:	20012e8c 	.word	0x20012e8c

080027b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b094      	sub	sp, #80	; 0x50
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	2230      	movs	r2, #48	; 0x30
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 feb3 	bl	8005532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <SystemClock_Config+0xb4>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <SystemClock_Config+0xb4>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b1f      	ldr	r3, [pc, #124]	; (800286c <SystemClock_Config+0xb4>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <SystemClock_Config+0xb8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1b      	ldr	r2, [pc, #108]	; (8002870 <SystemClock_Config+0xb8>)
 8002802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <SystemClock_Config+0xb8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002814:	2302      	movs	r3, #2
 8002816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002818:	2301      	movs	r3, #1
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800281c:	2310      	movs	r3, #16
 800281e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe f971 	bl	8000b10 <HAL_RCC_OscConfig>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002834:	f000 f958 	bl	8002ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002838:	230f      	movs	r3, #15
 800283a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fbcc 	bl	8000ff0 <HAL_RCC_ClockConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800285e:	f000 f943 	bl	8002ae8 <Error_Handler>
  }
}
 8002862:	bf00      	nop
 8002864:	3750      	adds	r7, #80	; 0x50
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000

08002874 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <MX_USART1_UART_Init+0x50>)
 800287c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028ac:	f7fe ffbc 	bl	8001828 <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028b6:	f000 f917 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20012e48 	.word	0x20012e48
 80028c4:	40011000 	.word	0x40011000

080028c8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_USART2_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028d4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80028d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 8002900:	f7fe ff92 	bl	8001828 <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f000 f8ed 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20012ecc 	.word	0x20012ecc
 8002918:	40004400 	.word	0x40004400

0800291c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <MX_USART6_UART_Init+0x50>)
 8002924:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_USART6_UART_Init+0x4c>)
 8002954:	f7fe ff68 	bl	8001828 <HAL_UART_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800295e:	f000 f8c3 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20012e8c 	.word	0x20012e8c
 800296c:	40011400 	.word	0x40011400

08002970 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <MX_GPIO_Init+0x4c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <MX_GPIO_Init+0x4c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <MX_GPIO_Init+0x4c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MX_GPIO_Init+0x4c>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a08      	ldr	r2, [pc, #32]	; (80029bc <MX_GPIO_Init+0x4c>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <MX_GPIO_Init+0x4c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  if (huart->Instance == USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <HAL_UART_RxCpltCallback+0xd8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d12c      	bne.n	8002a2c <HAL_UART_RxCpltCallback+0x6c>
  {
    if (count_size1 < 100)
 80029d2:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_UART_RxCpltCallback+0xdc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b63      	cmp	r3, #99	; 0x63
 80029d8:	d822      	bhi.n	8002a20 <HAL_UART_RxCpltCallback+0x60>
    {
      data1[count_size1] = data_byte1;
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_UART_RxCpltCallback+0xdc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a30      	ldr	r2, [pc, #192]	; (8002aa0 <HAL_UART_RxCpltCallback+0xe0>)
 80029e0:	7811      	ldrb	r1, [r2, #0]
 80029e2:	4a30      	ldr	r2, [pc, #192]	; (8002aa4 <HAL_UART_RxCpltCallback+0xe4>)
 80029e4:	54d1      	strb	r1, [r2, r3]
      count_size1++;
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_UART_RxCpltCallback+0xdc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_UART_RxCpltCallback+0xdc>)
 80029ee:	6013      	str	r3, [r2, #0]

      if (data_byte1 == '\n')
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_UART_RxCpltCallback+0xe0>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b0a      	cmp	r3, #10
 80029f6:	d113      	bne.n	8002a20 <HAL_UART_RxCpltCallback+0x60>
      {
        data1[count_size1] = '\0';
 80029f8:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_UART_RxCpltCallback+0xdc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a29      	ldr	r2, [pc, #164]	; (8002aa4 <HAL_UART_RxCpltCallback+0xe4>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	54d1      	strb	r1, [r2, r3]
        xQueueSendFromISR(queue_print, data1, NULL);
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4926      	ldr	r1, [pc, #152]	; (8002aa4 <HAL_UART_RxCpltCallback+0xe4>)
 8002a0c:	f000 fcc4 	bl	8003398 <xQueueGenericSendFromISR>
        count_size1 = 0;
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_UART_RxCpltCallback+0xdc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
        memset(data1, 0, sizeof(data1));
 8002a16:	2232      	movs	r2, #50	; 0x32
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4822      	ldr	r0, [pc, #136]	; (8002aa4 <HAL_UART_RxCpltCallback+0xe4>)
 8002a1c:	f002 fd89 	bl	8005532 <memset>
      }
    }

    HAL_UART_Receive_IT(&huart1, &data_byte1, 1);
 8002a20:	2201      	movs	r2, #1
 8002a22:	491f      	ldr	r1, [pc, #124]	; (8002aa0 <HAL_UART_RxCpltCallback+0xe0>)
 8002a24:	4821      	ldr	r0, [pc, #132]	; (8002aac <HAL_UART_RxCpltCallback+0xec>)
 8002a26:	f7fe ffe5 	bl	80019f4 <HAL_UART_Receive_IT>
      }
    }

    HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
  }
}
 8002a2a:	e030      	b.n	8002a8e <HAL_UART_RxCpltCallback+0xce>
  else if (huart->Instance == USART6)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_UART_RxCpltCallback+0xf0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d12b      	bne.n	8002a8e <HAL_UART_RxCpltCallback+0xce>
    if (count_size6 < 100)
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b63      	cmp	r3, #99	; 0x63
 8002a3c:	d822      	bhi.n	8002a84 <HAL_UART_RxCpltCallback+0xc4>
      data6[count_size6] = data_byte6;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <HAL_UART_RxCpltCallback+0xf8>)
 8002a44:	7811      	ldrb	r1, [r2, #0]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_UART_RxCpltCallback+0xfc>)
 8002a48:	54d1      	strb	r1, [r2, r3]
      count_size6++;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8002a52:	6013      	str	r3, [r2, #0]
      if (data_byte6 == '\n')
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_UART_RxCpltCallback+0xf8>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b0a      	cmp	r3, #10
 8002a5a:	d113      	bne.n	8002a84 <HAL_UART_RxCpltCallback+0xc4>
        data6[count_size6] = '\0';
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_UART_RxCpltCallback+0xfc>)
 8002a62:	2100      	movs	r1, #0
 8002a64:	54d1      	strb	r1, [r2, r3]
        xQueueSendFromISR(queue_print, data6, NULL);
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4913      	ldr	r1, [pc, #76]	; (8002abc <HAL_UART_RxCpltCallback+0xfc>)
 8002a70:	f000 fc92 	bl	8003398 <xQueueGenericSendFromISR>
        count_size6 = 0;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
        memset(data6, 0, sizeof(data6));
 8002a7a:	2232      	movs	r2, #50	; 0x32
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	480f      	ldr	r0, [pc, #60]	; (8002abc <HAL_UART_RxCpltCallback+0xfc>)
 8002a80:	f002 fd57 	bl	8005532 <memset>
    HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
 8002a84:	2201      	movs	r2, #1
 8002a86:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <HAL_UART_RxCpltCallback+0xf8>)
 8002a88:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <HAL_UART_RxCpltCallback+0x100>)
 8002a8a:	f7fe ffb3 	bl	80019f4 <HAL_UART_Receive_IT>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40011000 	.word	0x40011000
 8002a9c:	20000098 	.word	0x20000098
 8002aa0:	20012e47 	.word	0x20012e47
 8002aa4:	20012e14 	.word	0x20012e14
 8002aa8:	20012f40 	.word	0x20012f40
 8002aac:	20012e48 	.word	0x20012e48
 8002ab0:	40011400 	.word	0x40011400
 8002ab4:	20000094 	.word	0x20000094
 8002ab8:	20012e46 	.word	0x20012e46
 8002abc:	20012f0c 	.word	0x20012f0c
 8002ac0:	20012e8c 	.word	0x20012e8c

08002ac4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002ad6:	f7fd fd75 	bl	80005c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40000c00 	.word	0x40000c00

08002ae8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_MspInit+0x4c>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <HAL_MspInit+0x4c>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_MspInit+0x4c>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_MspInit+0x4c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <HAL_MspInit+0x4c>)
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b28:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_MspInit+0x4c>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	; 0x38
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <HAL_UART_MspInit+0x16c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d135      	bne.n	8002bd6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002b74:	f043 0310 	orr.w	r3, r3, #16
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ba2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	483f      	ldr	r0, [pc, #252]	; (8002cbc <HAL_UART_MspInit+0x174>)
 8002bc0:	f7fd fe24 	bl	800080c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2106      	movs	r1, #6
 8002bc8:	2025      	movs	r0, #37	; 0x25
 8002bca:	f7fd fdd3 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bce:	2025      	movs	r0, #37	; 0x25
 8002bd0:	f7fd fdec 	bl	80007ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002bd4:	e06a      	b.n	8002cac <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a39      	ldr	r2, [pc, #228]	; (8002cc0 <HAL_UART_MspInit+0x178>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d12c      	bne.n	8002c3a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c18:	230c      	movs	r3, #12
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c28:	2307      	movs	r3, #7
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c30:	4619      	mov	r1, r3
 8002c32:	4822      	ldr	r0, [pc, #136]	; (8002cbc <HAL_UART_MspInit+0x174>)
 8002c34:	f7fd fdea 	bl	800080c <HAL_GPIO_Init>
}
 8002c38:	e038      	b.n	8002cac <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_UART_MspInit+0x17c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d133      	bne.n	8002cac <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4c:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c4e:	f043 0320 	orr.w	r3, r3, #32
 8002c52:	6453      	str	r3, [r2, #68]	; 0x44
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_UART_MspInit+0x170>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c7c:	23c0      	movs	r3, #192	; 0xc0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c84:	2301      	movs	r3, #1
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c94:	4619      	mov	r1, r3
 8002c96:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <HAL_UART_MspInit+0x180>)
 8002c98:	f7fd fdb8 	bl	800080c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 7, 0);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2107      	movs	r1, #7
 8002ca0:	2047      	movs	r0, #71	; 0x47
 8002ca2:	f7fd fd67 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ca6:	2047      	movs	r0, #71	; 0x47
 8002ca8:	f7fd fd80 	bl	80007ac <HAL_NVIC_EnableIRQ>
}
 8002cac:	bf00      	nop
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40004400 	.word	0x40004400
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	40020800 	.word	0x40020800

08002ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	2032      	movs	r0, #50	; 0x32
 8002ce2:	f7fd fd47 	bl	8000774 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8002ce6:	2032      	movs	r0, #50	; 0x32
 8002ce8:	f7fd fd60 	bl	80007ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_InitTick+0xa0>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_InitTick+0xa0>)
 8002cf6:	f043 0308 	orr.w	r3, r3, #8
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_InitTick+0xa0>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d08:	f107 0210 	add.w	r2, r7, #16
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fb38 	bl	8001388 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d18:	f7fe fb0e 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 8002d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <HAL_InitTick+0xa4>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <HAL_InitTick+0xac>)
 8002d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d38:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002d3a:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002d4c:	4809      	ldr	r0, [pc, #36]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d4e:	f7fe fb4d 	bl	80013ec <HAL_TIM_Base_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002d58:	4806      	ldr	r0, [pc, #24]	; (8002d74 <HAL_InitTick+0xa8>)
 8002d5a:	f7fe fb7c 	bl	8001456 <HAL_TIM_Base_Start_IT>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	e000      	b.n	8002d64 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3730      	adds	r7, #48	; 0x30
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	431bde83 	.word	0x431bde83
 8002d74:	20012f44 	.word	0x20012f44
 8002d78:	40000c00 	.word	0x40000c00

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d8e:	e7fe      	b.n	8002d8e <HardFault_Handler+0x4>

08002d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <MemManage_Handler+0x4>

08002d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <BusFault_Handler+0x4>

08002d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <UsageFault_Handler+0x4>

08002da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART1_IRQHandler+0x10>)
 8002db6:	f7fe fe73 	bl	8001aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20012e48 	.word	0x20012e48

08002dc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <TIM5_IRQHandler+0x10>)
 8002dca:	f7fe fb68 	bl	800149e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20012f44 	.word	0x20012f44

08002dd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <USART6_IRQHandler+0x10>)
 8002dde:	f7fe fe5f 	bl	8001aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20012e8c 	.word	0x20012e8c

08002dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <SystemInit+0x28>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <SystemInit+0x28>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <SystemInit+0x28>)
 8002e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e06:	609a      	str	r2, [r3, #8]
#endif
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e1e:	e003      	b.n	8002e28 <LoopCopyDataInit>

08002e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e26:	3104      	adds	r1, #4

08002e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e28:	480b      	ldr	r0, [pc, #44]	; (8002e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e30:	d3f6      	bcc.n	8002e20 <CopyDataInit>
  ldr  r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e34:	e002      	b.n	8002e3c <LoopFillZerobss>

08002e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e38:	f842 3b04 	str.w	r3, [r2], #4

08002e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e40:	d3f9      	bcc.n	8002e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e42:	f7ff ffd3 	bl	8002dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f002 fb45 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7ff fc59 	bl	8002700 <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e54:	08005dfc 	.word	0x08005dfc
  ldr  r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e5c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002e60:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002e64:	20012fc8 	.word	0x20012fc8

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>

08002e6a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f103 0208 	add.w	r2, r3, #8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e82:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f103 0208 	add.w	r2, r3, #8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f103 0208 	add.w	r2, r3, #8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d103      	bne.n	8002f2c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e00c      	b.n	8002f46 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	e002      	b.n	8002f3a <vListInsert+0x2e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d2f6      	bcs.n	8002f34 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6852      	ldr	r2, [r2, #4]
 8002f9e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d103      	bne.n	8002fb2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <xQueueGenericReset+0x28>
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002ffc:	f001 ff58 	bl	8004eb0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	441a      	add	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	3b01      	subs	r3, #1
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	441a      	add	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	22ff      	movs	r2, #255	; 0xff
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	22ff      	movs	r2, #255	; 0xff
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d114      	bne.n	800307c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01a      	beq.n	8003090 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3310      	adds	r3, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f858 	bl	8004114 <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <xQueueGenericReset+0xcc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	e009      	b.n	8003090 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3310      	adds	r3, #16
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fef2 	bl	8002e6a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3324      	adds	r3, #36	; 0x24
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff feed 	bl	8002e6a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003090:	f001 ff3c 	bl	8004f0c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <xQueueGenericCreate+0x28>
 80030b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e7fe      	b.n	80030ca <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d006      	beq.n	80030ea <xQueueGenericCreate+0x46>
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d101      	bne.n	80030ee <xQueueGenericCreate+0x4a>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <xQueueGenericCreate+0x4c>
 80030ee:	2300      	movs	r3, #0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <xQueueGenericCreate+0x64>
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e7fe      	b.n	8003106 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800310e:	d909      	bls.n	8003124 <xQueueGenericCreate+0x80>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e7fe      	b.n	8003122 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	3350      	adds	r3, #80	; 0x50
 8003128:	4618      	mov	r0, r3
 800312a:	f001 ffdb 	bl	80050e4 <pvPortMalloc>
 800312e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3350      	adds	r3, #80	; 0x50
 800313e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003140:	79fa      	ldrb	r2, [r7, #7]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f805 	bl	800315c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003152:	6a3b      	ldr	r3, [r7, #32]
    }
 8003154:	4618      	mov	r0, r3
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e002      	b.n	800317e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800318a:	2101      	movs	r1, #1
 800318c:	69b8      	ldr	r0, [r7, #24]
 800318e:	f7ff ff21 	bl	8002fd4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	; 0x38
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <xQueueGenericSend+0x30>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	e7fe      	b.n	80031d2 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <xQueueGenericSend+0x3e>
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <xQueueGenericSend+0x42>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueGenericSend+0x44>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <xQueueGenericSend+0x5c>
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
 80031fe:	e7fe      	b.n	80031fe <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d103      	bne.n	800320e <xQueueGenericSend+0x6a>
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <xQueueGenericSend+0x6e>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSend+0x70>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <xQueueGenericSend+0x88>
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
 800322a:	e7fe      	b.n	800322a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800322c:	f001 f90a 	bl	8004444 <xTaskGetSchedulerState>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <xQueueGenericSend+0x98>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <xQueueGenericSend+0x9c>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <xQueueGenericSend+0x9e>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <xQueueGenericSend+0xb6>
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	e7fe      	b.n	8003258 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800325a:	f001 fe29 	bl	8004eb0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <xQueueGenericSend+0xcc>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d129      	bne.n	80032c4 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003276:	f000 fa33 	bl	80036e0 <prvCopyDataToQueue>
 800327a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	3324      	adds	r3, #36	; 0x24
 8003288:	4618      	mov	r0, r3
 800328a:	f000 ff43 	bl	8004114 <xTaskRemoveFromEventList>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d013      	beq.n	80032bc <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <xQueueGenericSend+0x1f0>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	e00a      	b.n	80032bc <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80032ac:	4b39      	ldr	r3, [pc, #228]	; (8003394 <xQueueGenericSend+0x1f0>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80032bc:	f001 fe26 	bl	8004f0c <vPortExitCritical>
                return pdPASS;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e063      	b.n	800338c <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032ca:	f001 fe1f 	bl	8004f0c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e05c      	b.n	800338c <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 ff7b 	bl	80041d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032e6:	f001 fe11 	bl	8004f0c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032ea:	f000 fcf9 	bl	8003ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032ee:	f001 fddf 	bl	8004eb0 <vPortEnterCritical>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fe:	d103      	bne.n	8003308 <xQueueGenericSend+0x164>
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330e:	b25b      	sxtb	r3, r3
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d103      	bne.n	800331e <xQueueGenericSend+0x17a>
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800331e:	f001 fdf5 	bl	8004f0c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003322:	1d3a      	adds	r2, r7, #4
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ff6a 	bl	8004204 <xTaskCheckForTimeOut>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d124      	bne.n	8003380 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003338:	f000 faca 	bl	80038d0 <prvIsQueueFull>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d018      	beq.n	8003374 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	3310      	adds	r3, #16
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fe94 	bl	8004078 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003352:	f000 fa55 	bl	8003800 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003356:	f000 fcd1 	bl	8003cfc <xTaskResumeAll>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af7c 	bne.w	800325a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <xQueueGenericSend+0x1f0>)
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	e772      	b.n	800325a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003376:	f000 fa43 	bl	8003800 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800337a:	f000 fcbf 	bl	8003cfc <xTaskResumeAll>
 800337e:	e76c      	b.n	800325a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003382:	f000 fa3d 	bl	8003800 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003386:	f000 fcb9 	bl	8003cfc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800338a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800338c:	4618      	mov	r0, r3
 800338e:	3738      	adds	r7, #56	; 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b090      	sub	sp, #64	; 0x40
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <xQueueGenericSendFromISR+0x2c>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c2:	e7fe      	b.n	80033c2 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSendFromISR+0x3a>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <xQueueGenericSendFromISR+0x3e>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <xQueueGenericSendFromISR+0x40>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <xQueueGenericSendFromISR+0x58>
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
 80033ee:	e7fe      	b.n	80033ee <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d103      	bne.n	80033fe <xQueueGenericSendFromISR+0x66>
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <xQueueGenericSendFromISR+0x6a>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <xQueueGenericSendFromISR+0x6c>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <xQueueGenericSendFromISR+0x84>
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	e7fe      	b.n	800341a <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800341c:	f001 fe24 	bl	8005068 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003420:	f3ef 8211 	mrs	r2, BASEPRI
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	61fa      	str	r2, [r7, #28]
 8003436:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003438:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <xQueueGenericSendFromISR+0xb6>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d13d      	bne.n	80034ca <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003464:	f000 f93c 	bl	80036e0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003468:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d112      	bne.n	8003498 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d024      	beq.n	80034c4 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fe48 	bl	8004114 <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01c      	beq.n	80034c4 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d019      	beq.n	80034c4 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e015      	b.n	80034c4 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003498:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800349c:	2b7f      	cmp	r3, #127	; 0x7f
 800349e:	d109      	bne.n	80034b4 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e7fe      	b.n	80034b2 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	b25a      	sxtb	r2, r3
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80034c4:	2301      	movs	r3, #1
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80034c8:	e001      	b.n	80034ce <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3740      	adds	r7, #64	; 0x40
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <xQueueReceive+0x2e>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	e7fe      	b.n	8003510 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <xQueueReceive+0x3c>
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <xQueueReceive+0x40>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <xQueueReceive+0x42>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <xQueueReceive+0x5a>
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e7fe      	b.n	800353c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800353e:	f000 ff81 	bl	8004444 <xTaskGetSchedulerState>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <xQueueReceive+0x6a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <xQueueReceive+0x6e>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <xQueueReceive+0x70>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <xQueueReceive+0x88>
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e7fe      	b.n	800356a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800356c:	f001 fca0 	bl	8004eb0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01f      	beq.n	80035bc <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003580:	f000 f918 	bl	80037b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	1e5a      	subs	r2, r3, #1
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00f      	beq.n	80035b4 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	3310      	adds	r3, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fdbb 	bl	8004114 <xTaskRemoveFromEventList>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80035a4:	4b3c      	ldr	r3, [pc, #240]	; (8003698 <xQueueReceive+0x1b4>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80035b4:	f001 fcaa 	bl	8004f0c <vPortExitCritical>
                return pdPASS;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e069      	b.n	8003690 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80035c2:	f001 fca3 	bl	8004f0c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e062      	b.n	8003690 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d106      	bne.n	80035de <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80035d0:	f107 0310 	add.w	r3, r7, #16
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fdff 	bl	80041d8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80035da:	2301      	movs	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80035de:	f001 fc95 	bl	8004f0c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80035e2:	f000 fb7d 	bl	8003ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80035e6:	f001 fc63 	bl	8004eb0 <vPortEnterCritical>
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d103      	bne.n	8003600 <xQueueReceive+0x11c>
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003606:	b25b      	sxtb	r3, r3
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d103      	bne.n	8003616 <xQueueReceive+0x132>
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003616:	f001 fc79 	bl	8004f0c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800361a:	1d3a      	adds	r2, r7, #4
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fdee 	bl	8004204 <xTaskCheckForTimeOut>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d123      	bne.n	8003676 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800362e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003630:	f000 f938 	bl	80038a4 <prvIsQueueEmpty>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d017      	beq.n	800366a <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	3324      	adds	r3, #36	; 0x24
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fd18 	bl	8004078 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364a:	f000 f8d9 	bl	8003800 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800364e:	f000 fb55 	bl	8003cfc <xTaskResumeAll>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d189      	bne.n	800356c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <xQueueReceive+0x1b4>)
 800365a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	e780      	b.n	800356c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800366a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366c:	f000 f8c8 	bl	8003800 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003670:	f000 fb44 	bl	8003cfc <xTaskResumeAll>
 8003674:	e77a      	b.n	800356c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003678:	f000 f8c2 	bl	8003800 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800367c:	f000 fb3e 	bl	8003cfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003682:	f000 f90f 	bl	80038a4 <prvIsQueueEmpty>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	f43f af6f 	beq.w	800356c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800368e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003690:	4618      	mov	r0, r3
 8003692:	3730      	adds	r7, #48	; 0x30
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <uxQueueSpacesAvailable>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <uxQueueSpacesAvailable+0x26>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e7fe      	b.n	80036c0 <uxQueueSpacesAvailable+0x24>

    taskENTER_CRITICAL();
 80036c2:	f001 fbf5 	bl	8004eb0 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 80036d2:	f001 fc1b 	bl	8004f0c <vPortExitCritical>

    return uxReturn;
 80036d6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d14d      	bne.n	80037a2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 feb8 	bl	8004480 <xTaskPriorityDisinherit>
 8003710:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
 8003718:	e043      	b.n	80037a2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d119      	bne.n	8003754 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6858      	ldr	r0, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	461a      	mov	r2, r3
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	f001 fef6 	bl	800551c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	441a      	add	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d32b      	bcc.n	80037a2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e026      	b.n	80037a2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68d8      	ldr	r0, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	461a      	mov	r2, r3
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	f001 fedc 	bl	800551c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	425b      	negs	r3, r3
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d207      	bcs.n	8003790 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	425b      	negs	r3, r3
 800378a:	441a      	add	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d105      	bne.n	80037a2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	3b01      	subs	r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80037aa:	697b      	ldr	r3, [r7, #20]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d018      	beq.n	80037f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	441a      	add	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d303      	bcc.n	80037e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68d9      	ldr	r1, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	461a      	mov	r2, r3
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	f001 fe92 	bl	800551c <memcpy>
    }
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003808:	f001 fb52 	bl	8004eb0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003812:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003814:	e011      	b.n	800383a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b00      	cmp	r3, #0
 800381c:	d012      	beq.n	8003844 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3324      	adds	r3, #36	; 0x24
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fc76 	bl	8004114 <xTaskRemoveFromEventList>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800382e:	f000 fd4d 	bl	80042cc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	3b01      	subs	r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	2b00      	cmp	r3, #0
 8003840:	dce9      	bgt.n	8003816 <prvUnlockQueue+0x16>
 8003842:	e000      	b.n	8003846 <prvUnlockQueue+0x46>
                        break;
 8003844:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800384e:	f001 fb5d 	bl	8004f0c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003852:	f001 fb2d 	bl	8004eb0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800385c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800385e:	e011      	b.n	8003884 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d012      	beq.n	800388e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3310      	adds	r3, #16
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fc51 	bl	8004114 <xTaskRemoveFromEventList>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003878:	f000 fd28 	bl	80042cc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800387c:	7bbb      	ldrb	r3, [r7, #14]
 800387e:	3b01      	subs	r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003888:	2b00      	cmp	r3, #0
 800388a:	dce9      	bgt.n	8003860 <prvUnlockQueue+0x60>
 800388c:	e000      	b.n	8003890 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800388e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003898:	f001 fb38 	bl	8004f0c <vPortExitCritical>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80038ac:	f001 fb00 	bl	8004eb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e001      	b.n	80038c2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80038c2:	f001 fb23 	bl	8004f0c <vPortExitCritical>

    return xReturn;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80038d8:	f001 faea 	bl	8004eb0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d102      	bne.n	80038ee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e001      	b.n	80038f2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80038f2:	f001 fb0b 	bl	8004f0c <vPortExitCritical>

    return xReturn;
 80038f6:	68fb      	ldr	r3, [r7, #12]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e014      	b.n	800393a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003910:	4a0e      	ldr	r2, [pc, #56]	; (800394c <vQueueAddToRegistry+0x4c>)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800391c:	490b      	ldr	r1, [pc, #44]	; (800394c <vQueueAddToRegistry+0x4c>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <vQueueAddToRegistry+0x4c>)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003932:	e005      	b.n	8003940 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3301      	adds	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b07      	cmp	r3, #7
 800393e:	d9e7      	bls.n	8003910 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	20012f84 	.word	0x20012f84

08003950 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003960:	f001 faa6 	bl	8004eb0 <vPortEnterCritical>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800396a:	b25b      	sxtb	r3, r3
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d103      	bne.n	800397a <vQueueWaitForMessageRestricted+0x2a>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d103      	bne.n	8003990 <vQueueWaitForMessageRestricted+0x40>
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003990:	f001 fabc 	bl	8004f0c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d106      	bne.n	80039aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	3324      	adds	r3, #36	; 0x24
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fb8b 	bl	80040c0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7ff ff28 	bl	8003800 <prvUnlockQueue>
    }
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	; 0x30
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fb89 	bl	80050e4 <pvPortMalloc>
 80039d2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039da:	2058      	movs	r0, #88	; 0x58
 80039dc:	f001 fb82 	bl	80050e4 <pvPortMalloc>
 80039e0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30
 80039ee:	e005      	b.n	80039fc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f001 fc53 	bl	800529c <vPortFree>
 80039f6:	e001      	b.n	80039fc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d013      	beq.n	8003a2a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9303      	str	r3, [sp, #12]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	9302      	str	r3, [sp, #8]
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f80e 	bl	8003a3a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003a1e:	69f8      	ldr	r0, [r7, #28]
 8003a20:	f000 f8a0 	bl	8003b64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	e002      	b.n	8003a30 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003a30:	69bb      	ldr	r3, [r7, #24]
    }
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b088      	sub	sp, #32
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	461a      	mov	r2, r3
 8003a52:	21a5      	movs	r1, #165	; 0xa5
 8003a54:	f001 fd6d 	bl	8005532 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a62:	3b01      	subs	r3, #1
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f023 0307 	bic.w	r3, r3, #7
 8003a70:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <prvInitialiseNewTask+0x56>
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e7fe      	b.n	8003a8e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01f      	beq.n	8003ad6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e012      	b.n	8003ac2 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	7819      	ldrb	r1, [r3, #0]
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3334      	adds	r3, #52	; 0x34
 8003aac:	460a      	mov	r2, r1
 8003aae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d006      	beq.n	8003aca <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b09      	cmp	r3, #9
 8003ac6:	d9e9      	bls.n	8003a9c <prvInitialiseNewTask+0x62>
 8003ac8:	e000      	b.n	8003acc <prvInitialiseNewTask+0x92>
            {
                break;
 8003aca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ad4:	e003      	b.n	8003ade <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d901      	bls.n	8003ae8 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	2200      	movs	r2, #0
 8003af8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	3304      	adds	r3, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff f9d3 	bl	8002eaa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	3318      	adds	r3, #24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f9ce 	bl	8002eaa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	f1c3 0205 	rsb	r2, r3, #5
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	3350      	adds	r3, #80	; 0x50
 8003b28:	2204      	movs	r2, #4
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fd00 	bl	8005532 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	3354      	adds	r3, #84	; 0x54
 8003b36:	2201      	movs	r2, #1
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fcf9 	bl	8005532 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	69b8      	ldr	r0, [r7, #24]
 8003b46:	f001 f887 	bl	8004c58 <pxPortInitialiseStack>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b6c:	f001 f9a0 	bl	8004eb0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <prvAddNewTaskToReadyList+0xc0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <prvAddNewTaskToReadyList+0xc0>)
 8003b78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003b82:	4a29      	ldr	r2, [pc, #164]	; (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <prvAddNewTaskToReadyList+0xc0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d110      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003b90:	f000 fbc0 	bl	8004314 <prvInitialiseTaskLists>
 8003b94:	e00d      	b.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003b96:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b9e:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d802      	bhi.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003bac:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003bb2:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <prvAddNewTaskToReadyList+0xcc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <prvAddNewTaskToReadyList+0xcc>)
 8003bba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bbc:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <prvAddNewTaskToReadyList+0xcc>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <prvAddNewTaskToReadyList+0xd0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <prvAddNewTaskToReadyList+0xd0>)
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <prvAddNewTaskToReadyList+0xd4>)
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7ff f969 	bl	8002ec4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003bf2:	f001 f98b 	bl	8004f0c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d207      	bcs.n	8003c1c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <prvAddNewTaskToReadyList+0xd8>)
 8003c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000174 	.word	0x20000174
 8003c28:	2000009c 	.word	0x2000009c
 8003c2c:	20000180 	.word	0x20000180
 8003c30:	20000190 	.word	0x20000190
 8003c34:	2000017c 	.word	0x2000017c
 8003c38:	200000a0 	.word	0x200000a0
 8003c3c:	e000ed04 	.word	0xe000ed04

08003c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <vTaskStartScheduler+0x84>)
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2282      	movs	r2, #130	; 0x82
 8003c52:	491d      	ldr	r1, [pc, #116]	; (8003cc8 <vTaskStartScheduler+0x88>)
 8003c54:	481d      	ldr	r0, [pc, #116]	; (8003ccc <vTaskStartScheduler+0x8c>)
 8003c56:	f7ff feaf 	bl	80039b8 <xTaskCreate>
 8003c5a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003c62:	f000 fceb 	bl	800463c <xTimerCreateTimerTask>
 8003c66:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d115      	bne.n	8003c9a <vTaskStartScheduler+0x5a>
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c80:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <vTaskStartScheduler+0x90>)
 8003c82:	f04f 32ff 	mov.w	r2, #4294967295
 8003c86:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <vTaskStartScheduler+0x94>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <vTaskStartScheduler+0x98>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003c94:	f001 f86e 	bl	8004d74 <xPortStartScheduler>
 8003c98:	e00d      	b.n	8003cb6 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d109      	bne.n	8003cb6 <vTaskStartScheduler+0x76>
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	e7fe      	b.n	8003cb4 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <vTaskStartScheduler+0x9c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000198 	.word	0x20000198
 8003cc8:	08005d88 	.word	0x08005d88
 8003ccc:	080042e5 	.word	0x080042e5
 8003cd0:	20000194 	.word	0x20000194
 8003cd4:	20000180 	.word	0x20000180
 8003cd8:	20000178 	.word	0x20000178
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <vTaskSuspendAll+0x18>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <vTaskSuspendAll+0x18>)
 8003cec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	2000019c 	.word	0x2000019c

08003cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003d0a:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <xTaskResumeAll+0x114>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <xTaskResumeAll+0x2a>
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	e7fe      	b.n	8003d24 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003d26:	f001 f8c3 	bl	8004eb0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <xTaskResumeAll+0x114>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	4a37      	ldr	r2, [pc, #220]	; (8003e10 <xTaskResumeAll+0x114>)
 8003d32:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <xTaskResumeAll+0x114>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d161      	bne.n	8003e00 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <xTaskResumeAll+0x118>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05d      	beq.n	8003e00 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d44:	e02e      	b.n	8003da4 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <xTaskResumeAll+0x11c>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3318      	adds	r3, #24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f913 	bl	8002f7e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff f90e 	bl	8002f7e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	2201      	movs	r2, #1
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <xTaskResumeAll+0x120>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	4a2a      	ldr	r2, [pc, #168]	; (8003e1c <xTaskResumeAll+0x120>)
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <xTaskResumeAll+0x124>)
 8003d82:	441a      	add	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f7ff f89a 	bl	8002ec4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <xTaskResumeAll+0x128>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8003d9e:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <xTaskResumeAll+0x12c>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <xTaskResumeAll+0x11c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1cc      	bne.n	8003d46 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003db2:	f000 fb2b 	bl	800440c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <xTaskResumeAll+0x130>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003dc2:	f000 f847 	bl	8003e54 <xTaskIncrementTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8003dcc:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <xTaskResumeAll+0x12c>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f1      	bne.n	8003dc2 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <xTaskResumeAll+0x130>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <xTaskResumeAll+0x12c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003dec:	2301      	movs	r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <xTaskResumeAll+0x134>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003e00:	f001 f884 	bl	8004f0c <vPortExitCritical>

    return xAlreadyYielded;
 8003e04:	68bb      	ldr	r3, [r7, #8]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	2000019c 	.word	0x2000019c
 8003e14:	20000174 	.word	0x20000174
 8003e18:	20000134 	.word	0x20000134
 8003e1c:	2000017c 	.word	0x2000017c
 8003e20:	200000a0 	.word	0x200000a0
 8003e24:	2000009c 	.word	0x2000009c
 8003e28:	20000188 	.word	0x20000188
 8003e2c:	20000184 	.word	0x20000184
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <xTaskGetTickCount+0x1c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003e40:	687b      	ldr	r3, [r7, #4]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000178 	.word	0x20000178

08003e54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e5e:	4b4e      	ldr	r3, [pc, #312]	; (8003f98 <xTaskIncrementTick+0x144>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 808d 	bne.w	8003f82 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <xTaskIncrementTick+0x148>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <xTaskIncrementTick+0x148>)
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11f      	bne.n	8003ebc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003e7c:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <xTaskIncrementTick+0x14c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <xTaskIncrementTick+0x46>
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	e7fe      	b.n	8003e98 <xTaskIncrementTick+0x44>
 8003e9a:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <xTaskIncrementTick+0x14c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <xTaskIncrementTick+0x150>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <xTaskIncrementTick+0x14c>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4a3e      	ldr	r2, [pc, #248]	; (8003fa4 <xTaskIncrementTick+0x150>)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <xTaskIncrementTick+0x154>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <xTaskIncrementTick+0x154>)
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	f000 faa8 	bl	800440c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <xTaskIncrementTick+0x158>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d348      	bcc.n	8003f58 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <xTaskIncrementTick+0x14c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <xTaskIncrementTick+0x158>)
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	601a      	str	r2, [r3, #0]
                    break;
 8003ed8:	e03e      	b.n	8003f58 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <xTaskIncrementTick+0x14c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d203      	bcs.n	8003efa <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <xTaskIncrementTick+0x158>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ef8:	e02e      	b.n	8003f58 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff f83d 	bl	8002f7e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff f834 	bl	8002f7e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <xTaskIncrementTick+0x15c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <xTaskIncrementTick+0x15c>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <xTaskIncrementTick+0x160>)
 8003f36:	441a      	add	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fe ffc0 	bl	8002ec4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <xTaskIncrementTick+0x164>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3b9      	bcc.n	8003ec6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f56:	e7b6      	b.n	8003ec6 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <xTaskIncrementTick+0x164>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5e:	4915      	ldr	r1, [pc, #84]	; (8003fb4 <xTaskIncrementTick+0x160>)
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d901      	bls.n	8003f74 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <xTaskIncrementTick+0x168>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e004      	b.n	8003f8c <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <xTaskIncrementTick+0x16c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <xTaskIncrementTick+0x16c>)
 8003f8a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000019c 	.word	0x2000019c
 8003f9c:	20000178 	.word	0x20000178
 8003fa0:	2000012c 	.word	0x2000012c
 8003fa4:	20000130 	.word	0x20000130
 8003fa8:	2000018c 	.word	0x2000018c
 8003fac:	20000194 	.word	0x20000194
 8003fb0:	2000017c 	.word	0x2000017c
 8003fb4:	200000a0 	.word	0x200000a0
 8003fb8:	2000009c 	.word	0x2000009c
 8003fbc:	20000188 	.word	0x20000188
 8003fc0:	20000184 	.word	0x20000184

08003fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <vTaskSwitchContext+0xa0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003fd2:	4b25      	ldr	r3, [pc, #148]	; (8004068 <vTaskSwitchContext+0xa4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003fd8:	e03e      	b.n	8004058 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <vTaskSwitchContext+0xa4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <vTaskSwitchContext+0xa8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003fee:	7afb      	ldrb	r3, [r7, #11]
 8003ff0:	f1c3 031f 	rsb	r3, r3, #31
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	491e      	ldr	r1, [pc, #120]	; (8004070 <vTaskSwitchContext+0xac>)
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <vTaskSwitchContext+0x5a>
        __asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e7fe      	b.n	800401c <vTaskSwitchContext+0x58>
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4a11      	ldr	r2, [pc, #68]	; (8004070 <vTaskSwitchContext+0xac>)
 800402a:	4413      	add	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3308      	adds	r3, #8
 8004040:	429a      	cmp	r2, r3
 8004042:	d104      	bne.n	800404e <vTaskSwitchContext+0x8a>
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <vTaskSwitchContext+0xb0>)
 8004056:	6013      	str	r3, [r2, #0]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	2000019c 	.word	0x2000019c
 8004068:	20000188 	.word	0x20000188
 800406c:	2000017c 	.word	0x2000017c
 8004070:	200000a0 	.word	0x200000a0
 8004074:	2000009c 	.word	0x2000009c

08004078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <vTaskPlaceOnEventList+0x24>
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e7fe      	b.n	800409a <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <vTaskPlaceOnEventList+0x44>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3318      	adds	r3, #24
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fe ff31 	bl	8002f0c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040aa:	2101      	movs	r1, #1
 80040ac:	6838      	ldr	r0, [r7, #0]
 80040ae:	f000 fa5f 	bl	8004570 <prvAddCurrentTaskToDelayedList>
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	2000009c 	.word	0x2000009c

080040c0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <vTaskPlaceOnEventListRestricted+0x26>
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e7fe      	b.n	80040e4 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <vTaskPlaceOnEventListRestricted+0x50>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3318      	adds	r3, #24
 80040ec:	4619      	mov	r1, r3
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7fe fee8 	bl	8002ec4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	68b8      	ldr	r0, [r7, #8]
 8004104:	f000 fa34 	bl	8004570 <prvAddCurrentTaskToDelayedList>
    }
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	2000009c 	.word	0x2000009c

08004114 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <xTaskRemoveFromEventList+0x2a>
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e7fe      	b.n	800413c <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	3318      	adds	r3, #24
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe ff1b 	bl	8002f7e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <xTaskRemoveFromEventList+0xac>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11c      	bne.n	800418a <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	3304      	adds	r3, #4
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe ff12 	bl	8002f7e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	2201      	movs	r2, #1
 8004160:	409a      	lsls	r2, r3
 8004162:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <xTaskRemoveFromEventList+0xb0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <xTaskRemoveFromEventList+0xb0>)
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <xTaskRemoveFromEventList+0xb4>)
 800417a:	441a      	add	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	3304      	adds	r3, #4
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7fe fe9e 	bl	8002ec4 <vListInsertEnd>
 8004188:	e005      	b.n	8004196 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <xTaskRemoveFromEventList+0xb8>)
 8004192:	f7fe fe97 	bl	8002ec4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <xTaskRemoveFromEventList+0xbc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d905      	bls.n	80041b0 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <xTaskRemoveFromEventList+0xc0>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e001      	b.n	80041b4 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80041b4:	697b      	ldr	r3, [r7, #20]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000019c 	.word	0x2000019c
 80041c4:	2000017c 	.word	0x2000017c
 80041c8:	200000a0 	.word	0x200000a0
 80041cc:	20000134 	.word	0x20000134
 80041d0:	2000009c 	.word	0x2000009c
 80041d4:	20000188 	.word	0x20000188

080041d8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <vTaskInternalSetTimeOutState+0x24>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <vTaskInternalSetTimeOutState+0x28>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	605a      	str	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	2000018c 	.word	0x2000018c
 8004200:	20000178 	.word	0x20000178

08004204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <xTaskCheckForTimeOut+0x24>
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e7fe      	b.n	8004226 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <xTaskCheckForTimeOut+0x3e>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e7fe      	b.n	8004240 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004242:	f000 fe35 	bl	8004eb0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004246:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <xTaskCheckForTimeOut+0xc0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d102      	bne.n	8004266 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	e026      	b.n	80042b4 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <xTaskCheckForTimeOut+0xc4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d00a      	beq.n	8004288 <xTaskCheckForTimeOut+0x84>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	d305      	bcc.n	8004288 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e015      	b.n	80042b4 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20b      	bcs.n	80042aa <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ff9a 	bl	80041d8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e004      	b.n	80042b4 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80042b4:	f000 fe2a 	bl	8004f0c <vPortExitCritical>

    return xReturn;
 80042b8:	69fb      	ldr	r3, [r7, #28]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000178 	.word	0x20000178
 80042c8:	2000018c 	.word	0x2000018c

080042cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <vTaskMissedYield+0x14>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	20000188 	.word	0x20000188

080042e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80042ec:	f000 f852 	bl	8004394 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <prvIdleTask+0x28>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d9f9      	bls.n	80042ec <prvIdleTask+0x8>
                {
                    taskYIELD();
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <prvIdleTask+0x2c>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004308:	e7f0      	b.n	80042ec <prvIdleTask+0x8>
 800430a:	bf00      	nop
 800430c:	200000a0 	.word	0x200000a0
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	e00c      	b.n	800433a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <prvInitialiseTaskLists+0x60>)
 800432c:	4413      	add	r3, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fd9b 	bl	8002e6a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3301      	adds	r3, #1
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d9ef      	bls.n	8004320 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <prvInitialiseTaskLists+0x64>)
 8004342:	f7fe fd92 	bl	8002e6a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004346:	480d      	ldr	r0, [pc, #52]	; (800437c <prvInitialiseTaskLists+0x68>)
 8004348:	f7fe fd8f 	bl	8002e6a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800434c:	480c      	ldr	r0, [pc, #48]	; (8004380 <prvInitialiseTaskLists+0x6c>)
 800434e:	f7fe fd8c 	bl	8002e6a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004352:	480c      	ldr	r0, [pc, #48]	; (8004384 <prvInitialiseTaskLists+0x70>)
 8004354:	f7fe fd89 	bl	8002e6a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004358:	480b      	ldr	r0, [pc, #44]	; (8004388 <prvInitialiseTaskLists+0x74>)
 800435a:	f7fe fd86 	bl	8002e6a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <prvInitialiseTaskLists+0x78>)
 8004360:	4a05      	ldr	r2, [pc, #20]	; (8004378 <prvInitialiseTaskLists+0x64>)
 8004362:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004364:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <prvInitialiseTaskLists+0x7c>)
 8004366:	4a05      	ldr	r2, [pc, #20]	; (800437c <prvInitialiseTaskLists+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	200000a0 	.word	0x200000a0
 8004378:	20000104 	.word	0x20000104
 800437c:	20000118 	.word	0x20000118
 8004380:	20000134 	.word	0x20000134
 8004384:	20000148 	.word	0x20000148
 8004388:	20000160 	.word	0x20000160
 800438c:	2000012c 	.word	0x2000012c
 8004390:	20000130 	.word	0x20000130

08004394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800439a:	e019      	b.n	80043d0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800439c:	f000 fd88 	bl	8004eb0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <prvCheckTasksWaitingTermination+0x4c>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fde6 	bl	8002f7e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <prvCheckTasksWaitingTermination+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <prvCheckTasksWaitingTermination+0x50>)
 80043ba:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043c4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80043c6:	f000 fda1 	bl	8004f0c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f80e 	bl	80043ec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <prvCheckTasksWaitingTermination+0x54>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e1      	bne.n	800439c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80043d8:	bf00      	nop
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000148 	.word	0x20000148
 80043e4:	20000174 	.word	0x20000174
 80043e8:	2000015c 	.word	0x2000015c

080043ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 ff4f 	bl	800529c <vPortFree>
                vPortFree( pxTCB );
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 ff4c 	bl	800529c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvResetNextTaskUnblockTime+0x30>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <prvResetNextTaskUnblockTime+0x34>)
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004422:	e005      	b.n	8004430 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <prvResetNextTaskUnblockTime+0x30>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a04      	ldr	r2, [pc, #16]	; (8004440 <prvResetNextTaskUnblockTime+0x34>)
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000012c 	.word	0x2000012c
 8004440:	20000194 	.word	0x20000194

08004444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <xTaskGetSchedulerState+0x34>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004452:	2301      	movs	r3, #1
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	e008      	b.n	800446a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <xTaskGetSchedulerState+0x38>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004460:	2302      	movs	r3, #2
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	e001      	b.n	800446a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800446a:	687b      	ldr	r3, [r7, #4]
    }
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	20000180 	.word	0x20000180
 800447c:	2000019c 	.word	0x2000019c

08004480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d061      	beq.n	800455a <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <xTaskPriorityDisinherit+0xe4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d009      	beq.n	80044b4 <xTaskPriorityDisinherit+0x34>
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	e7fe      	b.n	80044b2 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <xTaskPriorityDisinherit+0x50>
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	e7fe      	b.n	80044ce <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d4:	1e5a      	subs	r2, r3, #1
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d039      	beq.n	800455a <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d135      	bne.n	800455a <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fd43 	bl	8002f7e <uxListRemove>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43da      	mvns	r2, r3
 800450a:	4b17      	ldr	r3, [pc, #92]	; (8004568 <xTaskPriorityDisinherit+0xe8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4013      	ands	r3, r2
 8004510:	4a15      	ldr	r2, [pc, #84]	; (8004568 <xTaskPriorityDisinherit+0xe8>)
 8004512:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f1c3 0205 	rsb	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	2201      	movs	r2, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <xTaskPriorityDisinherit+0xe8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4313      	orrs	r3, r2
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <xTaskPriorityDisinherit+0xe8>)
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <xTaskPriorityDisinherit+0xec>)
 8004548:	441a      	add	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7fe fcb7 	bl	8002ec4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004556:	2301      	movs	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800455a:	697b      	ldr	r3, [r7, #20]
    }
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	2000009c 	.word	0x2000009c
 8004568:	2000017c 	.word	0x2000017c
 800456c:	200000a0 	.word	0x200000a0

08004570 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800457a:	4b29      	ldr	r3, [pc, #164]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004580:	4b28      	ldr	r3, [pc, #160]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fcf9 	bl	8002f7e <uxListRemove>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004592:	4b24      	ldr	r3, [pc, #144]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	2201      	movs	r2, #1
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43da      	mvns	r2, r3
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4013      	ands	r3, r2
 80045a6:	4a20      	ldr	r2, [pc, #128]	; (8004628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d10a      	bne.n	80045c8 <prvAddCurrentTaskToDelayedList+0x58>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	481a      	ldr	r0, [pc, #104]	; (800462c <prvAddCurrentTaskToDelayedList+0xbc>)
 80045c2:	f7fe fc7f 	bl	8002ec4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80045c6:	e026      	b.n	8004616 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d209      	bcs.n	80045f4 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e0:	4b13      	ldr	r3, [pc, #76]	; (8004630 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3304      	adds	r3, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7fe fc8d 	bl	8002f0c <vListInsert>
}
 80045f2:	e010      	b.n	8004616 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fe fc83 	bl	8002f0c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	d202      	bcs.n	8004616 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004610:	4a09      	ldr	r2, [pc, #36]	; (8004638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000178 	.word	0x20000178
 8004624:	2000009c 	.word	0x2000009c
 8004628:	2000017c 	.word	0x2000017c
 800462c:	20000160 	.word	0x20000160
 8004630:	20000130 	.word	0x20000130
 8004634:	2000012c 	.word	0x2000012c
 8004638:	20000194 	.word	0x20000194

0800463c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004646:	f000 fad1 	bl	8004bec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <xTimerCreateTimerTask+0x54>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <xTimerCreateTimerTask+0x58>)
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	2302      	movs	r3, #2
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004660:	490d      	ldr	r1, [pc, #52]	; (8004698 <xTimerCreateTimerTask+0x5c>)
 8004662:	480e      	ldr	r0, [pc, #56]	; (800469c <xTimerCreateTimerTask+0x60>)
 8004664:	f7ff f9a8 	bl	80039b8 <xTaskCreate>
 8004668:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <xTimerCreateTimerTask+0x48>
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	e7fe      	b.n	8004682 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8004684:	687b      	ldr	r3, [r7, #4]
    }
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200001d0 	.word	0x200001d0
 8004694:	200001d4 	.word	0x200001d4
 8004698:	08005d90 	.word	0x08005d90
 800469c:	080047d1 	.word	0x080047d1

080046a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <xTimerGenericCommand+0x2c>
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	e7fe      	b.n	80046ca <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <xTimerGenericCommand+0x94>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02a      	beq.n	800472a <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	dc18      	bgt.n	8004718 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e6:	f7ff fead 	bl	8004444 <xTaskGetSchedulerState>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d109      	bne.n	8004704 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <xTimerGenericCommand+0x94>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f107 0114 	add.w	r1, r7, #20
 80046f8:	2300      	movs	r3, #0
 80046fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fc:	f7fe fd52 	bl	80031a4 <xQueueGenericSend>
 8004700:	6278      	str	r0, [r7, #36]	; 0x24
 8004702:	e012      	b.n	800472a <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <xTimerGenericCommand+0x94>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	f107 0114 	add.w	r1, r7, #20
 800470c:	2300      	movs	r3, #0
 800470e:	2200      	movs	r2, #0
 8004710:	f7fe fd48 	bl	80031a4 <xQueueGenericSend>
 8004714:	6278      	str	r0, [r7, #36]	; 0x24
 8004716:	e008      	b.n	800472a <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <xTimerGenericCommand+0x94>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f107 0114 	add.w	r1, r7, #20
 8004720:	2300      	movs	r3, #0
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	f7fe fe38 	bl	8003398 <xQueueGenericSendFromISR>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800472c:	4618      	mov	r0, r3
 800472e:	3728      	adds	r7, #40	; 0x28
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200001d0 	.word	0x200001d0

08004738 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <prvProcessExpiredTimer+0x94>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fc14 	bl	8002f7e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d021      	beq.n	80047a8 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	18d1      	adds	r1, r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6978      	ldr	r0, [r7, #20]
 8004772:	f000 f8d1 	bl	8004918 <prvInsertTimerInActiveList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01e      	beq.n	80047ba <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	2100      	movs	r1, #0
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff8a 	bl	80046a0 <xTimerGenericCommand>
 800478c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d112      	bne.n	80047ba <prvProcessExpiredTimer+0x82>
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e7fe      	b.n	80047a6 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	6978      	ldr	r0, [r7, #20]
 80047c0:	4798      	blx	r3
    }
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200001c8 	.word	0x200001c8

080047d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f857 	bl	8004890 <prvGetNextExpireTime>
 80047e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4619      	mov	r1, r3
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f803 	bl	80047f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80047ee:	f000 f8d5 	bl	800499c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047f2:	e7f1      	b.n	80047d8 <prvTimerTask+0x8>

080047f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80047fe:	f7ff fa6f 	bl	8003ce0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f866 	bl	80048d8 <prvSampleTimeNow>
 800480c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d130      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <prvProcessTimerOrBlockTask+0x3c>
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d806      	bhi.n	8004830 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004822:	f7ff fa6b 	bl	8003cfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff85 	bl	8004738 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800482e:	e024      	b.n	800487a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <prvProcessTimerOrBlockTask+0x90>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <prvProcessTimerOrBlockTask+0x50>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <prvProcessTimerOrBlockTask+0x52>
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <prvProcessTimerOrBlockTask+0x94>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	f7ff f87b 	bl	8003950 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800485a:	f7ff fa4f 	bl	8003cfc <xTaskResumeAll>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <prvProcessTimerOrBlockTask+0x98>)
 8004866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	f3bf 8f6f 	isb	sy
    }
 8004874:	e001      	b.n	800487a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004876:	f7ff fa41 	bl	8003cfc <xTaskResumeAll>
    }
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200001cc 	.word	0x200001cc
 8004888:	200001d0 	.word	0x200001d0
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <prvGetNextExpireTime+0x44>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <prvGetNextExpireTime+0x16>
 80048a2:	2201      	movs	r2, #1
 80048a4:	e000      	b.n	80048a8 <prvGetNextExpireTime+0x18>
 80048a6:	2200      	movs	r2, #0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b4:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <prvGetNextExpireTime+0x44>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e001      	b.n	80048c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80048c4:	68fb      	ldr	r3, [r7, #12]
    }
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	200001c8 	.word	0x200001c8

080048d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80048e0:	f7ff faa8 	bl	8003e34 <xTaskGetTickCount>
 80048e4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <prvSampleTimeNow+0x3c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d205      	bcs.n	80048fc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80048f0:	f000 f918 	bl	8004b24 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e002      	b.n	8004902 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004902:	4a04      	ldr	r2, [pc, #16]	; (8004914 <prvSampleTimeNow+0x3c>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004908:	68fb      	ldr	r3, [r7, #12]
    }
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200001d8 	.word	0x200001d8

08004918 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d812      	bhi.n	8004964 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad2      	subs	r2, r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e01b      	b.n	800498a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <prvInsertTimerInActiveList+0x7c>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fe fad5 	bl	8002f0c <vListInsert>
 8004962:	e012      	b.n	800498a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d206      	bcs.n	800497a <prvInsertTimerInActiveList+0x62>
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d302      	bcc.n	800497a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e007      	b.n	800498a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800497a:	4b07      	ldr	r3, [pc, #28]	; (8004998 <prvInsertTimerInActiveList+0x80>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fe fac1 	bl	8002f0c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800498a:	697b      	ldr	r3, [r7, #20]
    }
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	200001cc 	.word	0x200001cc
 8004998:	200001c8 	.word	0x200001c8

0800499c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800499c:	b580      	push	{r7, lr}
 800499e:	b08c      	sub	sp, #48	; 0x30
 80049a0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049a2:	e0ac      	b.n	8004afe <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f2c0 80a8 	blt.w	8004afc <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fade 	bl	8002f7e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff87 	bl	80048d8 <prvSampleTimeNow>
 80049ca:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b09      	cmp	r3, #9
 80049d0:	f200 8095 	bhi.w	8004afe <prvProcessReceivedCommands+0x162>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <prvProcessReceivedCommands+0x40>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a05 	.word	0x08004a05
 80049e8:	08004a77 	.word	0x08004a77
 80049ec:	08004a8b 	.word	0x08004a8b
 80049f0:	08004ad3 	.word	0x08004ad3
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a05 	.word	0x08004a05
 80049fc:	08004a77 	.word	0x08004a77
 8004a00:	08004a8b 	.word	0x08004a8b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	18d1      	adds	r1, r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a24:	f7ff ff78 	bl	8004918 <prvInsertTimerInActiveList>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d067      	beq.n	8004afe <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a34:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d05c      	beq.n	8004afe <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	441a      	add	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2300      	movs	r3, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a56:	f7ff fe23 	bl	80046a0 <xTimerGenericCommand>
 8004a5a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d14d      	bne.n	8004afe <prvProcessReceivedCommands+0x162>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e7fe      	b.n	8004a74 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004a88:	e039      	b.n	8004afe <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <prvProcessReceivedCommands+0x122>
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e7fe      	b.n	8004abc <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	18d1      	adds	r1, r2, r3
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	6a3a      	ldr	r2, [r7, #32]
 8004aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004acc:	f7ff ff24 	bl	8004918 <prvInsertTimerInActiveList>
                        break;
 8004ad0:	e015      	b.n	8004afe <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8004ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae2:	f000 fbdb 	bl	800529c <vPortFree>
 8004ae6:	e00a      	b.n	8004afe <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aee:	f023 0301 	bic.w	r3, r3, #1
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004afa:	e000      	b.n	8004afe <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004afc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <prvProcessReceivedCommands+0x184>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f107 0108 	add.w	r1, r7, #8
 8004b06:	2200      	movs	r2, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fceb 	bl	80034e4 <xQueueReceive>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f47f af47 	bne.w	80049a4 <prvProcessReceivedCommands+0x8>
        }
    }
 8004b16:	bf00      	nop
 8004b18:	3728      	adds	r7, #40	; 0x28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200001d0 	.word	0x200001d0

08004b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b2a:	e047      	b.n	8004bbc <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fa1a 	bl	8002f7e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02d      	beq.n	8004bbc <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d90e      	bls.n	8004b90 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b7e:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fe f9bf 	bl	8002f0c <vListInsert>
 8004b8e:	e015      	b.n	8004bbc <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b90:	2300      	movs	r3, #0
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff fd80 	bl	80046a0 <xTimerGenericCommand>
 8004ba0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <prvSwitchTimerLists+0x98>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	e7fe      	b.n	8004bba <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1b2      	bne.n	8004b2c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004bc6:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <prvSwitchTimerLists+0xc4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <prvSwitchTimerLists+0xc0>)
 8004bd2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <prvSwitchTimerLists+0xc4>)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6013      	str	r3, [r2, #0]
    }
 8004bda:	bf00      	nop
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200001c8 	.word	0x200001c8
 8004be8:	200001cc 	.word	0x200001cc

08004bec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004bf0:	f000 f95e 	bl	8004eb0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11d      	bne.n	8004c38 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004bfc:	4811      	ldr	r0, [pc, #68]	; (8004c44 <prvCheckForValidListAndQueue+0x58>)
 8004bfe:	f7fe f934 	bl	8002e6a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c02:	4811      	ldr	r0, [pc, #68]	; (8004c48 <prvCheckForValidListAndQueue+0x5c>)
 8004c04:	f7fe f931 	bl	8002e6a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <prvCheckForValidListAndQueue+0x60>)
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <prvCheckForValidListAndQueue+0x58>)
 8004c0c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <prvCheckForValidListAndQueue+0x64>)
 8004c10:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <prvCheckForValidListAndQueue+0x5c>)
 8004c12:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c14:	2200      	movs	r2, #0
 8004c16:	210c      	movs	r1, #12
 8004c18:	200a      	movs	r0, #10
 8004c1a:	f7fe fa43 	bl	80030a4 <xQueueGenericCreate>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004c22:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <prvCheckForValidListAndQueue+0x54>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4908      	ldr	r1, [pc, #32]	; (8004c54 <prvCheckForValidListAndQueue+0x68>)
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fe64 	bl	8003900 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c38:	f000 f968 	bl	8004f0c <vPortExitCritical>
    }
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200001d0 	.word	0x200001d0
 8004c44:	200001a0 	.word	0x200001a0
 8004c48:	200001b4 	.word	0x200001b4
 8004c4c:	200001c8 	.word	0x200001c8
 8004c50:	200001cc 	.word	0x200001cc
 8004c54:	08005d98 	.word	0x08005d98

08004c58 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b04      	subs	r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3b04      	subs	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3b04      	subs	r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <pxPortInitialiseStack+0x64>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3b14      	subs	r3, #20
 8004c92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f06f 0202 	mvn.w	r2, #2
 8004ca6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3b20      	subs	r3, #32
 8004cac:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	08004cc1 	.word	0x08004cc1

08004cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004cca:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <prvTaskExitError+0x50>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d009      	beq.n	8004ce8 <prvTaskExitError+0x28>
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e7fe      	b.n	8004ce6 <prvTaskExitError+0x26>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004cfa:	bf00      	nop
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0fc      	beq.n	8004cfc <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000010 	.word	0x20000010
	...

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	4770      	bx	lr
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst2>:
 8004d40:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004d48:	4808      	ldr	r0, [pc, #32]	; (8004d6c <prvPortStartFirstTask+0x24>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8814 	msr	CONTROL, r0
 8004d5a:	b662      	cpsie	i
 8004d5c:	b661      	cpsie	f
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	df00      	svc	0
 8004d68:	bf00      	nop
 8004d6a:	0000      	.short	0x0000
 8004d6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop

08004d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <xPortStartScheduler+0x118>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a44      	ldr	r2, [pc, #272]	; (8004e90 <xPortStartScheduler+0x11c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d109      	bne.n	8004d98 <xPortStartScheduler+0x24>
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	e7fe      	b.n	8004d96 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d98:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <xPortStartScheduler+0x118>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3d      	ldr	r2, [pc, #244]	; (8004e94 <xPortStartScheduler+0x120>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d109      	bne.n	8004db6 <xPortStartScheduler+0x42>
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e7fe      	b.n	8004db4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004db6:	4b38      	ldr	r3, [pc, #224]	; (8004e98 <xPortStartScheduler+0x124>)
 8004db8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	22ff      	movs	r2, #255	; 0xff
 8004dc6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <xPortStartScheduler+0x128>)
 8004ddc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dde:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de4:	e009      	b.n	8004dfa <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4a2c      	ldr	r2, [pc, #176]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004dee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d0ef      	beq.n	8004de6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e06:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1c3 0307 	rsb	r3, r3, #7
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d009      	beq.n	8004e26 <xPortStartScheduler+0xb2>
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e26:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004e2e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <xPortStartScheduler+0x12c>)
 8004e3a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e44:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <xPortStartScheduler+0x130>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <xPortStartScheduler+0x130>)
 8004e4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e4e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <xPortStartScheduler+0x130>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <xPortStartScheduler+0x130>)
 8004e56:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e5a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e5c:	f000 f8d4 	bl	8005008 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <xPortStartScheduler+0x134>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004e66:	f000 f8f3 	bl	8005050 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e6a:	4b10      	ldr	r3, [pc, #64]	; (8004eac <xPortStartScheduler+0x138>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <xPortStartScheduler+0x138>)
 8004e70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e74:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004e76:	f7ff ff67 	bl	8004d48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004e7a:	f7ff f8a3 	bl	8003fc4 <vTaskSwitchContext>
    prvTaskExitError();
 8004e7e:	f7ff ff1f 	bl	8004cc0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	e000ed00 	.word	0xe000ed00
 8004e90:	410fc271 	.word	0x410fc271
 8004e94:	410fc270 	.word	0x410fc270
 8004e98:	e000e400 	.word	0xe000e400
 8004e9c:	200001dc 	.word	0x200001dc
 8004ea0:	200001e0 	.word	0x200001e0
 8004ea4:	e000ed20 	.word	0xe000ed20
 8004ea8:	20000010 	.word	0x20000010
 8004eac:	e000ef34 	.word	0xe000ef34

08004eb0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <vPortEnterCritical+0x54>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <vPortEnterCritical+0x54>)
 8004ed0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <vPortEnterCritical+0x54>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10e      	bne.n	8004ef8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <vPortEnterCritical+0x58>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <vPortEnterCritical+0x48>
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	e7fe      	b.n	8004ef6 <vPortEnterCritical+0x46>
    }
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	20000010 	.word	0x20000010
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <vPortExitCritical+0x4c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <vPortExitCritical+0x22>
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	e7fe      	b.n	8004f2c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <vPortExitCritical+0x4c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <vPortExitCritical+0x4c>)
 8004f36:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <vPortExitCritical+0x4c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <vPortExitCritical+0x3e>
 8004f40:	2300      	movs	r3, #0
 8004f42:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20000010 	.word	0x20000010
 8004f5c:	00000000 	.word	0x00000000

08004f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f60:	f3ef 8009 	mrs	r0, PSP
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <pxCurrentTCBConst>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f01e 0f10 	tst.w	lr, #16
 8004f70:	bf08      	it	eq
 8004f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f84:	f380 8811 	msr	BASEPRI, r0
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f7ff f818 	bl	8003fc4 <vTaskSwitchContext>
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f380 8811 	msr	BASEPRI, r0
 8004f9c:	bc09      	pop	{r0, r3}
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa6:	f01e 0f10 	tst.w	lr, #16
 8004faa:	bf08      	it	eq
 8004fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fb0:	f380 8809 	msr	PSP, r0
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst>:
 8004fc0:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
        __asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004fe0:	f7fe ff38 	bl	8003e54 <xTaskIncrementTick>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <SysTick_Handler+0x2a>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <SysTick_Handler+0x3c>)
 8004fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <vPortSetupTimerInterrupt+0x34>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <vPortSetupTimerInterrupt+0x38>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <vPortSetupTimerInterrupt+0x3c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <vPortSetupTimerInterrupt+0x40>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	4a09      	ldr	r2, [pc, #36]	; (800504c <vPortSetupTimerInterrupt+0x44>)
 8005026:	3b01      	subs	r3, #1
 8005028:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <vPortSetupTimerInterrupt+0x34>)
 800502c:	2207      	movs	r2, #7
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000e010 	.word	0xe000e010
 8005040:	e000e018 	.word	0xe000e018
 8005044:	20000008 	.word	0x20000008
 8005048:	10624dd3 	.word	0x10624dd3
 800504c:	e000e014 	.word	0xe000e014

08005050 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005050:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005060 <vPortEnableVFP+0x10>
 8005054:	6801      	ldr	r1, [r0, #0]
 8005056:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800505a:	6001      	str	r1, [r0, #0]
 800505c:	4770      	bx	lr
 800505e:	0000      	.short	0x0000
 8005060:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800506e:	f3ef 8305 	mrs	r3, IPSR
 8005072:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d913      	bls.n	80050a2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800507a:	4a16      	ldr	r2, [pc, #88]	; (80050d4 <vPortValidateInterruptPriority+0x6c>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <vPortValidateInterruptPriority+0x70>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	7afa      	ldrb	r2, [r7, #11]
 800508a:	429a      	cmp	r2, r3
 800508c:	d209      	bcs.n	80050a2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	e7fe      	b.n	80050a0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <vPortValidateInterruptPriority+0x74>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <vPortValidateInterruptPriority+0x78>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d909      	bls.n	80050c6 <vPortValidateInterruptPriority+0x5e>
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	e7fe      	b.n	80050c4 <vPortValidateInterruptPriority+0x5c>
    }
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	e000e3f0 	.word	0xe000e3f0
 80050d8:	200001dc 	.word	0x200001dc
 80050dc:	e000ed0c 	.word	0xe000ed0c
 80050e0:	200001e0 	.word	0x200001e0

080050e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80050f0:	f7fe fdf6 	bl	8003ce0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80050f4:	4b63      	ldr	r3, [pc, #396]	; (8005284 <pvPortMalloc+0x1a0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80050fc:	f000 f92e 	bl	800535c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005100:	4b61      	ldr	r3, [pc, #388]	; (8005288 <pvPortMalloc+0x1a4>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4013      	ands	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	f040 80a5 	bne.w	8005258 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d02c      	beq.n	800516e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005114:	2208      	movs	r2, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d226      	bcs.n	800516e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8005120:	2208      	movs	r2, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	3308      	adds	r3, #8
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d213      	bcs.n	8005168 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f023 0307 	bic.w	r3, r3, #7
 8005146:	3308      	adds	r3, #8
 8005148:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00f      	beq.n	8005174 <pvPortMalloc+0x90>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e7fe      	b.n	8005166 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800516c:	e002      	b.n	8005174 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	e000      	b.n	8005176 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005174:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d06d      	beq.n	8005258 <pvPortMalloc+0x174>
 800517c:	4b43      	ldr	r3, [pc, #268]	; (800528c <pvPortMalloc+0x1a8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	d868      	bhi.n	8005258 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005186:	4b42      	ldr	r3, [pc, #264]	; (8005290 <pvPortMalloc+0x1ac>)
 8005188:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800518a:	4b41      	ldr	r3, [pc, #260]	; (8005290 <pvPortMalloc+0x1ac>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005190:	e004      	b.n	800519c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d903      	bls.n	80051ae <pvPortMalloc+0xca>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1f1      	bne.n	8005192 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80051ae:	4b35      	ldr	r3, [pc, #212]	; (8005284 <pvPortMalloc+0x1a0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d04f      	beq.n	8005258 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	4413      	add	r3, r2
 80051c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	1ad2      	subs	r2, r2, r3
 80051d2:	2308      	movs	r3, #8
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d91e      	bls.n	8005218 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4413      	add	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <pvPortMalloc+0x11c>
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	e7fe      	b.n	80051fe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005212:	69b8      	ldr	r0, [r7, #24]
 8005214:	f000 f904 	bl	8005420 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005218:	4b1c      	ldr	r3, [pc, #112]	; (800528c <pvPortMalloc+0x1a8>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4a1a      	ldr	r2, [pc, #104]	; (800528c <pvPortMalloc+0x1a8>)
 8005224:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005226:	4b19      	ldr	r3, [pc, #100]	; (800528c <pvPortMalloc+0x1a8>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <pvPortMalloc+0x1b0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d203      	bcs.n	800523a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <pvPortMalloc+0x1a8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <pvPortMalloc+0x1b0>)
 8005238:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <pvPortMalloc+0x1a4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	431a      	orrs	r2, r3
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <pvPortMalloc+0x1b4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <pvPortMalloc+0x1b4>)
 8005256:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005258:	f7fe fd50 	bl	8003cfc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <pvPortMalloc+0x196>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	e7fe      	b.n	8005278 <pvPortMalloc+0x194>
    return pvReturn;
 800527a:	69fb      	ldr	r3, [r7, #28]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20012dec 	.word	0x20012dec
 8005288:	20012e00 	.word	0x20012e00
 800528c:	20012df0 	.word	0x20012df0
 8005290:	20012de4 	.word	0x20012de4
 8005294:	20012df4 	.word	0x20012df4
 8005298:	20012df8 	.word	0x20012df8

0800529c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d04b      	beq.n	8005346 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80052ae:	2308      	movs	r3, #8
 80052b0:	425b      	negs	r3, r3
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4413      	add	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	4b23      	ldr	r3, [pc, #140]	; (8005350 <vPortFree+0xb4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <vPortFree+0x42>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e7fe      	b.n	80052dc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <vPortFree+0x5e>
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	e7fe      	b.n	80052f8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	4b14      	ldr	r3, [pc, #80]	; (8005350 <vPortFree+0xb4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01e      	beq.n	8005346 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11a      	bne.n	8005346 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <vPortFree+0xb4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	43db      	mvns	r3, r3
 800531a:	401a      	ands	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005320:	f7fe fcde 	bl	8003ce0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <vPortFree+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4413      	add	r3, r2
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <vPortFree+0xb8>)
 8005330:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005332:	6938      	ldr	r0, [r7, #16]
 8005334:	f000 f874 	bl	8005420 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005338:	4b07      	ldr	r3, [pc, #28]	; (8005358 <vPortFree+0xbc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3301      	adds	r3, #1
 800533e:	4a06      	ldr	r2, [pc, #24]	; (8005358 <vPortFree+0xbc>)
 8005340:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005342:	f7fe fcdb 	bl	8003cfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20012e00 	.word	0x20012e00
 8005354:	20012df0 	.word	0x20012df0
 8005358:	20012dfc 	.word	0x20012dfc

0800535c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005362:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005366:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005368:	4b27      	ldr	r3, [pc, #156]	; (8005408 <prvHeapInit+0xac>)
 800536a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3307      	adds	r3, #7
 800537a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0307 	bic.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <prvHeapInit+0xac>)
 800538c:	4413      	add	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005394:	4a1d      	ldr	r2, [pc, #116]	; (800540c <prvHeapInit+0xb0>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <prvHeapInit+0xb0>)
 800539c:	2200      	movs	r2, #0
 800539e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4413      	add	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80053a8:	2208      	movs	r2, #8
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0307 	bic.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a15      	ldr	r2, [pc, #84]	; (8005410 <prvHeapInit+0xb4>)
 80053bc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <prvHeapInit+0xb4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <prvHeapInit+0xb4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <prvHeapInit+0xb4>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <prvHeapInit+0xb8>)
 80053ea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4a09      	ldr	r2, [pc, #36]	; (8005418 <prvHeapInit+0xbc>)
 80053f2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <prvHeapInit+0xc0>)
 80053f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053fa:	601a      	str	r2, [r3, #0]
}
 80053fc:	bf00      	nop
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	200001e4 	.word	0x200001e4
 800540c:	20012de4 	.word	0x20012de4
 8005410:	20012dec 	.word	0x20012dec
 8005414:	20012df4 	.word	0x20012df4
 8005418:	20012df0 	.word	0x20012df0
 800541c:	20012e00 	.word	0x20012e00

08005420 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005428:	4b28      	ldr	r3, [pc, #160]	; (80054cc <prvInsertBlockIntoFreeList+0xac>)
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e002      	b.n	8005434 <prvInsertBlockIntoFreeList+0x14>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	429a      	cmp	r2, r3
 800543c:	d8f7      	bhi.n	800542e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4413      	add	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d108      	bne.n	8005462 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	441a      	add	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	429a      	cmp	r2, r3
 8005474:	d118      	bne.n	80054a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <prvInsertBlockIntoFreeList+0xb0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d00d      	beq.n	800549e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	441a      	add	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e008      	b.n	80054b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <prvInsertBlockIntoFreeList+0xb0>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e003      	b.n	80054b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d002      	beq.n	80054be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054be:	bf00      	nop
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20012de4 	.word	0x20012de4
 80054d0:	20012dec 	.word	0x20012dec

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4e0d      	ldr	r6, [pc, #52]	; (800550c <__libc_init_array+0x38>)
 80054d8:	4c0d      	ldr	r4, [pc, #52]	; (8005510 <__libc_init_array+0x3c>)
 80054da:	1ba4      	subs	r4, r4, r6
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	2500      	movs	r5, #0
 80054e0:	42a5      	cmp	r5, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	4e0b      	ldr	r6, [pc, #44]	; (8005514 <__libc_init_array+0x40>)
 80054e6:	4c0c      	ldr	r4, [pc, #48]	; (8005518 <__libc_init_array+0x44>)
 80054e8:	f000 fc36 	bl	8005d58 <_init>
 80054ec:	1ba4      	subs	r4, r4, r6
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	2500      	movs	r5, #0
 80054f2:	42a5      	cmp	r5, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054fc:	4798      	blx	r3
 80054fe:	3501      	adds	r5, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005506:	4798      	blx	r3
 8005508:	3501      	adds	r5, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	08005df4 	.word	0x08005df4
 8005510:	08005df4 	.word	0x08005df4
 8005514:	08005df4 	.word	0x08005df4
 8005518:	08005df8 	.word	0x08005df8

0800551c <memcpy>:
 800551c:	b510      	push	{r4, lr}
 800551e:	1e43      	subs	r3, r0, #1
 8005520:	440a      	add	r2, r1
 8005522:	4291      	cmp	r1, r2
 8005524:	d100      	bne.n	8005528 <memcpy+0xc>
 8005526:	bd10      	pop	{r4, pc}
 8005528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800552c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005530:	e7f7      	b.n	8005522 <memcpy+0x6>

08005532 <memset>:
 8005532:	4402      	add	r2, r0
 8005534:	4603      	mov	r3, r0
 8005536:	4293      	cmp	r3, r2
 8005538:	d100      	bne.n	800553c <memset+0xa>
 800553a:	4770      	bx	lr
 800553c:	f803 1b01 	strb.w	r1, [r3], #1
 8005540:	e7f9      	b.n	8005536 <memset+0x4>
	...

08005544 <siprintf>:
 8005544:	b40e      	push	{r1, r2, r3}
 8005546:	b500      	push	{lr}
 8005548:	b09c      	sub	sp, #112	; 0x70
 800554a:	ab1d      	add	r3, sp, #116	; 0x74
 800554c:	9002      	str	r0, [sp, #8]
 800554e:	9006      	str	r0, [sp, #24]
 8005550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005554:	4809      	ldr	r0, [pc, #36]	; (800557c <siprintf+0x38>)
 8005556:	9107      	str	r1, [sp, #28]
 8005558:	9104      	str	r1, [sp, #16]
 800555a:	4909      	ldr	r1, [pc, #36]	; (8005580 <siprintf+0x3c>)
 800555c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005560:	9105      	str	r1, [sp, #20]
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	a902      	add	r1, sp, #8
 8005568:	f000 f866 	bl	8005638 <_svfiprintf_r>
 800556c:	9b02      	ldr	r3, [sp, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	b01c      	add	sp, #112	; 0x70
 8005574:	f85d eb04 	ldr.w	lr, [sp], #4
 8005578:	b003      	add	sp, #12
 800557a:	4770      	bx	lr
 800557c:	20000014 	.word	0x20000014
 8005580:	ffff0208 	.word	0xffff0208

08005584 <__ssputs_r>:
 8005584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005588:	688e      	ldr	r6, [r1, #8]
 800558a:	429e      	cmp	r6, r3
 800558c:	4682      	mov	sl, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4690      	mov	r8, r2
 8005592:	4699      	mov	r9, r3
 8005594:	d837      	bhi.n	8005606 <__ssputs_r+0x82>
 8005596:	898a      	ldrh	r2, [r1, #12]
 8005598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800559c:	d031      	beq.n	8005602 <__ssputs_r+0x7e>
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	6909      	ldr	r1, [r1, #16]
 80055a2:	1a6f      	subs	r7, r5, r1
 80055a4:	6965      	ldr	r5, [r4, #20]
 80055a6:	2302      	movs	r3, #2
 80055a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80055b0:	f109 0301 	add.w	r3, r9, #1
 80055b4:	443b      	add	r3, r7
 80055b6:	429d      	cmp	r5, r3
 80055b8:	bf38      	it	cc
 80055ba:	461d      	movcc	r5, r3
 80055bc:	0553      	lsls	r3, r2, #21
 80055be:	d530      	bpl.n	8005622 <__ssputs_r+0x9e>
 80055c0:	4629      	mov	r1, r5
 80055c2:	f000 fb21 	bl	8005c08 <_malloc_r>
 80055c6:	4606      	mov	r6, r0
 80055c8:	b950      	cbnz	r0, 80055e0 <__ssputs_r+0x5c>
 80055ca:	230c      	movs	r3, #12
 80055cc:	f8ca 3000 	str.w	r3, [sl]
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	463a      	mov	r2, r7
 80055e2:	6921      	ldr	r1, [r4, #16]
 80055e4:	f7ff ff9a 	bl	800551c <memcpy>
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	6126      	str	r6, [r4, #16]
 80055f6:	6165      	str	r5, [r4, #20]
 80055f8:	443e      	add	r6, r7
 80055fa:	1bed      	subs	r5, r5, r7
 80055fc:	6026      	str	r6, [r4, #0]
 80055fe:	60a5      	str	r5, [r4, #8]
 8005600:	464e      	mov	r6, r9
 8005602:	454e      	cmp	r6, r9
 8005604:	d900      	bls.n	8005608 <__ssputs_r+0x84>
 8005606:	464e      	mov	r6, r9
 8005608:	4632      	mov	r2, r6
 800560a:	4641      	mov	r1, r8
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	f000 fa93 	bl	8005b38 <memmove>
 8005612:	68a3      	ldr	r3, [r4, #8]
 8005614:	1b9b      	subs	r3, r3, r6
 8005616:	60a3      	str	r3, [r4, #8]
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	441e      	add	r6, r3
 800561c:	6026      	str	r6, [r4, #0]
 800561e:	2000      	movs	r0, #0
 8005620:	e7dc      	b.n	80055dc <__ssputs_r+0x58>
 8005622:	462a      	mov	r2, r5
 8005624:	f000 fb4a 	bl	8005cbc <_realloc_r>
 8005628:	4606      	mov	r6, r0
 800562a:	2800      	cmp	r0, #0
 800562c:	d1e2      	bne.n	80055f4 <__ssputs_r+0x70>
 800562e:	6921      	ldr	r1, [r4, #16]
 8005630:	4650      	mov	r0, sl
 8005632:	f000 fa9b 	bl	8005b6c <_free_r>
 8005636:	e7c8      	b.n	80055ca <__ssputs_r+0x46>

08005638 <_svfiprintf_r>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	461d      	mov	r5, r3
 800563e:	898b      	ldrh	r3, [r1, #12]
 8005640:	061f      	lsls	r7, r3, #24
 8005642:	b09d      	sub	sp, #116	; 0x74
 8005644:	4680      	mov	r8, r0
 8005646:	460c      	mov	r4, r1
 8005648:	4616      	mov	r6, r2
 800564a:	d50f      	bpl.n	800566c <_svfiprintf_r+0x34>
 800564c:	690b      	ldr	r3, [r1, #16]
 800564e:	b96b      	cbnz	r3, 800566c <_svfiprintf_r+0x34>
 8005650:	2140      	movs	r1, #64	; 0x40
 8005652:	f000 fad9 	bl	8005c08 <_malloc_r>
 8005656:	6020      	str	r0, [r4, #0]
 8005658:	6120      	str	r0, [r4, #16]
 800565a:	b928      	cbnz	r0, 8005668 <_svfiprintf_r+0x30>
 800565c:	230c      	movs	r3, #12
 800565e:	f8c8 3000 	str.w	r3, [r8]
 8005662:	f04f 30ff 	mov.w	r0, #4294967295
 8005666:	e0c8      	b.n	80057fa <_svfiprintf_r+0x1c2>
 8005668:	2340      	movs	r3, #64	; 0x40
 800566a:	6163      	str	r3, [r4, #20]
 800566c:	2300      	movs	r3, #0
 800566e:	9309      	str	r3, [sp, #36]	; 0x24
 8005670:	2320      	movs	r3, #32
 8005672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005676:	2330      	movs	r3, #48	; 0x30
 8005678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800567c:	9503      	str	r5, [sp, #12]
 800567e:	f04f 0b01 	mov.w	fp, #1
 8005682:	4637      	mov	r7, r6
 8005684:	463d      	mov	r5, r7
 8005686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800568a:	b10b      	cbz	r3, 8005690 <_svfiprintf_r+0x58>
 800568c:	2b25      	cmp	r3, #37	; 0x25
 800568e:	d13e      	bne.n	800570e <_svfiprintf_r+0xd6>
 8005690:	ebb7 0a06 	subs.w	sl, r7, r6
 8005694:	d00b      	beq.n	80056ae <_svfiprintf_r+0x76>
 8005696:	4653      	mov	r3, sl
 8005698:	4632      	mov	r2, r6
 800569a:	4621      	mov	r1, r4
 800569c:	4640      	mov	r0, r8
 800569e:	f7ff ff71 	bl	8005584 <__ssputs_r>
 80056a2:	3001      	adds	r0, #1
 80056a4:	f000 80a4 	beq.w	80057f0 <_svfiprintf_r+0x1b8>
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	4453      	add	r3, sl
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	783b      	ldrb	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 809d 	beq.w	80057f0 <_svfiprintf_r+0x1b8>
 80056b6:	2300      	movs	r3, #0
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056c0:	9304      	str	r3, [sp, #16]
 80056c2:	9307      	str	r3, [sp, #28]
 80056c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056c8:	931a      	str	r3, [sp, #104]	; 0x68
 80056ca:	462f      	mov	r7, r5
 80056cc:	2205      	movs	r2, #5
 80056ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056d2:	4850      	ldr	r0, [pc, #320]	; (8005814 <_svfiprintf_r+0x1dc>)
 80056d4:	f7fa fd84 	bl	80001e0 <memchr>
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	b9d0      	cbnz	r0, 8005712 <_svfiprintf_r+0xda>
 80056dc:	06d9      	lsls	r1, r3, #27
 80056de:	bf44      	itt	mi
 80056e0:	2220      	movmi	r2, #32
 80056e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056e6:	071a      	lsls	r2, r3, #28
 80056e8:	bf44      	itt	mi
 80056ea:	222b      	movmi	r2, #43	; 0x2b
 80056ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056f0:	782a      	ldrb	r2, [r5, #0]
 80056f2:	2a2a      	cmp	r2, #42	; 0x2a
 80056f4:	d015      	beq.n	8005722 <_svfiprintf_r+0xea>
 80056f6:	9a07      	ldr	r2, [sp, #28]
 80056f8:	462f      	mov	r7, r5
 80056fa:	2000      	movs	r0, #0
 80056fc:	250a      	movs	r5, #10
 80056fe:	4639      	mov	r1, r7
 8005700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005704:	3b30      	subs	r3, #48	; 0x30
 8005706:	2b09      	cmp	r3, #9
 8005708:	d94d      	bls.n	80057a6 <_svfiprintf_r+0x16e>
 800570a:	b1b8      	cbz	r0, 800573c <_svfiprintf_r+0x104>
 800570c:	e00f      	b.n	800572e <_svfiprintf_r+0xf6>
 800570e:	462f      	mov	r7, r5
 8005710:	e7b8      	b.n	8005684 <_svfiprintf_r+0x4c>
 8005712:	4a40      	ldr	r2, [pc, #256]	; (8005814 <_svfiprintf_r+0x1dc>)
 8005714:	1a80      	subs	r0, r0, r2
 8005716:	fa0b f000 	lsl.w	r0, fp, r0
 800571a:	4318      	orrs	r0, r3
 800571c:	9004      	str	r0, [sp, #16]
 800571e:	463d      	mov	r5, r7
 8005720:	e7d3      	b.n	80056ca <_svfiprintf_r+0x92>
 8005722:	9a03      	ldr	r2, [sp, #12]
 8005724:	1d11      	adds	r1, r2, #4
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	9103      	str	r1, [sp, #12]
 800572a:	2a00      	cmp	r2, #0
 800572c:	db01      	blt.n	8005732 <_svfiprintf_r+0xfa>
 800572e:	9207      	str	r2, [sp, #28]
 8005730:	e004      	b.n	800573c <_svfiprintf_r+0x104>
 8005732:	4252      	negs	r2, r2
 8005734:	f043 0302 	orr.w	r3, r3, #2
 8005738:	9207      	str	r2, [sp, #28]
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	783b      	ldrb	r3, [r7, #0]
 800573e:	2b2e      	cmp	r3, #46	; 0x2e
 8005740:	d10c      	bne.n	800575c <_svfiprintf_r+0x124>
 8005742:	787b      	ldrb	r3, [r7, #1]
 8005744:	2b2a      	cmp	r3, #42	; 0x2a
 8005746:	d133      	bne.n	80057b0 <_svfiprintf_r+0x178>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	9203      	str	r2, [sp, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	bfb8      	it	lt
 8005754:	f04f 33ff 	movlt.w	r3, #4294967295
 8005758:	3702      	adds	r7, #2
 800575a:	9305      	str	r3, [sp, #20]
 800575c:	4d2e      	ldr	r5, [pc, #184]	; (8005818 <_svfiprintf_r+0x1e0>)
 800575e:	7839      	ldrb	r1, [r7, #0]
 8005760:	2203      	movs	r2, #3
 8005762:	4628      	mov	r0, r5
 8005764:	f7fa fd3c 	bl	80001e0 <memchr>
 8005768:	b138      	cbz	r0, 800577a <_svfiprintf_r+0x142>
 800576a:	2340      	movs	r3, #64	; 0x40
 800576c:	1b40      	subs	r0, r0, r5
 800576e:	fa03 f000 	lsl.w	r0, r3, r0
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	4303      	orrs	r3, r0
 8005776:	3701      	adds	r7, #1
 8005778:	9304      	str	r3, [sp, #16]
 800577a:	7839      	ldrb	r1, [r7, #0]
 800577c:	4827      	ldr	r0, [pc, #156]	; (800581c <_svfiprintf_r+0x1e4>)
 800577e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005782:	2206      	movs	r2, #6
 8005784:	1c7e      	adds	r6, r7, #1
 8005786:	f7fa fd2b 	bl	80001e0 <memchr>
 800578a:	2800      	cmp	r0, #0
 800578c:	d038      	beq.n	8005800 <_svfiprintf_r+0x1c8>
 800578e:	4b24      	ldr	r3, [pc, #144]	; (8005820 <_svfiprintf_r+0x1e8>)
 8005790:	bb13      	cbnz	r3, 80057d8 <_svfiprintf_r+0x1a0>
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	3307      	adds	r3, #7
 8005796:	f023 0307 	bic.w	r3, r3, #7
 800579a:	3308      	adds	r3, #8
 800579c:	9303      	str	r3, [sp, #12]
 800579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a0:	444b      	add	r3, r9
 80057a2:	9309      	str	r3, [sp, #36]	; 0x24
 80057a4:	e76d      	b.n	8005682 <_svfiprintf_r+0x4a>
 80057a6:	fb05 3202 	mla	r2, r5, r2, r3
 80057aa:	2001      	movs	r0, #1
 80057ac:	460f      	mov	r7, r1
 80057ae:	e7a6      	b.n	80056fe <_svfiprintf_r+0xc6>
 80057b0:	2300      	movs	r3, #0
 80057b2:	3701      	adds	r7, #1
 80057b4:	9305      	str	r3, [sp, #20]
 80057b6:	4619      	mov	r1, r3
 80057b8:	250a      	movs	r5, #10
 80057ba:	4638      	mov	r0, r7
 80057bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c0:	3a30      	subs	r2, #48	; 0x30
 80057c2:	2a09      	cmp	r2, #9
 80057c4:	d903      	bls.n	80057ce <_svfiprintf_r+0x196>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0c8      	beq.n	800575c <_svfiprintf_r+0x124>
 80057ca:	9105      	str	r1, [sp, #20]
 80057cc:	e7c6      	b.n	800575c <_svfiprintf_r+0x124>
 80057ce:	fb05 2101 	mla	r1, r5, r1, r2
 80057d2:	2301      	movs	r3, #1
 80057d4:	4607      	mov	r7, r0
 80057d6:	e7f0      	b.n	80057ba <_svfiprintf_r+0x182>
 80057d8:	ab03      	add	r3, sp, #12
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	4622      	mov	r2, r4
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <_svfiprintf_r+0x1ec>)
 80057e0:	a904      	add	r1, sp, #16
 80057e2:	4640      	mov	r0, r8
 80057e4:	f3af 8000 	nop.w
 80057e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057ec:	4681      	mov	r9, r0
 80057ee:	d1d6      	bne.n	800579e <_svfiprintf_r+0x166>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	065b      	lsls	r3, r3, #25
 80057f4:	f53f af35 	bmi.w	8005662 <_svfiprintf_r+0x2a>
 80057f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057fa:	b01d      	add	sp, #116	; 0x74
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	ab03      	add	r3, sp, #12
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4622      	mov	r2, r4
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <_svfiprintf_r+0x1ec>)
 8005808:	a904      	add	r1, sp, #16
 800580a:	4640      	mov	r0, r8
 800580c:	f000 f882 	bl	8005914 <_printf_i>
 8005810:	e7ea      	b.n	80057e8 <_svfiprintf_r+0x1b0>
 8005812:	bf00      	nop
 8005814:	08005db8 	.word	0x08005db8
 8005818:	08005dbe 	.word	0x08005dbe
 800581c:	08005dc2 	.word	0x08005dc2
 8005820:	00000000 	.word	0x00000000
 8005824:	08005585 	.word	0x08005585

08005828 <_printf_common>:
 8005828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	4691      	mov	r9, r2
 800582e:	461f      	mov	r7, r3
 8005830:	688a      	ldr	r2, [r1, #8]
 8005832:	690b      	ldr	r3, [r1, #16]
 8005834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005838:	4293      	cmp	r3, r2
 800583a:	bfb8      	it	lt
 800583c:	4613      	movlt	r3, r2
 800583e:	f8c9 3000 	str.w	r3, [r9]
 8005842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005846:	4606      	mov	r6, r0
 8005848:	460c      	mov	r4, r1
 800584a:	b112      	cbz	r2, 8005852 <_printf_common+0x2a>
 800584c:	3301      	adds	r3, #1
 800584e:	f8c9 3000 	str.w	r3, [r9]
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	0699      	lsls	r1, r3, #26
 8005856:	bf42      	ittt	mi
 8005858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800585c:	3302      	addmi	r3, #2
 800585e:	f8c9 3000 	strmi.w	r3, [r9]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	f015 0506 	ands.w	r5, r5, #6
 8005868:	d107      	bne.n	800587a <_printf_common+0x52>
 800586a:	f104 0a19 	add.w	sl, r4, #25
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	f8d9 2000 	ldr.w	r2, [r9]
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	42ab      	cmp	r3, r5
 8005878:	dc28      	bgt.n	80058cc <_printf_common+0xa4>
 800587a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	3300      	adds	r3, #0
 8005882:	bf18      	it	ne
 8005884:	2301      	movne	r3, #1
 8005886:	0692      	lsls	r2, r2, #26
 8005888:	d42d      	bmi.n	80058e6 <_printf_common+0xbe>
 800588a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800588e:	4639      	mov	r1, r7
 8005890:	4630      	mov	r0, r6
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d020      	beq.n	80058da <_printf_common+0xb2>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	68e5      	ldr	r5, [r4, #12]
 800589c:	f8d9 2000 	ldr.w	r2, [r9]
 80058a0:	f003 0306 	and.w	r3, r3, #6
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	bf08      	it	eq
 80058a8:	1aad      	subeq	r5, r5, r2
 80058aa:	68a3      	ldr	r3, [r4, #8]
 80058ac:	6922      	ldr	r2, [r4, #16]
 80058ae:	bf0c      	ite	eq
 80058b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b4:	2500      	movne	r5, #0
 80058b6:	4293      	cmp	r3, r2
 80058b8:	bfc4      	itt	gt
 80058ba:	1a9b      	subgt	r3, r3, r2
 80058bc:	18ed      	addgt	r5, r5, r3
 80058be:	f04f 0900 	mov.w	r9, #0
 80058c2:	341a      	adds	r4, #26
 80058c4:	454d      	cmp	r5, r9
 80058c6:	d11a      	bne.n	80058fe <_printf_common+0xd6>
 80058c8:	2000      	movs	r0, #0
 80058ca:	e008      	b.n	80058de <_printf_common+0xb6>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4652      	mov	r2, sl
 80058d0:	4639      	mov	r1, r7
 80058d2:	4630      	mov	r0, r6
 80058d4:	47c0      	blx	r8
 80058d6:	3001      	adds	r0, #1
 80058d8:	d103      	bne.n	80058e2 <_printf_common+0xba>
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	3501      	adds	r5, #1
 80058e4:	e7c3      	b.n	800586e <_printf_common+0x46>
 80058e6:	18e1      	adds	r1, r4, r3
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	2030      	movs	r0, #48	; 0x30
 80058ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058f0:	4422      	add	r2, r4
 80058f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058fa:	3302      	adds	r3, #2
 80058fc:	e7c5      	b.n	800588a <_printf_common+0x62>
 80058fe:	2301      	movs	r3, #1
 8005900:	4622      	mov	r2, r4
 8005902:	4639      	mov	r1, r7
 8005904:	4630      	mov	r0, r6
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d0e6      	beq.n	80058da <_printf_common+0xb2>
 800590c:	f109 0901 	add.w	r9, r9, #1
 8005910:	e7d8      	b.n	80058c4 <_printf_common+0x9c>
	...

08005914 <_printf_i>:
 8005914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800591c:	460c      	mov	r4, r1
 800591e:	7e09      	ldrb	r1, [r1, #24]
 8005920:	b085      	sub	sp, #20
 8005922:	296e      	cmp	r1, #110	; 0x6e
 8005924:	4617      	mov	r7, r2
 8005926:	4606      	mov	r6, r0
 8005928:	4698      	mov	r8, r3
 800592a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800592c:	f000 80b3 	beq.w	8005a96 <_printf_i+0x182>
 8005930:	d822      	bhi.n	8005978 <_printf_i+0x64>
 8005932:	2963      	cmp	r1, #99	; 0x63
 8005934:	d036      	beq.n	80059a4 <_printf_i+0x90>
 8005936:	d80a      	bhi.n	800594e <_printf_i+0x3a>
 8005938:	2900      	cmp	r1, #0
 800593a:	f000 80b9 	beq.w	8005ab0 <_printf_i+0x19c>
 800593e:	2958      	cmp	r1, #88	; 0x58
 8005940:	f000 8083 	beq.w	8005a4a <_printf_i+0x136>
 8005944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800594c:	e032      	b.n	80059b4 <_printf_i+0xa0>
 800594e:	2964      	cmp	r1, #100	; 0x64
 8005950:	d001      	beq.n	8005956 <_printf_i+0x42>
 8005952:	2969      	cmp	r1, #105	; 0x69
 8005954:	d1f6      	bne.n	8005944 <_printf_i+0x30>
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	0605      	lsls	r5, r0, #24
 800595c:	f103 0104 	add.w	r1, r3, #4
 8005960:	d52a      	bpl.n	80059b8 <_printf_i+0xa4>
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6011      	str	r1, [r2, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da03      	bge.n	8005972 <_printf_i+0x5e>
 800596a:	222d      	movs	r2, #45	; 0x2d
 800596c:	425b      	negs	r3, r3
 800596e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005972:	486f      	ldr	r0, [pc, #444]	; (8005b30 <_printf_i+0x21c>)
 8005974:	220a      	movs	r2, #10
 8005976:	e039      	b.n	80059ec <_printf_i+0xd8>
 8005978:	2973      	cmp	r1, #115	; 0x73
 800597a:	f000 809d 	beq.w	8005ab8 <_printf_i+0x1a4>
 800597e:	d808      	bhi.n	8005992 <_printf_i+0x7e>
 8005980:	296f      	cmp	r1, #111	; 0x6f
 8005982:	d020      	beq.n	80059c6 <_printf_i+0xb2>
 8005984:	2970      	cmp	r1, #112	; 0x70
 8005986:	d1dd      	bne.n	8005944 <_printf_i+0x30>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	f043 0320 	orr.w	r3, r3, #32
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	e003      	b.n	800599a <_printf_i+0x86>
 8005992:	2975      	cmp	r1, #117	; 0x75
 8005994:	d017      	beq.n	80059c6 <_printf_i+0xb2>
 8005996:	2978      	cmp	r1, #120	; 0x78
 8005998:	d1d4      	bne.n	8005944 <_printf_i+0x30>
 800599a:	2378      	movs	r3, #120	; 0x78
 800599c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059a0:	4864      	ldr	r0, [pc, #400]	; (8005b34 <_printf_i+0x220>)
 80059a2:	e055      	b.n	8005a50 <_printf_i+0x13c>
 80059a4:	6813      	ldr	r3, [r2, #0]
 80059a6:	1d19      	adds	r1, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6011      	str	r1, [r2, #0]
 80059ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059b4:	2301      	movs	r3, #1
 80059b6:	e08c      	b.n	8005ad2 <_printf_i+0x1be>
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6011      	str	r1, [r2, #0]
 80059bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059c0:	bf18      	it	ne
 80059c2:	b21b      	sxthne	r3, r3
 80059c4:	e7cf      	b.n	8005966 <_printf_i+0x52>
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	6825      	ldr	r5, [r4, #0]
 80059ca:	1d18      	adds	r0, r3, #4
 80059cc:	6010      	str	r0, [r2, #0]
 80059ce:	0628      	lsls	r0, r5, #24
 80059d0:	d501      	bpl.n	80059d6 <_printf_i+0xc2>
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	e002      	b.n	80059dc <_printf_i+0xc8>
 80059d6:	0668      	lsls	r0, r5, #25
 80059d8:	d5fb      	bpl.n	80059d2 <_printf_i+0xbe>
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	4854      	ldr	r0, [pc, #336]	; (8005b30 <_printf_i+0x21c>)
 80059de:	296f      	cmp	r1, #111	; 0x6f
 80059e0:	bf14      	ite	ne
 80059e2:	220a      	movne	r2, #10
 80059e4:	2208      	moveq	r2, #8
 80059e6:	2100      	movs	r1, #0
 80059e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ec:	6865      	ldr	r5, [r4, #4]
 80059ee:	60a5      	str	r5, [r4, #8]
 80059f0:	2d00      	cmp	r5, #0
 80059f2:	f2c0 8095 	blt.w	8005b20 <_printf_i+0x20c>
 80059f6:	6821      	ldr	r1, [r4, #0]
 80059f8:	f021 0104 	bic.w	r1, r1, #4
 80059fc:	6021      	str	r1, [r4, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d13d      	bne.n	8005a7e <_printf_i+0x16a>
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	f040 808e 	bne.w	8005b24 <_printf_i+0x210>
 8005a08:	4665      	mov	r5, ip
 8005a0a:	2a08      	cmp	r2, #8
 8005a0c:	d10b      	bne.n	8005a26 <_printf_i+0x112>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	07db      	lsls	r3, r3, #31
 8005a12:	d508      	bpl.n	8005a26 <_printf_i+0x112>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	bfde      	ittt	le
 8005a1c:	2330      	movle	r3, #48	; 0x30
 8005a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a26:	ebac 0305 	sub.w	r3, ip, r5
 8005a2a:	6123      	str	r3, [r4, #16]
 8005a2c:	f8cd 8000 	str.w	r8, [sp]
 8005a30:	463b      	mov	r3, r7
 8005a32:	aa03      	add	r2, sp, #12
 8005a34:	4621      	mov	r1, r4
 8005a36:	4630      	mov	r0, r6
 8005a38:	f7ff fef6 	bl	8005828 <_printf_common>
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d14d      	bne.n	8005adc <_printf_i+0x1c8>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	b005      	add	sp, #20
 8005a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a4a:	4839      	ldr	r0, [pc, #228]	; (8005b30 <_printf_i+0x21c>)
 8005a4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a50:	6813      	ldr	r3, [r2, #0]
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	1d1d      	adds	r5, r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6015      	str	r5, [r2, #0]
 8005a5a:	060a      	lsls	r2, r1, #24
 8005a5c:	d50b      	bpl.n	8005a76 <_printf_i+0x162>
 8005a5e:	07ca      	lsls	r2, r1, #31
 8005a60:	bf44      	itt	mi
 8005a62:	f041 0120 	orrmi.w	r1, r1, #32
 8005a66:	6021      	strmi	r1, [r4, #0]
 8005a68:	b91b      	cbnz	r3, 8005a72 <_printf_i+0x15e>
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	f022 0220 	bic.w	r2, r2, #32
 8005a70:	6022      	str	r2, [r4, #0]
 8005a72:	2210      	movs	r2, #16
 8005a74:	e7b7      	b.n	80059e6 <_printf_i+0xd2>
 8005a76:	064d      	lsls	r5, r1, #25
 8005a78:	bf48      	it	mi
 8005a7a:	b29b      	uxthmi	r3, r3
 8005a7c:	e7ef      	b.n	8005a5e <_printf_i+0x14a>
 8005a7e:	4665      	mov	r5, ip
 8005a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a84:	fb02 3311 	mls	r3, r2, r1, r3
 8005a88:	5cc3      	ldrb	r3, [r0, r3]
 8005a8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a8e:	460b      	mov	r3, r1
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d1f5      	bne.n	8005a80 <_printf_i+0x16c>
 8005a94:	e7b9      	b.n	8005a0a <_printf_i+0xf6>
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	6825      	ldr	r5, [r4, #0]
 8005a9a:	6961      	ldr	r1, [r4, #20]
 8005a9c:	1d18      	adds	r0, r3, #4
 8005a9e:	6010      	str	r0, [r2, #0]
 8005aa0:	0628      	lsls	r0, r5, #24
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	d501      	bpl.n	8005aaa <_printf_i+0x196>
 8005aa6:	6019      	str	r1, [r3, #0]
 8005aa8:	e002      	b.n	8005ab0 <_printf_i+0x19c>
 8005aaa:	066a      	lsls	r2, r5, #25
 8005aac:	d5fb      	bpl.n	8005aa6 <_printf_i+0x192>
 8005aae:	8019      	strh	r1, [r3, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6123      	str	r3, [r4, #16]
 8005ab4:	4665      	mov	r5, ip
 8005ab6:	e7b9      	b.n	8005a2c <_printf_i+0x118>
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	681d      	ldr	r5, [r3, #0]
 8005ac0:	6862      	ldr	r2, [r4, #4]
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f7fa fb8b 	bl	80001e0 <memchr>
 8005aca:	b108      	cbz	r0, 8005ad0 <_printf_i+0x1bc>
 8005acc:	1b40      	subs	r0, r0, r5
 8005ace:	6060      	str	r0, [r4, #4]
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ada:	e7a7      	b.n	8005a2c <_printf_i+0x118>
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	462a      	mov	r2, r5
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	47c0      	blx	r8
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	d0aa      	beq.n	8005a40 <_printf_i+0x12c>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	079b      	lsls	r3, r3, #30
 8005aee:	d413      	bmi.n	8005b18 <_printf_i+0x204>
 8005af0:	68e0      	ldr	r0, [r4, #12]
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	4298      	cmp	r0, r3
 8005af6:	bfb8      	it	lt
 8005af8:	4618      	movlt	r0, r3
 8005afa:	e7a3      	b.n	8005a44 <_printf_i+0x130>
 8005afc:	2301      	movs	r3, #1
 8005afe:	464a      	mov	r2, r9
 8005b00:	4639      	mov	r1, r7
 8005b02:	4630      	mov	r0, r6
 8005b04:	47c0      	blx	r8
 8005b06:	3001      	adds	r0, #1
 8005b08:	d09a      	beq.n	8005a40 <_printf_i+0x12c>
 8005b0a:	3501      	adds	r5, #1
 8005b0c:	68e3      	ldr	r3, [r4, #12]
 8005b0e:	9a03      	ldr	r2, [sp, #12]
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	42ab      	cmp	r3, r5
 8005b14:	dcf2      	bgt.n	8005afc <_printf_i+0x1e8>
 8005b16:	e7eb      	b.n	8005af0 <_printf_i+0x1dc>
 8005b18:	2500      	movs	r5, #0
 8005b1a:	f104 0919 	add.w	r9, r4, #25
 8005b1e:	e7f5      	b.n	8005b0c <_printf_i+0x1f8>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ac      	bne.n	8005a7e <_printf_i+0x16a>
 8005b24:	7803      	ldrb	r3, [r0, #0]
 8005b26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b2e:	e76c      	b.n	8005a0a <_printf_i+0xf6>
 8005b30:	08005dc9 	.word	0x08005dc9
 8005b34:	08005dda 	.word	0x08005dda

08005b38 <memmove>:
 8005b38:	4288      	cmp	r0, r1
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	eb01 0302 	add.w	r3, r1, r2
 8005b40:	d807      	bhi.n	8005b52 <memmove+0x1a>
 8005b42:	1e42      	subs	r2, r0, #1
 8005b44:	4299      	cmp	r1, r3
 8005b46:	d00a      	beq.n	8005b5e <memmove+0x26>
 8005b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b50:	e7f8      	b.n	8005b44 <memmove+0xc>
 8005b52:	4283      	cmp	r3, r0
 8005b54:	d9f5      	bls.n	8005b42 <memmove+0xa>
 8005b56:	1881      	adds	r1, r0, r2
 8005b58:	1ad2      	subs	r2, r2, r3
 8005b5a:	42d3      	cmn	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <memmove+0x28>
 8005b5e:	bd10      	pop	{r4, pc}
 8005b60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b68:	e7f7      	b.n	8005b5a <memmove+0x22>
	...

08005b6c <_free_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d045      	beq.n	8005c00 <_free_r+0x94>
 8005b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b78:	1f0c      	subs	r4, r1, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfb8      	it	lt
 8005b7e:	18e4      	addlt	r4, r4, r3
 8005b80:	f000 f8d2 	bl	8005d28 <__malloc_lock>
 8005b84:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <_free_r+0x98>)
 8005b86:	6813      	ldr	r3, [r2, #0]
 8005b88:	4610      	mov	r0, r2
 8005b8a:	b933      	cbnz	r3, 8005b9a <_free_r+0x2e>
 8005b8c:	6063      	str	r3, [r4, #4]
 8005b8e:	6014      	str	r4, [r2, #0]
 8005b90:	4628      	mov	r0, r5
 8005b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b96:	f000 b8c8 	b.w	8005d2a <__malloc_unlock>
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	d90c      	bls.n	8005bb8 <_free_r+0x4c>
 8005b9e:	6821      	ldr	r1, [r4, #0]
 8005ba0:	1862      	adds	r2, r4, r1
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	bf04      	itt	eq
 8005ba6:	681a      	ldreq	r2, [r3, #0]
 8005ba8:	685b      	ldreq	r3, [r3, #4]
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	bf04      	itt	eq
 8005bae:	1852      	addeq	r2, r2, r1
 8005bb0:	6022      	streq	r2, [r4, #0]
 8005bb2:	6004      	str	r4, [r0, #0]
 8005bb4:	e7ec      	b.n	8005b90 <_free_r+0x24>
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	b10a      	cbz	r2, 8005bc0 <_free_r+0x54>
 8005bbc:	42a2      	cmp	r2, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x4a>
 8005bc0:	6819      	ldr	r1, [r3, #0]
 8005bc2:	1858      	adds	r0, r3, r1
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x74>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	4401      	add	r1, r0
 8005bcc:	1858      	adds	r0, r3, r1
 8005bce:	4282      	cmp	r2, r0
 8005bd0:	6019      	str	r1, [r3, #0]
 8005bd2:	d1dd      	bne.n	8005b90 <_free_r+0x24>
 8005bd4:	6810      	ldr	r0, [r2, #0]
 8005bd6:	6852      	ldr	r2, [r2, #4]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	4401      	add	r1, r0
 8005bdc:	6019      	str	r1, [r3, #0]
 8005bde:	e7d7      	b.n	8005b90 <_free_r+0x24>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x7c>
 8005be2:	230c      	movs	r3, #12
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	e7d3      	b.n	8005b90 <_free_r+0x24>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428a      	cmp	r2, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6811      	ldreq	r1, [r2, #0]
 8005bf2:	6852      	ldreq	r2, [r2, #4]
 8005bf4:	6062      	str	r2, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1809      	addeq	r1, r1, r0
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	605c      	str	r4, [r3, #4]
 8005bfe:	e7c7      	b.n	8005b90 <_free_r+0x24>
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	20012e04 	.word	0x20012e04

08005c08 <_malloc_r>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	1ccd      	adds	r5, r1, #3
 8005c0c:	f025 0503 	bic.w	r5, r5, #3
 8005c10:	3508      	adds	r5, #8
 8005c12:	2d0c      	cmp	r5, #12
 8005c14:	bf38      	it	cc
 8005c16:	250c      	movcc	r5, #12
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	db01      	blt.n	8005c22 <_malloc_r+0x1a>
 8005c1e:	42a9      	cmp	r1, r5
 8005c20:	d903      	bls.n	8005c2a <_malloc_r+0x22>
 8005c22:	230c      	movs	r3, #12
 8005c24:	6033      	str	r3, [r6, #0]
 8005c26:	2000      	movs	r0, #0
 8005c28:	bd70      	pop	{r4, r5, r6, pc}
 8005c2a:	f000 f87d 	bl	8005d28 <__malloc_lock>
 8005c2e:	4a21      	ldr	r2, [pc, #132]	; (8005cb4 <_malloc_r+0xac>)
 8005c30:	6814      	ldr	r4, [r2, #0]
 8005c32:	4621      	mov	r1, r4
 8005c34:	b991      	cbnz	r1, 8005c5c <_malloc_r+0x54>
 8005c36:	4c20      	ldr	r4, [pc, #128]	; (8005cb8 <_malloc_r+0xb0>)
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	b91b      	cbnz	r3, 8005c44 <_malloc_r+0x3c>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f863 	bl	8005d08 <_sbrk_r>
 8005c42:	6020      	str	r0, [r4, #0]
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f000 f85e 	bl	8005d08 <_sbrk_r>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d124      	bne.n	8005c9a <_malloc_r+0x92>
 8005c50:	230c      	movs	r3, #12
 8005c52:	6033      	str	r3, [r6, #0]
 8005c54:	4630      	mov	r0, r6
 8005c56:	f000 f868 	bl	8005d2a <__malloc_unlock>
 8005c5a:	e7e4      	b.n	8005c26 <_malloc_r+0x1e>
 8005c5c:	680b      	ldr	r3, [r1, #0]
 8005c5e:	1b5b      	subs	r3, r3, r5
 8005c60:	d418      	bmi.n	8005c94 <_malloc_r+0x8c>
 8005c62:	2b0b      	cmp	r3, #11
 8005c64:	d90f      	bls.n	8005c86 <_malloc_r+0x7e>
 8005c66:	600b      	str	r3, [r1, #0]
 8005c68:	50cd      	str	r5, [r1, r3]
 8005c6a:	18cc      	adds	r4, r1, r3
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 f85c 	bl	8005d2a <__malloc_unlock>
 8005c72:	f104 000b 	add.w	r0, r4, #11
 8005c76:	1d23      	adds	r3, r4, #4
 8005c78:	f020 0007 	bic.w	r0, r0, #7
 8005c7c:	1ac3      	subs	r3, r0, r3
 8005c7e:	d0d3      	beq.n	8005c28 <_malloc_r+0x20>
 8005c80:	425a      	negs	r2, r3
 8005c82:	50e2      	str	r2, [r4, r3]
 8005c84:	e7d0      	b.n	8005c28 <_malloc_r+0x20>
 8005c86:	428c      	cmp	r4, r1
 8005c88:	684b      	ldr	r3, [r1, #4]
 8005c8a:	bf16      	itet	ne
 8005c8c:	6063      	strne	r3, [r4, #4]
 8005c8e:	6013      	streq	r3, [r2, #0]
 8005c90:	460c      	movne	r4, r1
 8005c92:	e7eb      	b.n	8005c6c <_malloc_r+0x64>
 8005c94:	460c      	mov	r4, r1
 8005c96:	6849      	ldr	r1, [r1, #4]
 8005c98:	e7cc      	b.n	8005c34 <_malloc_r+0x2c>
 8005c9a:	1cc4      	adds	r4, r0, #3
 8005c9c:	f024 0403 	bic.w	r4, r4, #3
 8005ca0:	42a0      	cmp	r0, r4
 8005ca2:	d005      	beq.n	8005cb0 <_malloc_r+0xa8>
 8005ca4:	1a21      	subs	r1, r4, r0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f000 f82e 	bl	8005d08 <_sbrk_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0cf      	beq.n	8005c50 <_malloc_r+0x48>
 8005cb0:	6025      	str	r5, [r4, #0]
 8005cb2:	e7db      	b.n	8005c6c <_malloc_r+0x64>
 8005cb4:	20012e04 	.word	0x20012e04
 8005cb8:	20012e08 	.word	0x20012e08

08005cbc <_realloc_r>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	460e      	mov	r6, r1
 8005cc4:	b921      	cbnz	r1, 8005cd0 <_realloc_r+0x14>
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ccc:	f7ff bf9c 	b.w	8005c08 <_malloc_r>
 8005cd0:	b922      	cbnz	r2, 8005cdc <_realloc_r+0x20>
 8005cd2:	f7ff ff4b 	bl	8005b6c <_free_r>
 8005cd6:	4625      	mov	r5, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	f000 f826 	bl	8005d2c <_malloc_usable_size_r>
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	d20f      	bcs.n	8005d04 <_realloc_r+0x48>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4638      	mov	r0, r7
 8005ce8:	f7ff ff8e 	bl	8005c08 <_malloc_r>
 8005cec:	4605      	mov	r5, r0
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0f2      	beq.n	8005cd8 <_realloc_r+0x1c>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	f7ff fc11 	bl	800551c <memcpy>
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f7ff ff35 	bl	8005b6c <_free_r>
 8005d02:	e7e9      	b.n	8005cd8 <_realloc_r+0x1c>
 8005d04:	4635      	mov	r5, r6
 8005d06:	e7e7      	b.n	8005cd8 <_realloc_r+0x1c>

08005d08 <_sbrk_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4c06      	ldr	r4, [pc, #24]	; (8005d24 <_sbrk_r+0x1c>)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4605      	mov	r5, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	f000 f812 	bl	8005d3c <_sbrk>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_sbrk_r+0x1a>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_sbrk_r+0x1a>
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20012fc4 	.word	0x20012fc4

08005d28 <__malloc_lock>:
 8005d28:	4770      	bx	lr

08005d2a <__malloc_unlock>:
 8005d2a:	4770      	bx	lr

08005d2c <_malloc_usable_size_r>:
 8005d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d30:	1f18      	subs	r0, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bfbc      	itt	lt
 8005d36:	580b      	ldrlt	r3, [r1, r0]
 8005d38:	18c0      	addlt	r0, r0, r3
 8005d3a:	4770      	bx	lr

08005d3c <_sbrk>:
 8005d3c:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <_sbrk+0x14>)
 8005d3e:	6819      	ldr	r1, [r3, #0]
 8005d40:	4602      	mov	r2, r0
 8005d42:	b909      	cbnz	r1, 8005d48 <_sbrk+0xc>
 8005d44:	4903      	ldr	r1, [pc, #12]	; (8005d54 <_sbrk+0x18>)
 8005d46:	6019      	str	r1, [r3, #0]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	4402      	add	r2, r0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	4770      	bx	lr
 8005d50:	20012e0c 	.word	0x20012e0c
 8005d54:	20012fc8 	.word	0x20012fc8

08005d58 <_init>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr

08005d64 <_fini>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr
