
F4_QueueUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006444  08006444  00016444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064cc  080064cc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064d4  080064d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064d4  080064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d8  080064d8  000164d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080064dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f5c  20000078  08006554  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fd4  08006554  00022fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f89  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002be9  00000000  00000000  00033031  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00036d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018327  00000000  00000000  00037d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f941  00000000  00000000  0005002f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009635c  00000000  00000000  0005f970  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000cb  00000000  00000000  000f5ccc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  000f5d98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800642c 	.word	0x0800642c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800642c 	.word	0x0800642c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f8d8 	bl	800075e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 fc50 	bl	8002e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f002 fb64 	bl	8002c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20012e50 	.word	0x20012e50

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20012e50 	.word	0x20012e50

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4907      	ldr	r1, [pc, #28]	; (80006a0 <__NVIC_EnableIRQ+0x38>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	; (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	; (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b089      	sub	sp, #36	; 0x24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	f1c3 0307 	rsb	r3, r3, #7
 8000712:	2b04      	cmp	r3, #4
 8000714:	bf28      	it	cs
 8000716:	2304      	movcs	r3, #4
 8000718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3304      	adds	r3, #4
 800071e:	2b06      	cmp	r3, #6
 8000720:	d902      	bls.n	8000728 <NVIC_EncodePriority+0x30>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3b03      	subs	r3, #3
 8000726:	e000      	b.n	800072a <NVIC_EncodePriority+0x32>
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	f04f 32ff 	mov.w	r2, #4294967295
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	401a      	ands	r2, r3
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000740:	f04f 31ff 	mov.w	r1, #4294967295
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43d9      	mvns	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	4313      	orrs	r3, r2
         );
}
 8000752:	4618      	mov	r0, r3
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff4c 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000786:	f7ff ff61 	bl	800064c <__NVIC_GetPriorityGrouping>
 800078a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	68b9      	ldr	r1, [r7, #8]
 8000790:	6978      	ldr	r0, [r7, #20]
 8000792:	f7ff ffb1 	bl	80006f8 <NVIC_EncodePriority>
 8000796:	4602      	mov	r2, r0
 8000798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff80 	bl	80006a4 <__NVIC_SetPriority>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff54 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d004      	beq.n	80007e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00c      	b.n	8000800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2205      	movs	r2, #5
 80007ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f022 0201 	bic.w	r2, r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	e159      	b.n	8000adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	429a      	cmp	r2, r3
 8000842:	f040 8148 	bne.w	8000ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00b      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d007      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	2b11      	cmp	r3, #17
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0xfc>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b12      	cmp	r3, #18
 8000906:	d123      	bne.n	8000950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	691a      	ldr	r2, [r3, #16]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	69b9      	ldr	r1, [r7, #24]
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0203 	and.w	r2, r3, #3
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a2 	beq.w	8000ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ae:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <HAL_GPIO_Init+0x2e8>)
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3302      	adds	r3, #2
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	220f      	movs	r2, #15
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4013      	ands	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a48      	ldr	r2, [pc, #288]	; (8000af8 <HAL_GPIO_Init+0x2ec>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d019      	beq.n	8000a0e <HAL_GPIO_Init+0x202>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a47      	ldr	r2, [pc, #284]	; (8000afc <HAL_GPIO_Init+0x2f0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x1fe>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <HAL_GPIO_Init+0x2f4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x1fa>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a45      	ldr	r2, [pc, #276]	; (8000b04 <HAL_GPIO_Init+0x2f8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x1f6>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <HAL_GPIO_Init+0x2fc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x1f2>
 80009fa:	2304      	movs	r3, #4
 80009fc:	e008      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 80009fe:	2307      	movs	r3, #7
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e004      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e002      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a20:	4934      	ldr	r1, [pc, #208]	; (8000af4 <HAL_GPIO_Init+0x2e8>)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	f67f aea2 	bls.w	8000828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3724      	adds	r7, #36	; 0x24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b20:	787b      	ldrb	r3, [r7, #1]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b2c:	e003      	b.n	8000b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	041a      	lsls	r2, r3, #16
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	619a      	str	r2, [r3, #24]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	401a      	ands	r2, r3
 8000b56:	887b      	ldrh	r3, [r7, #2]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d104      	bne.n	8000b66 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	041a      	lsls	r2, r3, #16
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b64:	e002      	b.n	8000b6c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	619a      	str	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e25b      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d075      	beq.n	8000c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b96:	4ba3      	ldr	r3, [pc, #652]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 030c 	and.w	r3, r3, #12
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d00c      	beq.n	8000bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ba2:	4ba0      	ldr	r3, [pc, #640]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d112      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bae:	4b9d      	ldr	r3, [pc, #628]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bba:	d10b      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	4b99      	ldr	r3, [pc, #612]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d05b      	beq.n	8000c80 <HAL_RCC_OscConfig+0x108>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d157      	bne.n	8000c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e236      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bdc:	d106      	bne.n	8000bec <HAL_RCC_OscConfig+0x74>
 8000bde:	4b91      	ldr	r3, [pc, #580]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a90      	ldr	r2, [pc, #576]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e01d      	b.n	8000c28 <HAL_RCC_OscConfig+0xb0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0x98>
 8000bf6:	4b8b      	ldr	r3, [pc, #556]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a8a      	ldr	r2, [pc, #552]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b88      	ldr	r3, [pc, #544]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a87      	ldr	r2, [pc, #540]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_RCC_OscConfig+0xb0>
 8000c10:	4b84      	ldr	r3, [pc, #528]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a83      	ldr	r2, [pc, #524]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b81      	ldr	r3, [pc, #516]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a80      	ldr	r2, [pc, #512]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcdc 	bl	80005ec <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcd8 	bl	80005ec <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e1fb      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	4b76      	ldr	r3, [pc, #472]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0xc0>
 8000c56:	e014      	b.n	8000c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fcc8 	bl	80005ec <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fcc4 	bl	80005ec <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1e7      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0xe8>
 8000c7e:	e000      	b.n	8000c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d063      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c8e:	4b65      	ldr	r3, [pc, #404]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9a:	4b62      	ldr	r3, [pc, #392]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d11c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d116      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_RCC_OscConfig+0x152>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e1bb      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4952      	ldr	r1, [pc, #328]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	e03a      	b.n	8000d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d020      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b4f      	ldr	r3, [pc, #316]	; (8000e28 <HAL_RCC_OscConfig+0x2b0>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cee:	f7ff fc7d 	bl	80005ec <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf6:	f7ff fc79 	bl	80005ec <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e19c      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4940      	ldr	r1, [pc, #256]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <HAL_RCC_OscConfig+0x2b0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc5c 	bl	80005ec <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc58 	bl	80005ec <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e17b      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d030      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d016      	beq.n	8000d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <HAL_RCC_OscConfig+0x2b4>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc3c 	bl	80005ec <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc38 	bl	80005ec <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e15b      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0x200>
 8000d96:	e015      	b.n	8000dc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_RCC_OscConfig+0x2b4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc25 	bl	80005ec <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da6:	f7ff fc21 	bl	80005ec <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e144      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f0      	bne.n	8000da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f000 80a0 	beq.w	8000f12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_RCC_OscConfig+0x2ac>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_RCC_OscConfig+0x2b8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d121      	bne.n	8000e52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_RCC_OscConfig+0x2b8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_RCC_OscConfig+0x2b8>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fbe7 	bl	80005ec <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	e011      	b.n	8000e46 <HAL_RCC_OscConfig+0x2ce>
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	42470000 	.word	0x42470000
 8000e2c:	42470e80 	.word	0x42470e80
 8000e30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e34:	f7ff fbda 	bl	80005ec <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e0fd      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e46:	4b81      	ldr	r3, [pc, #516]	; (800104c <HAL_RCC_OscConfig+0x4d4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d106      	bne.n	8000e68 <HAL_RCC_OscConfig+0x2f0>
 8000e5a:	4b7d      	ldr	r3, [pc, #500]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5e:	4a7c      	ldr	r2, [pc, #496]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6713      	str	r3, [r2, #112]	; 0x70
 8000e66:	e01c      	b.n	8000ea2 <HAL_RCC_OscConfig+0x32a>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d10c      	bne.n	8000e8a <HAL_RCC_OscConfig+0x312>
 8000e70:	4b77      	ldr	r3, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a76      	ldr	r2, [pc, #472]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7c:	4b74      	ldr	r3, [pc, #464]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e80:	4a73      	ldr	r2, [pc, #460]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6713      	str	r3, [r2, #112]	; 0x70
 8000e88:	e00b      	b.n	8000ea2 <HAL_RCC_OscConfig+0x32a>
 8000e8a:	4b71      	ldr	r3, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8e:	4a70      	ldr	r2, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	6713      	str	r3, [r2, #112]	; 0x70
 8000e96:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9a:	4a6d      	ldr	r2, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000e9c:	f023 0304 	bic.w	r3, r3, #4
 8000ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d015      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fb9f 	bl	80005ec <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb0:	e00a      	b.n	8000ec8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fb9b 	bl	80005ec <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e0bc      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	4b61      	ldr	r3, [pc, #388]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0ee      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x33a>
 8000ed4:	e014      	b.n	8000f00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fb89 	bl	80005ec <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff fb85 	bl	80005ec <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e0a6      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef4:	4b56      	ldr	r3, [pc, #344]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ee      	bne.n	8000ede <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d105      	bne.n	8000f12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f06:	4b52      	ldr	r3, [pc, #328]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a51      	ldr	r2, [pc, #324]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8092 	beq.w	8001040 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f1c:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d05c      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d141      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f30:	4b48      	ldr	r3, [pc, #288]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fb59 	bl	80005ec <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3e:	f7ff fb55 	bl	80005ec <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e078      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	019b      	lsls	r3, r3, #6
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	3b01      	subs	r3, #1
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	061b      	lsls	r3, r3, #24
 8000f80:	4933      	ldr	r1, [pc, #204]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb2e 	bl	80005ec <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f94:	f7ff fb2a 	bl	80005ec <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e04d      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0x41c>
 8000fb2:	e045      	b.n	8001040 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_RCC_OscConfig+0x4dc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb17 	bl	80005ec <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb13 	bl	80005ec <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e036      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x44a>
 8000fe0:	e02e      	b.n	8001040 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e029      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_RCC_OscConfig+0x4d8>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d11c      	bne.n	800103c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100c:	429a      	cmp	r2, r3
 800100e:	d115      	bne.n	800103c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001016:	4013      	ands	r3, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800101c:	4293      	cmp	r3, r2
 800101e:	d10d      	bne.n	800103c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800102a:	429a      	cmp	r2, r3
 800102c:	d106      	bne.n	800103c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001038:	429a      	cmp	r2, r3
 800103a:	d001      	beq.n	8001040 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40007000 	.word	0x40007000
 8001050:	40023800 	.word	0x40023800
 8001054:	42470060 	.word	0x42470060

08001058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0cc      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d90c      	bls.n	8001094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e0b8      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d020      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ac:	4b59      	ldr	r3, [pc, #356]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d0:	4b50      	ldr	r3, [pc, #320]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	494d      	ldr	r1, [pc, #308]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d044      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d107      	bne.n	8001106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d119      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e07f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d003      	beq.n	8001116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001112:	2b03      	cmp	r3, #3
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b3f      	ldr	r3, [pc, #252]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e06f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e067      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b37      	ldr	r3, [pc, #220]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4934      	ldr	r1, [pc, #208]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fa50 	bl	80005ec <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fa4c 	bl	80005ec <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e04f      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d20c      	bcs.n	80011a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	429a      	cmp	r2, r3
 800119a:	d001      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e032      	b.n	8001206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	4916      	ldr	r1, [pc, #88]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011de:	f000 f821 	bl	8001224 <HAL_RCC_GetSysClockFreq>
 80011e2:	4601      	mov	r1, r0
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	fa21 f303 	lsr.w	r3, r1, r3
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fe28 	bl	8002e54 <HAL_InitTick>

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00
 8001214:	40023800 	.word	0x40023800
 8001218:	08006480 	.word	0x08006480
 800121c:	20000008 	.word	0x20000008
 8001220:	20000000 	.word	0x20000000

08001224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800123a:	4b50      	ldr	r3, [pc, #320]	; (800137c <HAL_RCC_GetSysClockFreq+0x158>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d007      	beq.n	8001256 <HAL_RCC_GetSysClockFreq+0x32>
 8001246:	2b08      	cmp	r3, #8
 8001248:	d008      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x38>
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 808d 	bne.w	800136a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001252:	60bb      	str	r3, [r7, #8]
       break;
 8001254:	e08c      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001256:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <HAL_RCC_GetSysClockFreq+0x160>)
 8001258:	60bb      	str	r3, [r7, #8]
      break;
 800125a:	e089      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125c:	4b47      	ldr	r3, [pc, #284]	; (800137c <HAL_RCC_GetSysClockFreq+0x158>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <HAL_RCC_GetSysClockFreq+0x158>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d023      	beq.n	80012ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001272:	4b42      	ldr	r3, [pc, #264]	; (800137c <HAL_RCC_GetSysClockFreq+0x158>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	099b      	lsrs	r3, r3, #6
 8001278:	f04f 0400 	mov.w	r4, #0
 800127c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	ea03 0501 	and.w	r5, r3, r1
 8001288:	ea04 0602 	and.w	r6, r4, r2
 800128c:	4a3d      	ldr	r2, [pc, #244]	; (8001384 <HAL_RCC_GetSysClockFreq+0x160>)
 800128e:	fb02 f106 	mul.w	r1, r2, r6
 8001292:	2200      	movs	r2, #0
 8001294:	fb02 f205 	mul.w	r2, r2, r5
 8001298:	440a      	add	r2, r1
 800129a:	493a      	ldr	r1, [pc, #232]	; (8001384 <HAL_RCC_GetSysClockFreq+0x160>)
 800129c:	fba5 0101 	umull	r0, r1, r5, r1
 80012a0:	1853      	adds	r3, r2, r1
 80012a2:	4619      	mov	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0400 	mov.w	r4, #0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4623      	mov	r3, r4
 80012ae:	f7fe ffe7 	bl	8000280 <__aeabi_uldivmod>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e049      	b.n	800134e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_GetSysClockFreq+0x158>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	f04f 0400 	mov.w	r4, #0
 80012c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	ea03 0501 	and.w	r5, r3, r1
 80012d0:	ea04 0602 	and.w	r6, r4, r2
 80012d4:	4629      	mov	r1, r5
 80012d6:	4632      	mov	r2, r6
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	f04f 0400 	mov.w	r4, #0
 80012e0:	0154      	lsls	r4, r2, #5
 80012e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012e6:	014b      	lsls	r3, r1, #5
 80012e8:	4619      	mov	r1, r3
 80012ea:	4622      	mov	r2, r4
 80012ec:	1b49      	subs	r1, r1, r5
 80012ee:	eb62 0206 	sbc.w	r2, r2, r6
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	f04f 0400 	mov.w	r4, #0
 80012fa:	0194      	lsls	r4, r2, #6
 80012fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001300:	018b      	lsls	r3, r1, #6
 8001302:	1a5b      	subs	r3, r3, r1
 8001304:	eb64 0402 	sbc.w	r4, r4, r2
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	00e2      	lsls	r2, r4, #3
 8001312:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001316:	00d9      	lsls	r1, r3, #3
 8001318:	460b      	mov	r3, r1
 800131a:	4614      	mov	r4, r2
 800131c:	195b      	adds	r3, r3, r5
 800131e:	eb44 0406 	adc.w	r4, r4, r6
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	02a2      	lsls	r2, r4, #10
 800132c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001330:	0299      	lsls	r1, r3, #10
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	4618      	mov	r0, r3
 8001338:	4621      	mov	r1, r4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f04f 0400 	mov.w	r4, #0
 8001340:	461a      	mov	r2, r3
 8001342:	4623      	mov	r3, r4
 8001344:	f7fe ff9c 	bl	8000280 <__aeabi_uldivmod>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_GetSysClockFreq+0x158>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	3301      	adds	r3, #1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	60bb      	str	r3, [r7, #8]
      break;
 8001368:	e002      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetSysClockFreq+0x15c>)
 800136c:	60bb      	str	r3, [r7, #8]
      break;
 800136e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001370:	68bb      	ldr	r3, [r7, #8]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	00f42400 	.word	0x00f42400
 8001384:	017d7840 	.word	0x017d7840

08001388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_RCC_GetHCLKFreq+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008

080013a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013a4:	f7ff fff0 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013a8:	4601      	mov	r1, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	0a9b      	lsrs	r3, r3, #10
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	08006490 	.word	0x08006490

080013c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013cc:	f7ff ffdc 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80013d0:	4601      	mov	r1, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0b5b      	lsrs	r3, r3, #13
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08006490 	.word	0x08006490

080013f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	220f      	movs	r2, #15
 80013fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <HAL_RCC_GetClockConfig+0x60>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 020f 	and.w	r2, r3, #15
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01d      	b.n	80014a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f815 	bl	80014aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3304      	adds	r3, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f000 f968 	bl	8001768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b06      	cmp	r3, #6
 80014e6:	d007      	beq.n	80014f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b02      	cmp	r3, #2
 800151a:	d122      	bne.n	8001562 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d11b      	bne.n	8001562 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0202 	mvn.w	r2, #2
 8001532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f8ee 	bl	800172a <HAL_TIM_IC_CaptureCallback>
 800154e:	e005      	b.n	800155c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8e0 	bl	8001716 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f8f1 	bl	800173e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b04      	cmp	r3, #4
 800156e:	d122      	bne.n	80015b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b04      	cmp	r3, #4
 800157c:	d11b      	bne.n	80015b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f06f 0204 	mvn.w	r2, #4
 8001586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f8c4 	bl	800172a <HAL_TIM_IC_CaptureCallback>
 80015a2:	e005      	b.n	80015b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8b6 	bl	8001716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f8c7 	bl	800173e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d122      	bne.n	800160a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d11b      	bne.n	800160a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f06f 0208 	mvn.w	r2, #8
 80015da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2204      	movs	r2, #4
 80015e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f89a 	bl	800172a <HAL_TIM_IC_CaptureCallback>
 80015f6:	e005      	b.n	8001604 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f88c 	bl	8001716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f89d 	bl	800173e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b10      	cmp	r3, #16
 8001616:	d122      	bne.n	800165e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b10      	cmp	r3, #16
 8001624:	d11b      	bne.n	800165e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f06f 0210 	mvn.w	r2, #16
 800162e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2208      	movs	r2, #8
 8001634:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f870 	bl	800172a <HAL_TIM_IC_CaptureCallback>
 800164a:	e005      	b.n	8001658 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f862 	bl	8001716 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f873 	bl	800173e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10e      	bne.n	800168a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0201 	mvn.w	r2, #1
 8001682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f001 fae1 	bl	8002c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001694:	2b80      	cmp	r3, #128	; 0x80
 8001696:	d10e      	bne.n	80016b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	2b80      	cmp	r3, #128	; 0x80
 80016a4:	d107      	bne.n	80016b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f8e3 	bl	800187c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c0:	2b40      	cmp	r3, #64	; 0x40
 80016c2:	d10e      	bne.n	80016e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	d107      	bne.n	80016e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f838 	bl	8001752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d10e      	bne.n	800170e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d107      	bne.n	800170e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f06f 0220 	mvn.w	r2, #32
 8001706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f8ad 	bl	8001868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a34      	ldr	r2, [pc, #208]	; (800184c <TIM_Base_SetConfig+0xe4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00f      	beq.n	80017a0 <TIM_Base_SetConfig+0x38>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d00b      	beq.n	80017a0 <TIM_Base_SetConfig+0x38>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a31      	ldr	r2, [pc, #196]	; (8001850 <TIM_Base_SetConfig+0xe8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d007      	beq.n	80017a0 <TIM_Base_SetConfig+0x38>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a30      	ldr	r2, [pc, #192]	; (8001854 <TIM_Base_SetConfig+0xec>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d003      	beq.n	80017a0 <TIM_Base_SetConfig+0x38>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <TIM_Base_SetConfig+0xf0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d108      	bne.n	80017b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a25      	ldr	r2, [pc, #148]	; (800184c <TIM_Base_SetConfig+0xe4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01b      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d017      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a22      	ldr	r2, [pc, #136]	; (8001850 <TIM_Base_SetConfig+0xe8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <TIM_Base_SetConfig+0xec>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00f      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <TIM_Base_SetConfig+0xf0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00b      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <TIM_Base_SetConfig+0xf4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <TIM_Base_SetConfig+0xf8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d003      	beq.n	80017f2 <TIM_Base_SetConfig+0x8a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <TIM_Base_SetConfig+0xfc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d108      	bne.n	8001804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <TIM_Base_SetConfig+0xe4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d103      	bne.n	8001838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	615a      	str	r2, [r3, #20]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40010000 	.word	0x40010000
 8001850:	40000400 	.word	0x40000400
 8001854:	40000800 	.word	0x40000800
 8001858:	40000c00 	.word	0x40000c00
 800185c:	40014000 	.word	0x40014000
 8001860:	40014400 	.word	0x40014400
 8001864:	40014800 	.word	0x40014800

08001868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e03f      	b.n	8001922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 fa0a 	bl	8002cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fb97 	bl	8002008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b088      	sub	sp, #32
 800192e:	af02      	add	r7, sp, #8
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	f040 8083 	bne.w	8001a52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <HAL_UART_Transmit+0x2e>
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e07b      	b.n	8001a54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_UART_Transmit+0x40>
 8001966:	2302      	movs	r3, #2
 8001968:	e074      	b.n	8001a54 <HAL_UART_Transmit+0x12a>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2221      	movs	r2, #33	; 0x21
 800197c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001980:	f7fe fe34 	bl	80005ec <HAL_GetTick>
 8001984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800199a:	e042      	b.n	8001a22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b2:	d122      	bne.n	80019fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f9b6 	bl	8001d30 <UART_WaitOnFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e042      	b.n	8001a54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3302      	adds	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	e017      	b.n	8001a22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	e013      	b.n	8001a22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2200      	movs	r2, #0
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f993 	bl	8001d30 <UART_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e01f      	b.n	8001a54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1b7      	bne.n	800199c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2200      	movs	r2, #0
 8001a34:	2140      	movs	r1, #64	; 0x40
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f97a 	bl	8001d30 <UART_WaitOnFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e006      	b.n	8001a54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
  }
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	d140      	bne.n	8001af8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_UART_Receive_IT+0x26>
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e039      	b.n	8001afa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_UART_Receive_IT+0x38>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e032      	b.n	8001afa <HAL_UART_Receive_IT+0x9e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2222      	movs	r2, #34	; 0x22
 8001ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10d      	bne.n	8001b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	f003 0320 	and.w	r3, r3, #32
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_UART_IRQHandler+0x52>
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f9d6 	bl	8001f04 <UART_Receive_IT>
      return;
 8001b58:	e0d1      	b.n	8001cfe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80b0 	beq.w	8001cc2 <HAL_UART_IRQHandler+0x1ba>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_UART_IRQHandler+0x70>
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80a5 	beq.w	8001cc2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_UART_IRQHandler+0x90>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00a      	beq.n	8001bb8 <HAL_UART_IRQHandler+0xb0>
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	f043 0202 	orr.w	r2, r3, #2
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_UART_IRQHandler+0xd0>
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd0:	f043 0204 	orr.w	r2, r3, #4
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00f      	beq.n	8001c02 <HAL_UART_IRQHandler+0xfa>
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_UART_IRQHandler+0xee>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	f043 0208 	orr.w	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d078      	beq.n	8001cfc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_UART_IRQHandler+0x11c>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f970 	bl	8001f04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_UART_IRQHandler+0x144>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d031      	beq.n	8001cb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8b9 	bl	8001dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d123      	bne.n	8001ca8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7c:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <HAL_UART_IRQHandler+0x1fc>)
 8001c7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fd9f 	bl	80007c8 <HAL_DMA_Abort_IT>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d016      	beq.n	8001cbe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c9e:	e00e      	b.n	8001cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f83b 	bl	8001d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ca6:	e00a      	b.n	8001cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f837 	bl	8001d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cae:	e006      	b.n	8001cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f833 	bl	8001d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001cbc:	e01e      	b.n	8001cfc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cbe:	bf00      	nop
    return;
 8001cc0:	e01c      	b.n	8001cfc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_UART_IRQHandler+0x1d6>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f8a6 	bl	8001e28 <UART_Transmit_IT>
    return;
 8001cdc:	e00f      	b.n	8001cfe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <HAL_UART_IRQHandler+0x1f6>
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8ee 	bl	8001ed4 <UART_EndTransmit_IT>
    return;
 8001cf8:	bf00      	nop
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_IRQHandler+0x1f6>
    return;
 8001cfc:	bf00      	nop
  }
}
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	08001e01 	.word	0x08001e01

08001d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d40:	e02c      	b.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d028      	beq.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d50:	f7fe fc4c 	bl	80005ec <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d21d      	bcs.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e00f      	b.n	8001dbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4013      	ands	r3, r2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d0c3      	beq.n	8001d42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001dda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff ff7e 	bl	8001d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b21      	cmp	r3, #33	; 0x21
 8001e3a:	d144      	bne.n	8001ec6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e44:	d11a      	bne.n	8001e7c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e5a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	1c9a      	adds	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	621a      	str	r2, [r3, #32]
 8001e6e:	e00e      	b.n	8001e8e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	621a      	str	r2, [r3, #32]
 8001e7a:	e008      	b.n	8001e8e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6211      	str	r1, [r2, #32]
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10f      	bne.n	8001ec2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ec6:	2302      	movs	r3, #2
  }
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff07 	bl	8001d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b22      	cmp	r3, #34	; 0x22
 8001f16:	d171      	bne.n	8001ffc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f20:	d123      	bne.n	8001f6a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10e      	bne.n	8001f4e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	1c9a      	adds	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4c:	e029      	b.n	8001fa2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
 8001f68:	e01b      	b.n	8001fa2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10a      	bne.n	8001f88 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6858      	ldr	r0, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	1c59      	adds	r1, r3, #1
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6291      	str	r1, [r2, #40]	; 0x28
 8001f82:	b2c2      	uxtb	r2, r0
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e00c      	b.n	8001fa2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	1c58      	adds	r0, r3, #1
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6288      	str	r0, [r1, #40]	; 0x28
 8001f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d120      	bne.n	8001ff8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0220 	bic.w	r2, r2, #32
 8001fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fdaa 	bl	8002b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e002      	b.n	8001ffe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800204a:	f023 030c 	bic.w	r3, r3, #12
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	430b      	orrs	r3, r1
 8002056:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002076:	f040 818b 	bne.w	8002390 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4ac1      	ldr	r2, [pc, #772]	; (8002384 <UART_SetConfig+0x37c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d005      	beq.n	8002090 <UART_SetConfig+0x88>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4abf      	ldr	r2, [pc, #764]	; (8002388 <UART_SetConfig+0x380>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f040 80bd 	bne.w	800220a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002090:	f7ff f99a 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 8002094:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	461d      	mov	r5, r3
 800209a:	f04f 0600 	mov.w	r6, #0
 800209e:	46a8      	mov	r8, r5
 80020a0:	46b1      	mov	r9, r6
 80020a2:	eb18 0308 	adds.w	r3, r8, r8
 80020a6:	eb49 0409 	adc.w	r4, r9, r9
 80020aa:	4698      	mov	r8, r3
 80020ac:	46a1      	mov	r9, r4
 80020ae:	eb18 0805 	adds.w	r8, r8, r5
 80020b2:	eb49 0906 	adc.w	r9, r9, r6
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020ca:	4688      	mov	r8, r1
 80020cc:	4691      	mov	r9, r2
 80020ce:	eb18 0005 	adds.w	r0, r8, r5
 80020d2:	eb49 0106 	adc.w	r1, r9, r6
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	461d      	mov	r5, r3
 80020dc:	f04f 0600 	mov.w	r6, #0
 80020e0:	196b      	adds	r3, r5, r5
 80020e2:	eb46 0406 	adc.w	r4, r6, r6
 80020e6:	461a      	mov	r2, r3
 80020e8:	4623      	mov	r3, r4
 80020ea:	f7fe f8c9 	bl	8000280 <__aeabi_uldivmod>
 80020ee:	4603      	mov	r3, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	461a      	mov	r2, r3
 80020f4:	4ba5      	ldr	r3, [pc, #660]	; (800238c <UART_SetConfig+0x384>)
 80020f6:	fba3 2302 	umull	r2, r3, r3, r2
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	461d      	mov	r5, r3
 8002104:	f04f 0600 	mov.w	r6, #0
 8002108:	46a9      	mov	r9, r5
 800210a:	46b2      	mov	sl, r6
 800210c:	eb19 0309 	adds.w	r3, r9, r9
 8002110:	eb4a 040a 	adc.w	r4, sl, sl
 8002114:	4699      	mov	r9, r3
 8002116:	46a2      	mov	sl, r4
 8002118:	eb19 0905 	adds.w	r9, r9, r5
 800211c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800212c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002134:	4689      	mov	r9, r1
 8002136:	4692      	mov	sl, r2
 8002138:	eb19 0005 	adds.w	r0, r9, r5
 800213c:	eb4a 0106 	adc.w	r1, sl, r6
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	461d      	mov	r5, r3
 8002146:	f04f 0600 	mov.w	r6, #0
 800214a:	196b      	adds	r3, r5, r5
 800214c:	eb46 0406 	adc.w	r4, r6, r6
 8002150:	461a      	mov	r2, r3
 8002152:	4623      	mov	r3, r4
 8002154:	f7fe f894 	bl	8000280 <__aeabi_uldivmod>
 8002158:	4603      	mov	r3, r0
 800215a:	460c      	mov	r4, r1
 800215c:	461a      	mov	r2, r3
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <UART_SetConfig+0x384>)
 8002160:	fba3 1302 	umull	r1, r3, r3, r2
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	2164      	movs	r1, #100	; 0x64
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	3332      	adds	r3, #50	; 0x32
 8002172:	4a86      	ldr	r2, [pc, #536]	; (800238c <UART_SetConfig+0x384>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002180:	4498      	add	r8, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	461d      	mov	r5, r3
 8002186:	f04f 0600 	mov.w	r6, #0
 800218a:	46a9      	mov	r9, r5
 800218c:	46b2      	mov	sl, r6
 800218e:	eb19 0309 	adds.w	r3, r9, r9
 8002192:	eb4a 040a 	adc.w	r4, sl, sl
 8002196:	4699      	mov	r9, r3
 8002198:	46a2      	mov	sl, r4
 800219a:	eb19 0905 	adds.w	r9, r9, r5
 800219e:	eb4a 0a06 	adc.w	sl, sl, r6
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021b6:	4689      	mov	r9, r1
 80021b8:	4692      	mov	sl, r2
 80021ba:	eb19 0005 	adds.w	r0, r9, r5
 80021be:	eb4a 0106 	adc.w	r1, sl, r6
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	461d      	mov	r5, r3
 80021c8:	f04f 0600 	mov.w	r6, #0
 80021cc:	196b      	adds	r3, r5, r5
 80021ce:	eb46 0406 	adc.w	r4, r6, r6
 80021d2:	461a      	mov	r2, r3
 80021d4:	4623      	mov	r3, r4
 80021d6:	f7fe f853 	bl	8000280 <__aeabi_uldivmod>
 80021da:	4603      	mov	r3, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	461a      	mov	r2, r3
 80021e0:	4b6a      	ldr	r3, [pc, #424]	; (800238c <UART_SetConfig+0x384>)
 80021e2:	fba3 1302 	umull	r1, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2164      	movs	r1, #100	; 0x64
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	3332      	adds	r3, #50	; 0x32
 80021f4:	4a65      	ldr	r2, [pc, #404]	; (800238c <UART_SetConfig+0x384>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	f003 0207 	and.w	r2, r3, #7
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4442      	add	r2, r8
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	e26f      	b.n	80026ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800220a:	f7ff f8c9 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 800220e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	461d      	mov	r5, r3
 8002214:	f04f 0600 	mov.w	r6, #0
 8002218:	46a8      	mov	r8, r5
 800221a:	46b1      	mov	r9, r6
 800221c:	eb18 0308 	adds.w	r3, r8, r8
 8002220:	eb49 0409 	adc.w	r4, r9, r9
 8002224:	4698      	mov	r8, r3
 8002226:	46a1      	mov	r9, r4
 8002228:	eb18 0805 	adds.w	r8, r8, r5
 800222c:	eb49 0906 	adc.w	r9, r9, r6
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800223c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002240:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002244:	4688      	mov	r8, r1
 8002246:	4691      	mov	r9, r2
 8002248:	eb18 0005 	adds.w	r0, r8, r5
 800224c:	eb49 0106 	adc.w	r1, r9, r6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	461d      	mov	r5, r3
 8002256:	f04f 0600 	mov.w	r6, #0
 800225a:	196b      	adds	r3, r5, r5
 800225c:	eb46 0406 	adc.w	r4, r6, r6
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	f7fe f80c 	bl	8000280 <__aeabi_uldivmod>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	461a      	mov	r2, r3
 800226e:	4b47      	ldr	r3, [pc, #284]	; (800238c <UART_SetConfig+0x384>)
 8002270:	fba3 2302 	umull	r2, r3, r3, r2
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	461d      	mov	r5, r3
 800227e:	f04f 0600 	mov.w	r6, #0
 8002282:	46a9      	mov	r9, r5
 8002284:	46b2      	mov	sl, r6
 8002286:	eb19 0309 	adds.w	r3, r9, r9
 800228a:	eb4a 040a 	adc.w	r4, sl, sl
 800228e:	4699      	mov	r9, r3
 8002290:	46a2      	mov	sl, r4
 8002292:	eb19 0905 	adds.w	r9, r9, r5
 8002296:	eb4a 0a06 	adc.w	sl, sl, r6
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022ae:	4689      	mov	r9, r1
 80022b0:	4692      	mov	sl, r2
 80022b2:	eb19 0005 	adds.w	r0, r9, r5
 80022b6:	eb4a 0106 	adc.w	r1, sl, r6
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	461d      	mov	r5, r3
 80022c0:	f04f 0600 	mov.w	r6, #0
 80022c4:	196b      	adds	r3, r5, r5
 80022c6:	eb46 0406 	adc.w	r4, r6, r6
 80022ca:	461a      	mov	r2, r3
 80022cc:	4623      	mov	r3, r4
 80022ce:	f7fd ffd7 	bl	8000280 <__aeabi_uldivmod>
 80022d2:	4603      	mov	r3, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	461a      	mov	r2, r3
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <UART_SetConfig+0x384>)
 80022da:	fba3 1302 	umull	r1, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2164      	movs	r1, #100	; 0x64
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	3332      	adds	r3, #50	; 0x32
 80022ec:	4a27      	ldr	r2, [pc, #156]	; (800238c <UART_SetConfig+0x384>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022fa:	4498      	add	r8, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	461d      	mov	r5, r3
 8002300:	f04f 0600 	mov.w	r6, #0
 8002304:	46a9      	mov	r9, r5
 8002306:	46b2      	mov	sl, r6
 8002308:	eb19 0309 	adds.w	r3, r9, r9
 800230c:	eb4a 040a 	adc.w	r4, sl, sl
 8002310:	4699      	mov	r9, r3
 8002312:	46a2      	mov	sl, r4
 8002314:	eb19 0905 	adds.w	r9, r9, r5
 8002318:	eb4a 0a06 	adc.w	sl, sl, r6
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800232c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002330:	4689      	mov	r9, r1
 8002332:	4692      	mov	sl, r2
 8002334:	eb19 0005 	adds.w	r0, r9, r5
 8002338:	eb4a 0106 	adc.w	r1, sl, r6
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	461d      	mov	r5, r3
 8002342:	f04f 0600 	mov.w	r6, #0
 8002346:	196b      	adds	r3, r5, r5
 8002348:	eb46 0406 	adc.w	r4, r6, r6
 800234c:	461a      	mov	r2, r3
 800234e:	4623      	mov	r3, r4
 8002350:	f7fd ff96 	bl	8000280 <__aeabi_uldivmod>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	461a      	mov	r2, r3
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <UART_SetConfig+0x384>)
 800235c:	fba3 1302 	umull	r1, r3, r3, r2
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	2164      	movs	r1, #100	; 0x64
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	3332      	adds	r3, #50	; 0x32
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <UART_SetConfig+0x384>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	f003 0207 	and.w	r2, r3, #7
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4442      	add	r2, r8
 8002380:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002382:	e1b2      	b.n	80026ea <UART_SetConfig+0x6e2>
 8002384:	40011000 	.word	0x40011000
 8002388:	40011400 	.word	0x40011400
 800238c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4ad7      	ldr	r2, [pc, #860]	; (80026f4 <UART_SetConfig+0x6ec>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d005      	beq.n	80023a6 <UART_SetConfig+0x39e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4ad6      	ldr	r2, [pc, #856]	; (80026f8 <UART_SetConfig+0x6f0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	f040 80d1 	bne.w	8002548 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80023a6:	f7ff f80f 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 80023aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	469a      	mov	sl, r3
 80023b0:	f04f 0b00 	mov.w	fp, #0
 80023b4:	46d0      	mov	r8, sl
 80023b6:	46d9      	mov	r9, fp
 80023b8:	eb18 0308 	adds.w	r3, r8, r8
 80023bc:	eb49 0409 	adc.w	r4, r9, r9
 80023c0:	4698      	mov	r8, r3
 80023c2:	46a1      	mov	r9, r4
 80023c4:	eb18 080a 	adds.w	r8, r8, sl
 80023c8:	eb49 090b 	adc.w	r9, r9, fp
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023e0:	4688      	mov	r8, r1
 80023e2:	4691      	mov	r9, r2
 80023e4:	eb1a 0508 	adds.w	r5, sl, r8
 80023e8:	eb4b 0609 	adc.w	r6, fp, r9
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	f04f 0400 	mov.w	r4, #0
 80023fe:	0094      	lsls	r4, r2, #2
 8002400:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002404:	008b      	lsls	r3, r1, #2
 8002406:	461a      	mov	r2, r3
 8002408:	4623      	mov	r3, r4
 800240a:	4628      	mov	r0, r5
 800240c:	4631      	mov	r1, r6
 800240e:	f7fd ff37 	bl	8000280 <__aeabi_uldivmod>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	461a      	mov	r2, r3
 8002418:	4bb8      	ldr	r3, [pc, #736]	; (80026fc <UART_SetConfig+0x6f4>)
 800241a:	fba3 2302 	umull	r2, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	469b      	mov	fp, r3
 8002428:	f04f 0c00 	mov.w	ip, #0
 800242c:	46d9      	mov	r9, fp
 800242e:	46e2      	mov	sl, ip
 8002430:	eb19 0309 	adds.w	r3, r9, r9
 8002434:	eb4a 040a 	adc.w	r4, sl, sl
 8002438:	4699      	mov	r9, r3
 800243a:	46a2      	mov	sl, r4
 800243c:	eb19 090b 	adds.w	r9, r9, fp
 8002440:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002458:	4689      	mov	r9, r1
 800245a:	4692      	mov	sl, r2
 800245c:	eb1b 0509 	adds.w	r5, fp, r9
 8002460:	eb4c 060a 	adc.w	r6, ip, sl
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	f04f 0400 	mov.w	r4, #0
 8002476:	0094      	lsls	r4, r2, #2
 8002478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800247c:	008b      	lsls	r3, r1, #2
 800247e:	461a      	mov	r2, r3
 8002480:	4623      	mov	r3, r4
 8002482:	4628      	mov	r0, r5
 8002484:	4631      	mov	r1, r6
 8002486:	f7fd fefb 	bl	8000280 <__aeabi_uldivmod>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	461a      	mov	r2, r3
 8002490:	4b9a      	ldr	r3, [pc, #616]	; (80026fc <UART_SetConfig+0x6f4>)
 8002492:	fba3 1302 	umull	r1, r3, r3, r2
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2164      	movs	r1, #100	; 0x64
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	3332      	adds	r3, #50	; 0x32
 80024a4:	4a95      	ldr	r2, [pc, #596]	; (80026fc <UART_SetConfig+0x6f4>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b0:	4498      	add	r8, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	469b      	mov	fp, r3
 80024b6:	f04f 0c00 	mov.w	ip, #0
 80024ba:	46d9      	mov	r9, fp
 80024bc:	46e2      	mov	sl, ip
 80024be:	eb19 0309 	adds.w	r3, r9, r9
 80024c2:	eb4a 040a 	adc.w	r4, sl, sl
 80024c6:	4699      	mov	r9, r3
 80024c8:	46a2      	mov	sl, r4
 80024ca:	eb19 090b 	adds.w	r9, r9, fp
 80024ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024e6:	4689      	mov	r9, r1
 80024e8:	4692      	mov	sl, r2
 80024ea:	eb1b 0509 	adds.w	r5, fp, r9
 80024ee:	eb4c 060a 	adc.w	r6, ip, sl
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4619      	mov	r1, r3
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f04f 0400 	mov.w	r4, #0
 8002504:	0094      	lsls	r4, r2, #2
 8002506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800250a:	008b      	lsls	r3, r1, #2
 800250c:	461a      	mov	r2, r3
 800250e:	4623      	mov	r3, r4
 8002510:	4628      	mov	r0, r5
 8002512:	4631      	mov	r1, r6
 8002514:	f7fd feb4 	bl	8000280 <__aeabi_uldivmod>
 8002518:	4603      	mov	r3, r0
 800251a:	460c      	mov	r4, r1
 800251c:	461a      	mov	r2, r3
 800251e:	4b77      	ldr	r3, [pc, #476]	; (80026fc <UART_SetConfig+0x6f4>)
 8002520:	fba3 1302 	umull	r1, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	2164      	movs	r1, #100	; 0x64
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	3332      	adds	r3, #50	; 0x32
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <UART_SetConfig+0x6f4>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4442      	add	r2, r8
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	e0d0      	b.n	80026ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002548:	f7fe ff2a 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 800254c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	469a      	mov	sl, r3
 8002552:	f04f 0b00 	mov.w	fp, #0
 8002556:	46d0      	mov	r8, sl
 8002558:	46d9      	mov	r9, fp
 800255a:	eb18 0308 	adds.w	r3, r8, r8
 800255e:	eb49 0409 	adc.w	r4, r9, r9
 8002562:	4698      	mov	r8, r3
 8002564:	46a1      	mov	r9, r4
 8002566:	eb18 080a 	adds.w	r8, r8, sl
 800256a:	eb49 090b 	adc.w	r9, r9, fp
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800257a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800257e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002582:	4688      	mov	r8, r1
 8002584:	4691      	mov	r9, r2
 8002586:	eb1a 0508 	adds.w	r5, sl, r8
 800258a:	eb4b 0609 	adc.w	r6, fp, r9
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4619      	mov	r1, r3
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	0094      	lsls	r4, r2, #2
 80025a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a6:	008b      	lsls	r3, r1, #2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	4628      	mov	r0, r5
 80025ae:	4631      	mov	r1, r6
 80025b0:	f7fd fe66 	bl	8000280 <__aeabi_uldivmod>
 80025b4:	4603      	mov	r3, r0
 80025b6:	460c      	mov	r4, r1
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <UART_SetConfig+0x6f4>)
 80025bc:	fba3 2302 	umull	r2, r3, r3, r2
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	469b      	mov	fp, r3
 80025ca:	f04f 0c00 	mov.w	ip, #0
 80025ce:	46d9      	mov	r9, fp
 80025d0:	46e2      	mov	sl, ip
 80025d2:	eb19 0309 	adds.w	r3, r9, r9
 80025d6:	eb4a 040a 	adc.w	r4, sl, sl
 80025da:	4699      	mov	r9, r3
 80025dc:	46a2      	mov	sl, r4
 80025de:	eb19 090b 	adds.w	r9, r9, fp
 80025e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025fa:	4689      	mov	r9, r1
 80025fc:	4692      	mov	sl, r2
 80025fe:	eb1b 0509 	adds.w	r5, fp, r9
 8002602:	eb4c 060a 	adc.w	r6, ip, sl
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4619      	mov	r1, r3
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	0094      	lsls	r4, r2, #2
 800261a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800261e:	008b      	lsls	r3, r1, #2
 8002620:	461a      	mov	r2, r3
 8002622:	4623      	mov	r3, r4
 8002624:	4628      	mov	r0, r5
 8002626:	4631      	mov	r1, r6
 8002628:	f7fd fe2a 	bl	8000280 <__aeabi_uldivmod>
 800262c:	4603      	mov	r3, r0
 800262e:	460c      	mov	r4, r1
 8002630:	461a      	mov	r2, r3
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <UART_SetConfig+0x6f4>)
 8002634:	fba3 1302 	umull	r1, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	2164      	movs	r1, #100	; 0x64
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <UART_SetConfig+0x6f4>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002652:	4498      	add	r8, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	469b      	mov	fp, r3
 8002658:	f04f 0c00 	mov.w	ip, #0
 800265c:	46d9      	mov	r9, fp
 800265e:	46e2      	mov	sl, ip
 8002660:	eb19 0309 	adds.w	r3, r9, r9
 8002664:	eb4a 040a 	adc.w	r4, sl, sl
 8002668:	4699      	mov	r9, r3
 800266a:	46a2      	mov	sl, r4
 800266c:	eb19 090b 	adds.w	r9, r9, fp
 8002670:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002680:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002688:	4689      	mov	r9, r1
 800268a:	4692      	mov	sl, r2
 800268c:	eb1b 0509 	adds.w	r5, fp, r9
 8002690:	eb4c 060a 	adc.w	r6, ip, sl
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4619      	mov	r1, r3
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	f04f 0400 	mov.w	r4, #0
 80026a6:	0094      	lsls	r4, r2, #2
 80026a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026ac:	008b      	lsls	r3, r1, #2
 80026ae:	461a      	mov	r2, r3
 80026b0:	4623      	mov	r3, r4
 80026b2:	4628      	mov	r0, r5
 80026b4:	4631      	mov	r1, r6
 80026b6:	f7fd fde3 	bl	8000280 <__aeabi_uldivmod>
 80026ba:	4603      	mov	r3, r0
 80026bc:	460c      	mov	r4, r1
 80026be:	461a      	mov	r2, r3
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <UART_SetConfig+0x6f4>)
 80026c2:	fba3 1302 	umull	r1, r3, r3, r2
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2164      	movs	r1, #100	; 0x64
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	3332      	adds	r3, #50	; 0x32
 80026d4:	4a09      	ldr	r2, [pc, #36]	; (80026fc <UART_SetConfig+0x6f4>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4442      	add	r2, r8
 80026e6:	609a      	str	r2, [r3, #8]
}
 80026e8:	e7ff      	b.n	80026ea <UART_SetConfig+0x6e2>
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026f4:	40011000 	.word	0x40011000
 80026f8:	40011400 	.word	0x40011400
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <print_task>:
 */

#include "main.h"
extern UART_HandleTypeDef huart2;
void print_task(void *param)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b094      	sub	sp, #80	; 0x50
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	UBaseType_t free_spaces;
	uint8_t arr[10];
	uint8_t msg[50];
	while (1)
	{
		if (xQueueReceive(queue_print, &msg, portMAX_DELAY) == pdPASS)
 8002708:	4b20      	ldr	r3, [pc, #128]	; (800278c <print_task+0x8c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f107 010c 	add.w	r1, r7, #12
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	4618      	mov	r0, r3
 8002716:	f000 ffb3 	bl	8003680 <xQueueReceive>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d1f3      	bne.n	8002708 <print_task+0x8>
		{
			free_spaces = uxQueueSpacesAvailable(queue_print);
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <print_task+0x8c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f001 f997 	bl	8003a58 <uxQueueSpacesAvailable>
 800272a:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (free_spaces == 0)
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <print_task+0x40>
				xSemaphoreGive(xSemaphore);
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <print_task+0x90>)
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	f000 fdf8 	bl	8003330 <xQueueGenericSend>
			sprintf((char *)arr, "Left: %u\n", (unsigned int)free_spaces);
 8002740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002746:	4913      	ldr	r1, [pc, #76]	; (8002794 <print_task+0x94>)
 8002748:	4618      	mov	r0, r3
 800274a:	f003 fa65 	bl	8005c18 <siprintf>
			HAL_UART_Transmit(&huart2, arr, 10, 1000);
 800274e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	220a      	movs	r2, #10
 8002758:	480f      	ldr	r0, [pc, #60]	; (8002798 <print_task+0x98>)
 800275a:	f7ff f8e6 	bl	800192a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, msg, 50, HAL_MAX_DELAY);
 800275e:	f107 010c 	add.w	r1, r7, #12
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	2232      	movs	r2, #50	; 0x32
 8002768:	480b      	ldr	r0, [pc, #44]	; (8002798 <print_task+0x98>)
 800276a:	f7ff f8de 	bl	800192a <HAL_UART_Transmit>
			memset(msg, 0, sizeof(msg));
 800276e:	f107 030c 	add.w	r3, r7, #12
 8002772:	2232      	movs	r2, #50	; 0x32
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fa45 	bl	8005c06 <memset>
			memset(arr, 0, sizeof(arr));
 800277c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002780:	220a      	movs	r2, #10
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fa3e 	bl	8005c06 <memset>
		if (xQueueReceive(queue_print, &msg, portMAX_DELAY) == pdPASS)
 800278a:	e7bd      	b.n	8002708 <print_task+0x8>
 800278c:	20012f8c 	.word	0x20012f8c
 8002790:	20012e88 	.word	0x20012e88
 8002794:	08006444 	.word	0x08006444
 8002798:	20012f18 	.word	0x20012f18

0800279c <led_task>:
		}
	}
}
void led_task(void *param)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(xSemaphore, portMAX_DELAY);
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <led_task+0x44>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 f847 	bl	8003840 <xQueueSemaphoreTake>
	uint32_t count = HAL_GetTick();
 80027b2:	f7fd ff1b 	bl	80005ec <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]
	while (1)
	{
		while (HAL_GetTick() - count < 10000)
 80027b8:	e007      	b.n	80027ca <led_task+0x2e>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80027ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027be:	4809      	ldr	r0, [pc, #36]	; (80027e4 <led_task+0x48>)
 80027c0:	f7fe f9bf 	bl	8000b42 <HAL_GPIO_TogglePin>
			vTaskDelay(100);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f001 fc37 	bl	8004038 <vTaskDelay>
		while (HAL_GetTick() - count < 10000)
 80027ca:	f7fd ff0f 	bl	80005ec <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80027d8:	4293      	cmp	r3, r2
 80027da:	d9ee      	bls.n	80027ba <led_task+0x1e>
 80027dc:	e7f5      	b.n	80027ca <led_task+0x2e>
 80027de:	bf00      	nop
 80027e0:	20012e88 	.word	0x20012e88
 80027e4:	40020c00 	.word	0x40020c00

080027e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ee:	f7fd fec7 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027f2:	f000 f87b 	bl	80028ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f6:	f000 f955 	bl	8002aa4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027fa:	f000 f8d5 	bl	80029a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80027fe:	f000 f8fd 	bl	80029fc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002802:	f000 f925 	bl	8002a50 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(print_task, "print_task", 400, NULL, 2, &handle_print_task);
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <main+0xd4>)
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002814:	492a      	ldr	r1, [pc, #168]	; (80028c0 <main+0xd8>)
 8002816:	482b      	ldr	r0, [pc, #172]	; (80028c4 <main+0xdc>)
 8002818:	f001 fac8 	bl	8003dac <xTaskCreate>
 800281c:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d009      	beq.n	8002838 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	e7fe      	b.n	8002836 <main+0x4e>

  status = xTaskCreate(led_task, "led-task", 200, NULL, 2, &handle_led_task);
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <main+0xe0>)
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	22c8      	movs	r2, #200	; 0xc8
 8002844:	4921      	ldr	r1, [pc, #132]	; (80028cc <main+0xe4>)
 8002846:	4822      	ldr	r0, [pc, #136]	; (80028d0 <main+0xe8>)
 8002848:	f001 fab0 	bl	8003dac <xTaskCreate>
 800284c:	60f8      	str	r0, [r7, #12]
  queue_print = xQueueCreate(20, sizeof(data1));
 800284e:	2200      	movs	r2, #0
 8002850:	2132      	movs	r1, #50	; 0x32
 8002852:	2014      	movs	r0, #20
 8002854:	f000 fcea 	bl	800322c <xQueueGenericCreate>
 8002858:	4602      	mov	r2, r0
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <main+0xec>)
 800285c:	601a      	str	r2, [r3, #0]
  configASSERT(queue_print != NULL);
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <main+0xec>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <main+0x92>
 8002866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	e7fe      	b.n	8002878 <main+0x90>

  vSemaphoreCreateBinary(xSemaphore);
 800287a:	2203      	movs	r2, #3
 800287c:	2100      	movs	r1, #0
 800287e:	2001      	movs	r0, #1
 8002880:	f000 fcd4 	bl	800322c <xQueueGenericCreate>
 8002884:	4602      	mov	r2, r0
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <main+0xf0>)
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <main+0xf0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <main+0xb8>
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <main+0xf0>)
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	2300      	movs	r3, #0
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	f000 fd48 	bl	8003330 <xQueueGenericSend>

  // run scheduler

  // memset(data6,0,sizeof(data6));
  HAL_UART_Receive_IT(&huart1, &data_byte1, 1);
 80028a0:	2201      	movs	r2, #1
 80028a2:	490e      	ldr	r1, [pc, #56]	; (80028dc <main+0xf4>)
 80028a4:	480e      	ldr	r0, [pc, #56]	; (80028e0 <main+0xf8>)
 80028a6:	f7ff f8d9 	bl	8001a5c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
 80028aa:	2201      	movs	r2, #1
 80028ac:	490d      	ldr	r1, [pc, #52]	; (80028e4 <main+0xfc>)
 80028ae:	480e      	ldr	r0, [pc, #56]	; (80028e8 <main+0x100>)
 80028b0:	f7ff f8d4 	bl	8001a5c <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80028b4:	f001 fbf4 	bl	80040a0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <main+0xd0>
 80028ba:	bf00      	nop
 80028bc:	20012ed0 	.word	0x20012ed0
 80028c0:	08006450 	.word	0x08006450
 80028c4:	08002701 	.word	0x08002701
 80028c8:	20012ed4 	.word	0x20012ed4
 80028cc:	0800645c 	.word	0x0800645c
 80028d0:	0800279d 	.word	0x0800279d
 80028d4:	20012f8c 	.word	0x20012f8c
 80028d8:	20012e88 	.word	0x20012e88
 80028dc:	20012e8d 	.word	0x20012e8d
 80028e0:	20012e90 	.word	0x20012e90
 80028e4:	20012e8c 	.word	0x20012e8c
 80028e8:	20012ed8 	.word	0x20012ed8

080028ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b094      	sub	sp, #80	; 0x50
 80028f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	2230      	movs	r2, #48	; 0x30
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 f983 	bl	8005c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <SystemClock_Config+0xb4>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <SystemClock_Config+0xb4>)
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <SystemClock_Config+0xb4>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <SystemClock_Config+0xb8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <SystemClock_Config+0xb8>)
 8002936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <SystemClock_Config+0xb8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002948:	2302      	movs	r3, #2
 800294a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002950:	2310      	movs	r3, #16
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002954:	2300      	movs	r3, #0
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002958:	f107 0320 	add.w	r3, r7, #32
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f90b 	bl	8000b78 <HAL_RCC_OscConfig>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002968:	f000 f982 	bl	8002c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800296c:	230f      	movs	r3, #15
 800296e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fb66 	bl	8001058 <HAL_RCC_ClockConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002992:	f000 f96d 	bl	8002c70 <Error_Handler>
  }
}
 8002996:	bf00      	nop
 8002998:	3750      	adds	r7, #80	; 0x50
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000

080029a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <MX_USART1_UART_Init+0x50>)
 80029b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029ce:	220c      	movs	r2, #12
 80029d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_USART1_UART_Init+0x4c>)
 80029e0:	f7fe ff56 	bl	8001890 <HAL_UART_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029ea:	f000 f941 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20012e90 	.word	0x20012e90
 80029f8:	40011000 	.word	0x40011000

080029fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <MX_USART2_UART_Init+0x50>)
 8002a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a20:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a22:	220c      	movs	r2, #12
 8002a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_USART2_UART_Init+0x4c>)
 8002a34:	f7fe ff2c 	bl	8001890 <HAL_UART_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a3e:	f000 f917 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20012f18 	.word	0x20012f18
 8002a4c:	40004400 	.word	0x40004400

08002a50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <MX_USART6_UART_Init+0x50>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_USART6_UART_Init+0x4c>)
 8002a88:	f7fe ff02 	bl	8001890 <HAL_UART_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a92:	f000 f8ed 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20012ed8 	.word	0x20012ed8
 8002aa0:	40011400 	.word	0x40011400

08002aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_GPIO_Init+0x9c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b14:	480b      	ldr	r0, [pc, #44]	; (8002b44 <MX_GPIO_Init+0xa0>)
 8002b16:	f7fd fffb 	bl	8000b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b24:	2301      	movs	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4619      	mov	r1, r3
 8002b32:	4804      	ldr	r0, [pc, #16]	; (8002b44 <MX_GPIO_Init+0xa0>)
 8002b34:	f7fd fe6a 	bl	800080c <HAL_GPIO_Init>

}
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020c00 	.word	0x40020c00

08002b48 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  if (huart->Instance == USART1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a32      	ldr	r2, [pc, #200]	; (8002c20 <HAL_UART_RxCpltCallback+0xd8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12c      	bne.n	8002bb4 <HAL_UART_RxCpltCallback+0x6c>
  {
    if (count_size1 < 100)
 8002b5a:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_UART_RxCpltCallback+0xdc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b63      	cmp	r3, #99	; 0x63
 8002b60:	d822      	bhi.n	8002ba8 <HAL_UART_RxCpltCallback+0x60>
    {
      data1[count_size1] = data_byte1;
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <HAL_UART_RxCpltCallback+0xdc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a30      	ldr	r2, [pc, #192]	; (8002c28 <HAL_UART_RxCpltCallback+0xe0>)
 8002b68:	7811      	ldrb	r1, [r2, #0]
 8002b6a:	4a30      	ldr	r2, [pc, #192]	; (8002c2c <HAL_UART_RxCpltCallback+0xe4>)
 8002b6c:	54d1      	strb	r1, [r2, r3]
      count_size1++;
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_UART_RxCpltCallback+0xdc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <HAL_UART_RxCpltCallback+0xdc>)
 8002b76:	6013      	str	r3, [r2, #0]

      if (data_byte1 == '\n')
 8002b78:	4b2b      	ldr	r3, [pc, #172]	; (8002c28 <HAL_UART_RxCpltCallback+0xe0>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b0a      	cmp	r3, #10
 8002b7e:	d113      	bne.n	8002ba8 <HAL_UART_RxCpltCallback+0x60>
      {
        data1[count_size1] = '\0';
 8002b80:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_UART_RxCpltCallback+0xdc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a29      	ldr	r2, [pc, #164]	; (8002c2c <HAL_UART_RxCpltCallback+0xe4>)
 8002b86:	2100      	movs	r1, #0
 8002b88:	54d1      	strb	r1, [r2, r3]
        xQueueSendFromISR(queue_print, data1, NULL);
 8002b8a:	4b29      	ldr	r3, [pc, #164]	; (8002c30 <HAL_UART_RxCpltCallback+0xe8>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2200      	movs	r2, #0
 8002b92:	4926      	ldr	r1, [pc, #152]	; (8002c2c <HAL_UART_RxCpltCallback+0xe4>)
 8002b94:	f000 fcca 	bl	800352c <xQueueGenericSendFromISR>
        count_size1 = 0;
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_UART_RxCpltCallback+0xdc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
        memset(data1, 0, sizeof(data1));
 8002b9e:	2232      	movs	r2, #50	; 0x32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4822      	ldr	r0, [pc, #136]	; (8002c2c <HAL_UART_RxCpltCallback+0xe4>)
 8002ba4:	f003 f82f 	bl	8005c06 <memset>
      }
    }

    HAL_UART_Receive_IT(&huart1, &data_byte1, 1);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	491f      	ldr	r1, [pc, #124]	; (8002c28 <HAL_UART_RxCpltCallback+0xe0>)
 8002bac:	4821      	ldr	r0, [pc, #132]	; (8002c34 <HAL_UART_RxCpltCallback+0xec>)
 8002bae:	f7fe ff55 	bl	8001a5c <HAL_UART_Receive_IT>
      }
    }

    HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
  }
}
 8002bb2:	e030      	b.n	8002c16 <HAL_UART_RxCpltCallback+0xce>
  else if (huart->Instance == USART6)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <HAL_UART_RxCpltCallback+0xf0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12b      	bne.n	8002c16 <HAL_UART_RxCpltCallback+0xce>
    if (count_size6 < 100)
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <HAL_UART_RxCpltCallback+0xf4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b63      	cmp	r3, #99	; 0x63
 8002bc4:	d822      	bhi.n	8002c0c <HAL_UART_RxCpltCallback+0xc4>
      data6[count_size6] = data_byte6;
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_UART_RxCpltCallback+0xf4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_UART_RxCpltCallback+0xf8>)
 8002bcc:	7811      	ldrb	r1, [r2, #0]
 8002bce:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_UART_RxCpltCallback+0xfc>)
 8002bd0:	54d1      	strb	r1, [r2, r3]
      count_size6++;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_UART_RxCpltCallback+0xf4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_UART_RxCpltCallback+0xf4>)
 8002bda:	6013      	str	r3, [r2, #0]
      if (data_byte6 == '\n')
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <HAL_UART_RxCpltCallback+0xf8>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b0a      	cmp	r3, #10
 8002be2:	d113      	bne.n	8002c0c <HAL_UART_RxCpltCallback+0xc4>
        data6[count_size6] = '\0';
 8002be4:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_UART_RxCpltCallback+0xf4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a16      	ldr	r2, [pc, #88]	; (8002c44 <HAL_UART_RxCpltCallback+0xfc>)
 8002bea:	2100      	movs	r1, #0
 8002bec:	54d1      	strb	r1, [r2, r3]
        xQueueSendFromISR(queue_print, data6, NULL);
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <HAL_UART_RxCpltCallback+0xe8>)
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4913      	ldr	r1, [pc, #76]	; (8002c44 <HAL_UART_RxCpltCallback+0xfc>)
 8002bf8:	f000 fc98 	bl	800352c <xQueueGenericSendFromISR>
        count_size6 = 0;
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_UART_RxCpltCallback+0xf4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
        memset(data6, 0, sizeof(data6));
 8002c02:	2232      	movs	r2, #50	; 0x32
 8002c04:	2100      	movs	r1, #0
 8002c06:	480f      	ldr	r0, [pc, #60]	; (8002c44 <HAL_UART_RxCpltCallback+0xfc>)
 8002c08:	f002 fffd 	bl	8005c06 <memset>
    HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	490c      	ldr	r1, [pc, #48]	; (8002c40 <HAL_UART_RxCpltCallback+0xf8>)
 8002c10:	480d      	ldr	r0, [pc, #52]	; (8002c48 <HAL_UART_RxCpltCallback+0x100>)
 8002c12:	f7fe ff23 	bl	8001a5c <HAL_UART_Receive_IT>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	20000098 	.word	0x20000098
 8002c28:	20012e8d 	.word	0x20012e8d
 8002c2c:	20012e54 	.word	0x20012e54
 8002c30:	20012f8c 	.word	0x20012f8c
 8002c34:	20012e90 	.word	0x20012e90
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	20000094 	.word	0x20000094
 8002c40:	20012e8c 	.word	0x20012e8c
 8002c44:	20012f58 	.word	0x20012f58
 8002c48:	20012ed8 	.word	0x20012ed8

08002c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c5e:	f7fd fcb1 	bl	80005c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40000c00 	.word	0x40000c00

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_MspInit+0x4c>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_MspInit+0x4c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_MspInit+0x4c>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_MspInit+0x4c>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800

08002cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08e      	sub	sp, #56	; 0x38
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a53      	ldr	r2, [pc, #332]	; (8002e3c <HAL_UART_MspInit+0x16c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d135      	bne.n	8002d5e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	4b52      	ldr	r3, [pc, #328]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002cfc:	f043 0310 	orr.w	r3, r3, #16
 8002d00:	6453      	str	r3, [r2, #68]	; 0x44
 8002d02:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a4a      	ldr	r2, [pc, #296]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d34:	2301      	movs	r3, #1
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	483f      	ldr	r0, [pc, #252]	; (8002e44 <HAL_UART_MspInit+0x174>)
 8002d48:	f7fd fd60 	bl	800080c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2106      	movs	r1, #6
 8002d50:	2025      	movs	r0, #37	; 0x25
 8002d52:	f7fd fd0f 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d56:	2025      	movs	r0, #37	; 0x25
 8002d58:	f7fd fd28 	bl	80007ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d5c:	e06a      	b.n	8002e34 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <HAL_UART_MspInit+0x178>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d12c      	bne.n	8002dc2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d76:	6413      	str	r3, [r2, #64]	; 0x40
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002da0:	230c      	movs	r3, #12
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002db0:	2307      	movs	r3, #7
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	4822      	ldr	r0, [pc, #136]	; (8002e44 <HAL_UART_MspInit+0x174>)
 8002dbc:	f7fd fd26 	bl	800080c <HAL_GPIO_Init>
}
 8002dc0:	e038      	b.n	8002e34 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <HAL_UART_MspInit+0x17c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d133      	bne.n	8002e34 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	6453      	str	r3, [r2, #68]	; 0x44
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_UART_MspInit+0x170>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e04:	23c0      	movs	r3, #192	; 0xc0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e14:	2308      	movs	r3, #8
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480c      	ldr	r0, [pc, #48]	; (8002e50 <HAL_UART_MspInit+0x180>)
 8002e20:	f7fd fcf4 	bl	800080c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 7, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2107      	movs	r1, #7
 8002e28:	2047      	movs	r0, #71	; 0x47
 8002e2a:	f7fd fca3 	bl	8000774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e2e:	2047      	movs	r0, #71	; 0x47
 8002e30:	f7fd fcbc 	bl	80007ac <HAL_NVIC_EnableIRQ>
}
 8002e34:	bf00      	nop
 8002e36:	3738      	adds	r7, #56	; 0x38
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40011000 	.word	0x40011000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40004400 	.word	0x40004400
 8002e4c:	40011400 	.word	0x40011400
 8002e50:	40020800 	.word	0x40020800

08002e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002e64:	2200      	movs	r2, #0
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	2032      	movs	r0, #50	; 0x32
 8002e6a:	f7fd fc83 	bl	8000774 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002e6e:	2032      	movs	r0, #50	; 0x32
 8002e70:	f7fd fc9c 	bl	80007ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_InitTick+0xa0>)
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_InitTick+0xa0>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6413      	str	r3, [r2, #64]	; 0x40
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_InitTick+0xa0>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e90:	f107 0210 	add.w	r2, r7, #16
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe faa8 	bl	80013f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7fe fa7e 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <HAL_InitTick+0xa4>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0c9b      	lsrs	r3, r3, #18
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_InitTick+0xa8>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_InitTick+0xac>)
 8002eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_InitTick+0xa8>)
 8002ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ec0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <HAL_InitTick+0xa8>)
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_InitTick+0xa8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_InitTick+0xa8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002ed4:	4809      	ldr	r0, [pc, #36]	; (8002efc <HAL_InitTick+0xa8>)
 8002ed6:	f7fe fabd 	bl	8001454 <HAL_TIM_Base_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002ee0:	4806      	ldr	r0, [pc, #24]	; (8002efc <HAL_InitTick+0xa8>)
 8002ee2:	f7fe faec 	bl	80014be <HAL_TIM_Base_Start_IT>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	e000      	b.n	8002eec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3730      	adds	r7, #48	; 0x30
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	431bde83 	.word	0x431bde83
 8002efc:	20012f90 	.word	0x20012f90
 8002f00:	40000c00 	.word	0x40000c00

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <MemManage_Handler+0x4>

08002f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <USART1_IRQHandler+0x10>)
 8002f3e:	f7fe fde3 	bl	8001b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20012e90 	.word	0x20012e90

08002f4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <TIM5_IRQHandler+0x10>)
 8002f52:	f7fe fad8 	bl	8001506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20012f90 	.word	0x20012f90

08002f60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <USART6_IRQHandler+0x10>)
 8002f66:	f7fe fdcf 	bl	8001b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20012ed8 	.word	0x20012ed8

08002f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <SystemInit+0x28>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <SystemInit+0x28>)
 8002f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <SystemInit+0x28>)
 8002f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fa6:	e003      	b.n	8002fb0 <LoopCopyDataInit>

08002fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fae:	3104      	adds	r1, #4

08002fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fb0:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fb8:	d3f6      	bcc.n	8002fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fbc:	e002      	b.n	8002fc4 <LoopFillZerobss>

08002fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fc0:	f842 3b04 	str.w	r3, [r2], #4

08002fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fc8:	d3f9      	bcc.n	8002fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fca:	f7ff ffd3 	bl	8002f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fce:	f002 fdeb 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fd2:	f7ff fc09 	bl	80027e8 <main>
  bx  lr    
 8002fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fdc:	080064dc 	.word	0x080064dc
  ldr  r0, =_sdata
 8002fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fe4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002fe8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002fec:	20012fd4 	.word	0x20012fd4

08002ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC_IRQHandler>

08002ff2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f04f 32ff 	mov.w	r2, #4294967295
 800300a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f103 0208 	add.w	r2, r3, #8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f103 0208 	add.w	r2, r3, #8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	601a      	str	r2, [r3, #0]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d103      	bne.n	80030b4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e00c      	b.n	80030ce <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3308      	adds	r3, #8
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e002      	b.n	80030c2 <vListInsert+0x2e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d2f6      	bcs.n	80030bc <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6892      	ldr	r2, [r2, #8]
 800311c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6852      	ldr	r2, [r2, #4]
 8003126:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d103      	bne.n	800313a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <xQueueGenericReset+0x2a>
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003182:	bf00      	nop
 8003184:	e7fe      	b.n	8003184 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003186:	f002 f9ef 	bl	8005568 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	3b01      	subs	r3, #1
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	441a      	add	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	; 0xff
 80031ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	22ff      	movs	r2, #255	; 0xff
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d114      	bne.n	8003206 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01a      	beq.n	800321a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3310      	adds	r3, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 f9c9 	bl	8004580 <xTaskRemoveFromEventList>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d012      	beq.n	800321a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <xQueueGenericReset+0xcc>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	e009      	b.n	800321a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3310      	adds	r3, #16
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fef1 	bl	8002ff2 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3324      	adds	r3, #36	; 0x24
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff feec 	bl	8002ff2 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800321a:	f002 f9d5 	bl	80055c8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	61bb      	str	r3, [r7, #24]
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <xQueueGenericCreate+0x48>
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d101      	bne.n	8003278 <xQueueGenericCreate+0x4c>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <xQueueGenericCreate+0x4e>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <xQueueGenericCreate+0x68>
        __asm volatile
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	617b      	str	r3, [r7, #20]
    }
 8003290:	bf00      	nop
 8003292:	e7fe      	b.n	8003292 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800329a:	d90a      	bls.n	80032b2 <xQueueGenericCreate+0x86>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	613b      	str	r3, [r7, #16]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	3350      	adds	r3, #80	; 0x50
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fa78 	bl	80057ac <pvPortMalloc>
 80032bc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	3350      	adds	r3, #80	; 0x50
 80032cc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ce:	79fa      	ldrb	r2, [r7, #7]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f805 	bl	80032ea <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
    }
 80032e2:	4618      	mov	r0, r3
 80032e4:	3728      	adds	r7, #40	; 0x28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e002      	b.n	800330c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003318:	2101      	movs	r1, #1
 800331a:	69b8      	ldr	r0, [r7, #24]
 800331c:	f7ff ff1e 	bl	800315c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	; 0x38
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800333e:	2300      	movs	r3, #0
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueGenericSend+0x32>
        __asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <xQueueGenericSend+0x40>
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <xQueueGenericSend+0x44>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <xQueueGenericSend+0x46>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <xQueueGenericSend+0x60>
        __asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <xQueueGenericSend+0x6e>
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <xQueueGenericSend+0x72>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <xQueueGenericSend+0x74>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xQueueGenericSend+0x8e>
        __asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
    }
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033be:	f001 fa7b 	bl	80048b8 <xTaskGetSchedulerState>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <xQueueGenericSend+0x9e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSend+0xa2>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSend+0xa4>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <xQueueGenericSend+0xbe>
        __asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61fb      	str	r3, [r7, #28]
    }
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033ee:	f002 f8bb 	bl	8005568 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <xQueueGenericSend+0xd4>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d129      	bne.n	8003458 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800340a:	f000 fb60 	bl	8003ace <prvCopyDataToQueue>
 800340e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d010      	beq.n	800343a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	3324      	adds	r3, #36	; 0x24
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f8af 	bl	8004580 <xTaskRemoveFromEventList>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <xQueueGenericSend+0x1f8>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	e00a      	b.n	8003450 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003440:	4b39      	ldr	r3, [pc, #228]	; (8003528 <xQueueGenericSend+0x1f8>)
 8003442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003450:	f002 f8ba 	bl	80055c8 <vPortExitCritical>
                return pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	e063      	b.n	8003520 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800345e:	f002 f8b3 	bl	80055c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003462:	2300      	movs	r3, #0
 8003464:	e05c      	b.n	8003520 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f8e7 	bl	8004644 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003476:	2301      	movs	r3, #1
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800347a:	f002 f8a5 	bl	80055c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800347e:	f000 fe61 	bl	8004144 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003482:	f002 f871 	bl	8005568 <vPortEnterCritical>
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348c:	b25b      	sxtb	r3, r3
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d103      	bne.n	800349c <xQueueGenericSend+0x16c>
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a2:	b25b      	sxtb	r3, r3
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericSend+0x182>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b2:	f002 f889 	bl	80055c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b6:	1d3a      	adds	r2, r7, #4
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4611      	mov	r1, r2
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 f8d6 	bl	8004670 <xTaskCheckForTimeOut>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d124      	bne.n	8003514 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034cc:	f000 fbf7 	bl	8003cbe <prvIsQueueFull>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d018      	beq.n	8003508 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	3310      	adds	r3, #16
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fffe 	bl	80044e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80034e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034e6:	f000 fb82 	bl	8003bee <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80034ea:	f000 fe39 	bl	8004160 <xTaskResumeAll>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f47f af7c 	bne.w	80033ee <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <xQueueGenericSend+0x1f8>)
 80034f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	e772      	b.n	80033ee <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800350a:	f000 fb70 	bl	8003bee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800350e:	f000 fe27 	bl	8004160 <xTaskResumeAll>
 8003512:	e76c      	b.n	80033ee <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003516:	f000 fb6a 	bl	8003bee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800351a:	f000 fe21 	bl	8004160 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800351e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003520:	4618      	mov	r0, r3
 8003522:	3738      	adds	r7, #56	; 0x38
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b090      	sub	sp, #64	; 0x40
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <xQueueGenericSendFromISR+0x3c>
 8003560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <xQueueGenericSendFromISR+0x40>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <xQueueGenericSendFromISR+0x42>
 800356c:	2300      	movs	r3, #0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d103      	bne.n	8003596 <xQueueGenericSendFromISR+0x6a>
 800358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <xQueueGenericSendFromISR+0x6e>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <xQueueGenericSendFromISR+0x70>
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
    }
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b6:	f002 f8b9 	bl	800572c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80035ba:	f3ef 8211 	mrs	r2, BASEPRI
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fa      	str	r2, [r7, #28]
 80035d0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80035d2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <xQueueGenericSendFromISR+0xbc>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d13e      	bne.n	8003666 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80035fe:	f000 fa66 	bl	8003ace <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003602:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d112      	bne.n	8003632 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d025      	beq.n	8003660 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	3324      	adds	r3, #36	; 0x24
 8003618:	4618      	mov	r0, r3
 800361a:	f000 ffb1 	bl	8004580 <xTaskRemoveFromEventList>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01d      	beq.n	8003660 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e016      	b.n	8003660 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003632:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003636:	2b7f      	cmp	r3, #127	; 0x7f
 8003638:	d10a      	bne.n	8003650 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	617b      	str	r3, [r7, #20]
    }
 800364c:	bf00      	nop
 800364e:	e7fe      	b.n	800364e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003654:	3301      	adds	r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	b25a      	sxtb	r2, r3
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003660:	2301      	movs	r3, #1
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003664:	e001      	b.n	800366a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003666:	2300      	movs	r3, #0
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003674:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003678:	4618      	mov	r0, r3
 800367a:	3740      	adds	r7, #64	; 0x40
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	; 0x30
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <xQueueReceive+0x30>
        __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	623b      	str	r3, [r7, #32]
    }
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d103      	bne.n	80036be <xQueueReceive+0x3e>
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <xQueueReceive+0x42>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <xQueueReceive+0x44>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <xQueueReceive+0x5e>
        __asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	61fb      	str	r3, [r7, #28]
    }
 80036da:	bf00      	nop
 80036dc:	e7fe      	b.n	80036dc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036de:	f001 f8eb 	bl	80048b8 <xTaskGetSchedulerState>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <xQueueReceive+0x6e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <xQueueReceive+0x72>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueReceive+0x74>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueReceive+0x8e>
        __asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	61bb      	str	r3, [r7, #24]
    }
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800370e:	f001 ff2b 	bl	8005568 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01f      	beq.n	800375e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003722:	f000 fa3e 	bl	8003ba2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	3310      	adds	r3, #16
 800373a:	4618      	mov	r0, r3
 800373c:	f000 ff20 	bl	8004580 <xTaskRemoveFromEventList>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <xQueueReceive+0x1bc>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003756:	f001 ff37 	bl	80055c8 <vPortExitCritical>
                return pdPASS;
 800375a:	2301      	movs	r3, #1
 800375c:	e069      	b.n	8003832 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003764:	f001 ff30 	bl	80055c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003768:	2300      	movs	r3, #0
 800376a:	e062      	b.n	8003832 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f000 ff64 	bl	8004644 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003780:	f001 ff22 	bl	80055c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003784:	f000 fcde 	bl	8004144 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003788:	f001 feee 	bl	8005568 <vPortEnterCritical>
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d103      	bne.n	80037a2 <xQueueReceive+0x122>
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d103      	bne.n	80037b8 <xQueueReceive+0x138>
 80037b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b8:	f001 ff06 	bl	80055c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037bc:	1d3a      	adds	r2, r7, #4
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 ff53 	bl	8004670 <xTaskCheckForTimeOut>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d123      	bne.n	8003818 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d2:	f000 fa5e 	bl	8003c92 <prvIsQueueEmpty>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	3324      	adds	r3, #36	; 0x24
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fe7b 	bl	80044e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80037ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ec:	f000 f9ff 	bl	8003bee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80037f0:	f000 fcb6 	bl	8004160 <xTaskResumeAll>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d189      	bne.n	800370e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <xQueueReceive+0x1bc>)
 80037fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	e780      	b.n	800370e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f9ee 	bl	8003bee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003812:	f000 fca5 	bl	8004160 <xTaskResumeAll>
 8003816:	e77a      	b.n	800370e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381a:	f000 f9e8 	bl	8003bee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800381e:	f000 fc9f 	bl	8004160 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003824:	f000 fa35 	bl	8003c92 <prvIsQueueEmpty>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	f43f af6f 	beq.w	800370e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003830:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003832:	4618      	mov	r0, r3
 8003834:	3730      	adds	r7, #48	; 0x30
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08e      	sub	sp, #56	; 0x38
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	623b      	str	r3, [r7, #32]
    }
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	61fb      	str	r3, [r7, #28]
    }
 800388c:	bf00      	nop
 800388e:	e7fe      	b.n	800388e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003890:	f001 f812 	bl	80048b8 <xTaskGetSchedulerState>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <xQueueSemaphoreTake+0x60>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <xQueueSemaphoreTake+0x64>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <xQueueSemaphoreTake+0x66>
 80038a4:	2300      	movs	r3, #0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	61bb      	str	r3, [r7, #24]
    }
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80038c0:	f001 fe52 	bl	8005568 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d024      	beq.n	800391a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80038e0:	f001 f986 	bl	8004bf0 <pvTaskIncrementMutexHeldCount>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00f      	beq.n	8003912 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	3310      	adds	r3, #16
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fe42 	bl	8004580 <xTaskRemoveFromEventList>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003902:	4b54      	ldr	r3, [pc, #336]	; (8003a54 <xQueueSemaphoreTake+0x214>)
 8003904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003912:	f001 fe59 	bl	80055c8 <vPortExitCritical>
                return pdPASS;
 8003916:	2301      	movs	r3, #1
 8003918:	e097      	b.n	8003a4a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	617b      	str	r3, [r7, #20]
    }
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800393c:	f001 fe44 	bl	80055c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003940:	2300      	movs	r3, #0
 8003942:	e082      	b.n	8003a4a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fe78 	bl	8004644 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003958:	f001 fe36 	bl	80055c8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800395c:	f000 fbf2 	bl	8004144 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003960:	f001 fe02 	bl	8005568 <vPortEnterCritical>
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800396a:	b25b      	sxtb	r3, r3
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d103      	bne.n	800397a <xQueueSemaphoreTake+0x13a>
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d103      	bne.n	8003990 <xQueueSemaphoreTake+0x150>
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003990:	f001 fe1a 	bl	80055c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003994:	463a      	mov	r2, r7
 8003996:	f107 030c 	add.w	r3, r7, #12
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fe67 	bl	8004670 <xTaskCheckForTimeOut>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d132      	bne.n	8003a0e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039aa:	f000 f972 	bl	8003c92 <prvIsQueueEmpty>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d026      	beq.n	8003a02 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80039bc:	f001 fdd4 	bl	8005568 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ff95 	bl	80048f4 <xTaskPriorityInherit>
 80039ca:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80039cc:	f001 fdfc 	bl	80055c8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	3324      	adds	r3, #36	; 0x24
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fd81 	bl	80044e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80039de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039e0:	f000 f905 	bl	8003bee <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80039e4:	f000 fbbc 	bl	8004160 <xTaskResumeAll>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f47f af68 	bne.w	80038c0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <xQueueSemaphoreTake+0x214>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	e75e      	b.n	80038c0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a04:	f000 f8f3 	bl	8003bee <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a08:	f000 fbaa 	bl	8004160 <xTaskResumeAll>
 8003a0c:	e758      	b.n	80038c0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a10:	f000 f8ed 	bl	8003bee <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a14:	f000 fba4 	bl	8004160 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a1a:	f000 f93a 	bl	8003c92 <prvIsQueueEmpty>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f43f af4d 	beq.w	80038c0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003a2c:	f001 fd9c 	bl	8005568 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003a30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a32:	f000 f834 	bl	8003a9e <prvGetDisinheritPriorityAfterTimeout>
 8003a36:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f848 	bl	8004ad4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003a44:	f001 fdc0 	bl	80055c8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003a48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3738      	adds	r7, #56	; 0x38
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <uxQueueSpacesAvailable>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <uxQueueSpacesAvailable+0x28>
        __asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	60fb      	str	r3, [r7, #12]
    }
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 8003a80:	f001 fd72 	bl	8005568 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 8003a90:	f001 fd9a 	bl	80055c8 <vPortExitCritical>

    return uxReturn;
 8003a94:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1c3 0305 	rsb	r3, r3, #5
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e001      	b.n	8003ac0 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b086      	sub	sp, #24
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10d      	bne.n	8003b08 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d14d      	bne.n	8003b90 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 ff71 	bl	80049e0 <xTaskPriorityDisinherit>
 8003afe:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	e043      	b.n	8003b90 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d119      	bne.n	8003b42 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6858      	ldr	r0, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	461a      	mov	r2, r3
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	f002 f869 	bl	8005bf0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	441a      	add	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d32b      	bcc.n	8003b90 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	e026      	b.n	8003b90 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68d8      	ldr	r0, [r3, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	f002 f84f 	bl	8005bf0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	425b      	negs	r3, r3
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d207      	bcs.n	8003b7e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	425b      	negs	r3, r3
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d105      	bne.n	8003b90 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003b98:	697b      	ldr	r3, [r7, #20]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d018      	beq.n	8003be6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d303      	bcc.n	8003bd6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68d9      	ldr	r1, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	461a      	mov	r2, r3
 8003be0:	6838      	ldr	r0, [r7, #0]
 8003be2:	f002 f805 	bl	8005bf0 <memcpy>
    }
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003bf6:	f001 fcb7 	bl	8005568 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c00:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c02:	e011      	b.n	8003c28 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3324      	adds	r3, #36	; 0x24
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fcb5 	bl	8004580 <xTaskRemoveFromEventList>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003c1c:	f000 fd8e 	bl	800473c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	dce9      	bgt.n	8003c04 <prvUnlockQueue+0x16>
 8003c30:	e000      	b.n	8003c34 <prvUnlockQueue+0x46>
                        break;
 8003c32:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	22ff      	movs	r2, #255	; 0xff
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003c3c:	f001 fcc4 	bl	80055c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003c40:	f001 fc92 	bl	8005568 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c4a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c4c:	e011      	b.n	8003c72 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3310      	adds	r3, #16
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc90 	bl	8004580 <xTaskRemoveFromEventList>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003c66:	f000 fd69 	bl	800473c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003c6a:	7bbb      	ldrb	r3, [r7, #14]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dce9      	bgt.n	8003c4e <prvUnlockQueue+0x60>
 8003c7a:	e000      	b.n	8003c7e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003c7c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	22ff      	movs	r2, #255	; 0xff
 8003c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003c86:	f001 fc9f 	bl	80055c8 <vPortExitCritical>
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c9a:	f001 fc65 	bl	8005568 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e001      	b.n	8003cb0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003cb0:	f001 fc8a 	bl	80055c8 <vPortExitCritical>

    return xReturn;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003cc6:	f001 fc4f 	bl	8005568 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d102      	bne.n	8003cdc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e001      	b.n	8003ce0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ce0:	f001 fc72 	bl	80055c8 <vPortExitCritical>

    return xReturn;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e014      	b.n	8003d2a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d00:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <vQueueAddToRegistry+0x50>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <vQueueAddToRegistry+0x50>)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <vQueueAddToRegistry+0x50>)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8003d22:	e006      	b.n	8003d32 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3301      	adds	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b07      	cmp	r3, #7
 8003d2e:	d9e7      	bls.n	8003d00 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000009c 	.word	0x2000009c

08003d44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003d54:	f001 fc08 	bl	8005568 <vPortEnterCritical>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5e:	b25b      	sxtb	r3, r3
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d103      	bne.n	8003d6e <vQueueWaitForMessageRestricted+0x2a>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d103      	bne.n	8003d84 <vQueueWaitForMessageRestricted+0x40>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d84:	f001 fc20 	bl	80055c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fbc5 	bl	8004528 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7ff ff25 	bl	8003bee <prvUnlockQueue>
    }
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af04      	add	r7, sp, #16
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fcf3 	bl	80057ac <pvPortMalloc>
 8003dc6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00e      	beq.n	8003dec <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dce:	2058      	movs	r0, #88	; 0x58
 8003dd0:	f001 fcec 	bl	80057ac <pvPortMalloc>
 8003dd4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
 8003de2:	e005      	b.n	8003df0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f001 fdc1 	bl	800596c <vPortFree>
 8003dea:	e001      	b.n	8003df0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d013      	beq.n	8003e1e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9303      	str	r3, [sp, #12]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	9302      	str	r3, [sp, #8]
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f80e 	bl	8003e2e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003e12:	69f8      	ldr	r0, [r7, #28]
 8003e14:	f000 f8a2 	bl	8003f5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	e002      	b.n	8003e24 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e22:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003e24:	69bb      	ldr	r3, [r7, #24]
    }
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b088      	sub	sp, #32
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	461a      	mov	r2, r3
 8003e46:	21a5      	movs	r1, #165	; 0xa5
 8003e48:	f001 fedd 	bl	8005c06 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e56:	3b01      	subs	r3, #1
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f023 0307 	bic.w	r3, r3, #7
 8003e64:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	617b      	str	r3, [r7, #20]
    }
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01f      	beq.n	8003ecc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e012      	b.n	8003eb8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	4413      	add	r3, r2
 8003e98:	7819      	ldrb	r1, [r3, #0]
 8003e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3334      	adds	r3, #52	; 0x34
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d9e9      	bls.n	8003e92 <prvInitialiseNewTask+0x64>
 8003ebe:	e000      	b.n	8003ec2 <prvInitialiseNewTask+0x94>
            {
                break;
 8003ec0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003eca:	e003      	b.n	8003ed4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d901      	bls.n	8003ede <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eda:	2304      	movs	r3, #4
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	2200      	movs	r2, #0
 8003eee:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff f89c 	bl	8003032 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	3318      	adds	r3, #24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff f897 	bl	8003032 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f08:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	f1c3 0205 	rsb	r2, r3, #5
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	3350      	adds	r3, #80	; 0x50
 8003f1e:	2204      	movs	r2, #4
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 fe6f 	bl	8005c06 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	3354      	adds	r3, #84	; 0x54
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fe68 	bl	8005c06 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	69b8      	ldr	r0, [r7, #24]
 8003f3c:	f001 f9e4 	bl	8005308 <pxPortInitialiseStack>
 8003f40:	4602      	mov	r2, r0
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f52:	bf00      	nop
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003f64:	f001 fb00 	bl	8005568 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003f68:	4b2c      	ldr	r3, [pc, #176]	; (800401c <prvAddNewTaskToReadyList+0xc0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	4a2b      	ldr	r2, [pc, #172]	; (800401c <prvAddNewTaskToReadyList+0xc0>)
 8003f70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003f72:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <prvAddNewTaskToReadyList+0xc4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003f7a:	4a29      	ldr	r2, [pc, #164]	; (8004020 <prvAddNewTaskToReadyList+0xc4>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f80:	4b26      	ldr	r3, [pc, #152]	; (800401c <prvAddNewTaskToReadyList+0xc0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d110      	bne.n	8003faa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003f88:	f000 fbfc 	bl	8004784 <prvInitialiseTaskLists>
 8003f8c:	e00d      	b.n	8003faa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003f8e:	4b25      	ldr	r3, [pc, #148]	; (8004024 <prvAddNewTaskToReadyList+0xc8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <prvAddNewTaskToReadyList+0xc4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d802      	bhi.n	8003faa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <prvAddNewTaskToReadyList+0xc4>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <prvAddNewTaskToReadyList+0xcc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <prvAddNewTaskToReadyList+0xcc>)
 8003fb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <prvAddNewTaskToReadyList+0xcc>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <prvAddNewTaskToReadyList+0xd0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	4a18      	ldr	r2, [pc, #96]	; (800402c <prvAddNewTaskToReadyList+0xd0>)
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <prvAddNewTaskToReadyList+0xd4>)
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7ff f831 	bl	800304c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003fea:	f001 faed 	bl	80055c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <prvAddNewTaskToReadyList+0xc8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <prvAddNewTaskToReadyList+0xc4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	429a      	cmp	r2, r3
 8004002:	d207      	bcs.n	8004014 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <prvAddNewTaskToReadyList+0xd8>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	200001b4 	.word	0x200001b4
 8004020:	200000dc 	.word	0x200000dc
 8004024:	200001c0 	.word	0x200001c0
 8004028:	200001d0 	.word	0x200001d0
 800402c:	200001bc 	.word	0x200001bc
 8004030:	200000e0 	.word	0x200000e0
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d017      	beq.n	800407a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <vTaskDelay+0x60>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <vTaskDelay+0x30>
        __asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60bb      	str	r3, [r7, #8]
    }
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004068:	f000 f86c 	bl	8004144 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800406c:	2100      	movs	r1, #0
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fdd2 	bl	8004c18 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004074:	f000 f874 	bl	8004160 <xTaskResumeAll>
 8004078:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <vTaskDelay+0x64>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200001dc 	.word	0x200001dc
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <vTaskStartScheduler+0x88>)
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	2300      	movs	r3, #0
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	2300      	movs	r3, #0
 80040b0:	2282      	movs	r2, #130	; 0x82
 80040b2:	491e      	ldr	r1, [pc, #120]	; (800412c <vTaskStartScheduler+0x8c>)
 80040b4:	481e      	ldr	r0, [pc, #120]	; (8004130 <vTaskStartScheduler+0x90>)
 80040b6:	f7ff fe79 	bl	8003dac <xTaskCreate>
 80040ba:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d102      	bne.n	80040c8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80040c2:	f000 fe0f 	bl	8004ce4 <xTimerCreateTimerTask>
 80040c6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d116      	bne.n	80040fc <vTaskStartScheduler+0x5c>
        __asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60bb      	str	r3, [r7, #8]
    }
 80040e0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <vTaskStartScheduler+0x94>)
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <vTaskStartScheduler+0x98>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <vTaskStartScheduler+0x9c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80040f6:	f001 f995 	bl	8005424 <xPortStartScheduler>
 80040fa:	e00e      	b.n	800411a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d10a      	bne.n	800411a <vTaskStartScheduler+0x7a>
        __asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	607b      	str	r3, [r7, #4]
    }
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <vTaskStartScheduler+0xa0>)
 800411c:	681b      	ldr	r3, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200001d8 	.word	0x200001d8
 800412c:	08006468 	.word	0x08006468
 8004130:	08004755 	.word	0x08004755
 8004134:	200001d4 	.word	0x200001d4
 8004138:	200001c0 	.word	0x200001c0
 800413c:	200001b8 	.word	0x200001b8
 8004140:	2000000c 	.word	0x2000000c

08004144 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <vTaskSuspendAll+0x18>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	4a03      	ldr	r2, [pc, #12]	; (800415c <vTaskSuspendAll+0x18>)
 8004150:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	200001dc 	.word	0x200001dc

08004160 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <xTaskResumeAll+0x114>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <xTaskResumeAll+0x2c>
        __asm volatile
 8004176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	603b      	str	r3, [r7, #0]
    }
 8004188:	bf00      	nop
 800418a:	e7fe      	b.n	800418a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800418c:	f001 f9ec 	bl	8005568 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004190:	4b38      	ldr	r3, [pc, #224]	; (8004274 <xTaskResumeAll+0x114>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <xTaskResumeAll+0x114>)
 8004198:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <xTaskResumeAll+0x114>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d161      	bne.n	8004266 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041a2:	4b35      	ldr	r3, [pc, #212]	; (8004278 <xTaskResumeAll+0x118>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d05d      	beq.n	8004266 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041aa:	e02e      	b.n	800420a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b33      	ldr	r3, [pc, #204]	; (800427c <xTaskResumeAll+0x11c>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe ffa4 	bl	8003106 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe ff9f 	bl	8003106 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <xTaskResumeAll+0x120>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <xTaskResumeAll+0x120>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a27      	ldr	r2, [pc, #156]	; (8004284 <xTaskResumeAll+0x124>)
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe ff2b 	bl	800304c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <xTaskResumeAll+0x128>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <xTaskResumeAll+0x12c>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800420a:	4b1c      	ldr	r3, [pc, #112]	; (800427c <xTaskResumeAll+0x11c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1cc      	bne.n	80041ac <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004218:	f000 fb32 	bl	8004880 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800421c:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <xTaskResumeAll+0x130>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004228:	f000 f846 	bl	80042b8 <xTaskIncrementTick>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <xTaskResumeAll+0x12c>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f1      	bne.n	8004228 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <xTaskResumeAll+0x130>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <xTaskResumeAll+0x12c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <xTaskResumeAll+0x134>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004266:	f001 f9af 	bl	80055c8 <vPortExitCritical>

    return xAlreadyYielded;
 800426a:	68bb      	ldr	r3, [r7, #8]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200001dc 	.word	0x200001dc
 8004278:	200001b4 	.word	0x200001b4
 800427c:	20000174 	.word	0x20000174
 8004280:	200001bc 	.word	0x200001bc
 8004284:	200000e0 	.word	0x200000e0
 8004288:	200000dc 	.word	0x200000dc
 800428c:	200001c8 	.word	0x200001c8
 8004290:	200001c4 	.word	0x200001c4
 8004294:	e000ed04 	.word	0xe000ed04

08004298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <xTaskGetTickCount+0x1c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80042a4:	687b      	ldr	r3, [r7, #4]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	200001b8 	.word	0x200001b8

080042b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c2:	4b4e      	ldr	r3, [pc, #312]	; (80043fc <xTaskIncrementTick+0x144>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 808e 	bne.w	80043e8 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042cc:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <xTaskIncrementTick+0x148>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80042d4:	4a4a      	ldr	r2, [pc, #296]	; (8004400 <xTaskIncrementTick+0x148>)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d120      	bne.n	8004322 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80042e0:	4b48      	ldr	r3, [pc, #288]	; (8004404 <xTaskIncrementTick+0x14c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <xTaskIncrementTick+0x48>
        __asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	603b      	str	r3, [r7, #0]
    }
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <xTaskIncrementTick+0x46>
 8004300:	4b40      	ldr	r3, [pc, #256]	; (8004404 <xTaskIncrementTick+0x14c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b40      	ldr	r3, [pc, #256]	; (8004408 <xTaskIncrementTick+0x150>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3e      	ldr	r2, [pc, #248]	; (8004404 <xTaskIncrementTick+0x14c>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4a3e      	ldr	r2, [pc, #248]	; (8004408 <xTaskIncrementTick+0x150>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <xTaskIncrementTick+0x154>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	4a3c      	ldr	r2, [pc, #240]	; (800440c <xTaskIncrementTick+0x154>)
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	f000 faaf 	bl	8004880 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004322:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <xTaskIncrementTick+0x158>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d348      	bcc.n	80043be <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800432c:	4b35      	ldr	r3, [pc, #212]	; (8004404 <xTaskIncrementTick+0x14c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004336:	4b36      	ldr	r3, [pc, #216]	; (8004410 <xTaskIncrementTick+0x158>)
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	601a      	str	r2, [r3, #0]
                    break;
 800433e:	e03e      	b.n	80043be <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004340:	4b30      	ldr	r3, [pc, #192]	; (8004404 <xTaskIncrementTick+0x14c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d203      	bcs.n	8004360 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004358:	4a2d      	ldr	r2, [pc, #180]	; (8004410 <xTaskIncrementTick+0x158>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800435e:	e02e      	b.n	80043be <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe fece 	bl	8003106 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3318      	adds	r3, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fec5 	bl	8003106 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <xTaskIncrementTick+0x15c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	4a22      	ldr	r2, [pc, #136]	; (8004414 <xTaskIncrementTick+0x15c>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a1f      	ldr	r2, [pc, #124]	; (8004418 <xTaskIncrementTick+0x160>)
 800439c:	441a      	add	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	3304      	adds	r3, #4
 80043a2:	4619      	mov	r1, r3
 80043a4:	4610      	mov	r0, r2
 80043a6:	f7fe fe51 	bl	800304c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <xTaskIncrementTick+0x164>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3b9      	bcc.n	800432c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043bc:	e7b6      	b.n	800432c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <xTaskIncrementTick+0x164>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4914      	ldr	r1, [pc, #80]	; (8004418 <xTaskIncrementTick+0x160>)
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d901      	bls.n	80043da <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <xTaskIncrementTick+0x168>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e004      	b.n	80043f2 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <xTaskIncrementTick+0x16c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	4a0d      	ldr	r2, [pc, #52]	; (8004424 <xTaskIncrementTick+0x16c>)
 80043f0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80043f2:	697b      	ldr	r3, [r7, #20]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	200001dc 	.word	0x200001dc
 8004400:	200001b8 	.word	0x200001b8
 8004404:	2000016c 	.word	0x2000016c
 8004408:	20000170 	.word	0x20000170
 800440c:	200001cc 	.word	0x200001cc
 8004410:	200001d4 	.word	0x200001d4
 8004414:	200001bc 	.word	0x200001bc
 8004418:	200000e0 	.word	0x200000e0
 800441c:	200000dc 	.word	0x200000dc
 8004420:	200001c8 	.word	0x200001c8
 8004424:	200001c4 	.word	0x200001c4

08004428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <vTaskSwitchContext+0xa4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004436:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <vTaskSwitchContext+0xa8>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800443c:	e03f      	b.n	80044be <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <vTaskSwitchContext+0xa8>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <vTaskSwitchContext+0xac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	fab3 f383 	clz	r3, r3
 8004450:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	f1c3 031f 	rsb	r3, r3, #31
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	491f      	ldr	r1, [pc, #124]	; (80044d8 <vTaskSwitchContext+0xb0>)
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <vTaskSwitchContext+0x5c>
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <vTaskSwitchContext+0x5a>
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <vTaskSwitchContext+0xb0>)
 8004490:	4413      	add	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3308      	adds	r3, #8
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d104      	bne.n	80044b4 <vTaskSwitchContext+0x8c>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4a08      	ldr	r2, [pc, #32]	; (80044dc <vTaskSwitchContext+0xb4>)
 80044bc:	6013      	str	r3, [r2, #0]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200001dc 	.word	0x200001dc
 80044d0:	200001c8 	.word	0x200001c8
 80044d4:	200001bc 	.word	0x200001bc
 80044d8:	200000e0 	.word	0x200000e0
 80044dc:	200000dc 	.word	0x200000dc

080044e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	60fb      	str	r3, [r7, #12]
    }
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <vTaskPlaceOnEventList+0x44>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3318      	adds	r3, #24
 800450c:	4619      	mov	r1, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fe fdc0 	bl	8003094 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004514:	2101      	movs	r1, #1
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f000 fb7e 	bl	8004c18 <prvAddCurrentTaskToDelayedList>
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200000dc 	.word	0x200000dc

08004528 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	617b      	str	r3, [r7, #20]
    }
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <vTaskPlaceOnEventListRestricted+0x54>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3318      	adds	r3, #24
 8004556:	4619      	mov	r1, r3
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7fe fd77 	bl	800304c <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004564:	f04f 33ff 	mov.w	r3, #4294967295
 8004568:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	68b8      	ldr	r0, [r7, #8]
 800456e:	f000 fb53 	bl	8004c18 <prvAddCurrentTaskToDelayedList>
    }
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	200000dc 	.word	0x200000dc

08004580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60fb      	str	r3, [r7, #12]
    }
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	3318      	adds	r3, #24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fda8 	bl	8003106 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b6:	4b1d      	ldr	r3, [pc, #116]	; (800462c <xTaskRemoveFromEventList+0xac>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11c      	bne.n	80045f8 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fd9f 	bl	8003106 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	2201      	movs	r2, #1
 80045ce:	409a      	lsls	r2, r3
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <xTaskRemoveFromEventList+0xb0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <xTaskRemoveFromEventList+0xb0>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4a13      	ldr	r2, [pc, #76]	; (8004634 <xTaskRemoveFromEventList+0xb4>)
 80045e8:	441a      	add	r2, r3
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fd2b 	bl	800304c <vListInsertEnd>
 80045f6:	e005      	b.n	8004604 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3318      	adds	r3, #24
 80045fc:	4619      	mov	r1, r3
 80045fe:	480e      	ldr	r0, [pc, #56]	; (8004638 <xTaskRemoveFromEventList+0xb8>)
 8004600:	f7fe fd24 	bl	800304c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <xTaskRemoveFromEventList+0xbc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	429a      	cmp	r2, r3
 8004610:	d905      	bls.n	800461e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <xTaskRemoveFromEventList+0xc0>)
 8004618:	2201      	movs	r2, #1
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e001      	b.n	8004622 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004622:	697b      	ldr	r3, [r7, #20]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	200001dc 	.word	0x200001dc
 8004630:	200001bc 	.word	0x200001bc
 8004634:	200000e0 	.word	0x200000e0
 8004638:	20000174 	.word	0x20000174
 800463c:	200000dc 	.word	0x200000dc
 8004640:	200001c8 	.word	0x200001c8

08004644 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <vTaskInternalSetTimeOutState+0x24>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <vTaskInternalSetTimeOutState+0x28>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	200001cc 	.word	0x200001cc
 800466c:	200001b8 	.word	0x200001b8

08004670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
    }
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	60fb      	str	r3, [r7, #12]
    }
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80046b2:	f000 ff59 	bl	8005568 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80046b6:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <xTaskCheckForTimeOut+0xc4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d102      	bne.n	80046d6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	e026      	b.n	8004724 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <xTaskCheckForTimeOut+0xc8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d00a      	beq.n	80046f8 <xTaskCheckForTimeOut+0x88>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d305      	bcc.n	80046f8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e015      	b.n	8004724 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20b      	bcs.n	800471a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad2      	subs	r2, r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff98 	bl	8004644 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	e004      	b.n	8004724 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004720:	2301      	movs	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004724:	f000 ff50 	bl	80055c8 <vPortExitCritical>

    return xReturn;
 8004728:	69fb      	ldr	r3, [r7, #28]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200001b8 	.word	0x200001b8
 8004738:	200001cc 	.word	0x200001cc

0800473c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <vTaskMissedYield+0x14>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	200001c8 	.word	0x200001c8

08004754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800475c:	f000 f852 	bl	8004804 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <prvIdleTask+0x28>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d9f9      	bls.n	800475c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <prvIdleTask+0x2c>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004778:	e7f0      	b.n	800475c <prvIdleTask+0x8>
 800477a:	bf00      	nop
 800477c:	200000e0 	.word	0x200000e0
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	e00c      	b.n	80047aa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <prvInitialiseTaskLists+0x60>)
 800479c:	4413      	add	r3, r2
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fc27 	bl	8002ff2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3301      	adds	r3, #1
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d9ef      	bls.n	8004790 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80047b0:	480d      	ldr	r0, [pc, #52]	; (80047e8 <prvInitialiseTaskLists+0x64>)
 80047b2:	f7fe fc1e 	bl	8002ff2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80047b6:	480d      	ldr	r0, [pc, #52]	; (80047ec <prvInitialiseTaskLists+0x68>)
 80047b8:	f7fe fc1b 	bl	8002ff2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80047bc:	480c      	ldr	r0, [pc, #48]	; (80047f0 <prvInitialiseTaskLists+0x6c>)
 80047be:	f7fe fc18 	bl	8002ff2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80047c2:	480c      	ldr	r0, [pc, #48]	; (80047f4 <prvInitialiseTaskLists+0x70>)
 80047c4:	f7fe fc15 	bl	8002ff2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80047c8:	480b      	ldr	r0, [pc, #44]	; (80047f8 <prvInitialiseTaskLists+0x74>)
 80047ca:	f7fe fc12 	bl	8002ff2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <prvInitialiseTaskLists+0x78>)
 80047d0:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <prvInitialiseTaskLists+0x64>)
 80047d2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <prvInitialiseTaskLists+0x7c>)
 80047d6:	4a05      	ldr	r2, [pc, #20]	; (80047ec <prvInitialiseTaskLists+0x68>)
 80047d8:	601a      	str	r2, [r3, #0]
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200000e0 	.word	0x200000e0
 80047e8:	20000144 	.word	0x20000144
 80047ec:	20000158 	.word	0x20000158
 80047f0:	20000174 	.word	0x20000174
 80047f4:	20000188 	.word	0x20000188
 80047f8:	200001a0 	.word	0x200001a0
 80047fc:	2000016c 	.word	0x2000016c
 8004800:	20000170 	.word	0x20000170

08004804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800480a:	e019      	b.n	8004840 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800480c:	f000 feac 	bl	8005568 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004810:	4b10      	ldr	r3, [pc, #64]	; (8004854 <prvCheckTasksWaitingTermination+0x50>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4618      	mov	r0, r3
 800481e:	f7fe fc72 	bl	8003106 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <prvCheckTasksWaitingTermination+0x54>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	3b01      	subs	r3, #1
 8004828:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <prvCheckTasksWaitingTermination+0x54>)
 800482a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <prvCheckTasksWaitingTermination+0x58>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3b01      	subs	r3, #1
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <prvCheckTasksWaitingTermination+0x58>)
 8004834:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004836:	f000 fec7 	bl	80055c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f810 	bl	8004860 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004840:	4b06      	ldr	r3, [pc, #24]	; (800485c <prvCheckTasksWaitingTermination+0x58>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e1      	bne.n	800480c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004848:	bf00      	nop
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000188 	.word	0x20000188
 8004858:	200001b4 	.word	0x200001b4
 800485c:	2000019c 	.word	0x2000019c

08004860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	4618      	mov	r0, r3
 800486e:	f001 f87d 	bl	800596c <vPortFree>
                vPortFree( pxTCB );
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f001 f87a 	bl	800596c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <prvResetNextTaskUnblockTime+0x30>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <prvResetNextTaskUnblockTime+0x34>)
 8004890:	f04f 32ff 	mov.w	r2, #4294967295
 8004894:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004896:	e005      	b.n	80048a4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <prvResetNextTaskUnblockTime+0x30>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <prvResetNextTaskUnblockTime+0x34>)
 80048a2:	6013      	str	r3, [r2, #0]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	2000016c 	.word	0x2000016c
 80048b4:	200001d4 	.word	0x200001d4

080048b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <xTaskGetSchedulerState+0x34>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80048c6:	2301      	movs	r3, #1
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	e008      	b.n	80048de <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <xTaskGetSchedulerState+0x38>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80048d4:	2302      	movs	r3, #2
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	e001      	b.n	80048de <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80048de:	687b      	ldr	r3, [r7, #4]
    }
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	200001c0 	.word	0x200001c0
 80048f0:	200001dc 	.word	0x200001dc

080048f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d05e      	beq.n	80049c8 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <xTaskPriorityInherit+0xe0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	429a      	cmp	r2, r3
 8004916:	d24e      	bcs.n	80049b6 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	db06      	blt.n	800492e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <xTaskPriorityInherit+0xe0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	f1c3 0205 	rsb	r2, r3, #5
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6959      	ldr	r1, [r3, #20]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <xTaskPriorityInherit+0xe4>)
 8004940:	4413      	add	r3, r2
 8004942:	4299      	cmp	r1, r3
 8004944:	d12f      	bne.n	80049a6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3304      	adds	r3, #4
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fbdb 	bl	8003106 <uxListRemove>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	2201      	movs	r2, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43da      	mvns	r2, r3
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <xTaskPriorityInherit+0xe8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4013      	ands	r3, r2
 8004968:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <xTaskPriorityInherit+0xe8>)
 800496a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <xTaskPriorityInherit+0xe0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	2201      	movs	r2, #1
 800497c:	409a      	lsls	r2, r3
 800497e:	4b17      	ldr	r3, [pc, #92]	; (80049dc <xTaskPriorityInherit+0xe8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <xTaskPriorityInherit+0xe8>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <xTaskPriorityInherit+0xe4>)
 8004996:	441a      	add	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe fb54 	bl	800304c <vListInsertEnd>
 80049a4:	e004      	b.n	80049b0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <xTaskPriorityInherit+0xe0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e008      	b.n	80049c8 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <xTaskPriorityInherit+0xe0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d201      	bcs.n	80049c8 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80049c8:	68fb      	ldr	r3, [r7, #12]
    }
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	200000dc 	.word	0x200000dc
 80049d8:	200000e0 	.word	0x200000e0
 80049dc:	200001bc 	.word	0x200001bc

080049e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d063      	beq.n	8004abe <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80049f6:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <xTaskPriorityDisinherit+0xe8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d00a      	beq.n	8004a16 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
    }
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60bb      	str	r3, [r7, #8]
    }
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a38:	1e5a      	subs	r2, r3, #1
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d039      	beq.n	8004abe <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d135      	bne.n	8004abe <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fb55 	bl	8003106 <uxListRemove>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43da      	mvns	r2, r3
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <xTaskPriorityDisinherit+0xec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4013      	ands	r3, r2
 8004a74:	4a15      	ldr	r2, [pc, #84]	; (8004acc <xTaskPriorityDisinherit+0xec>)
 8004a76:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f1c3 0205 	rsb	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <xTaskPriorityDisinherit+0xec>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	4a0c      	ldr	r2, [pc, #48]	; (8004acc <xTaskPriorityDisinherit+0xec>)
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <xTaskPriorityDisinherit+0xf0>)
 8004aac:	441a      	add	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fe fac9 	bl	800304c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004abe:	697b      	ldr	r3, [r7, #20]
    }
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	200000dc 	.word	0x200000dc
 8004acc:	200001bc 	.word	0x200001bc
 8004ad0:	200000e0 	.word	0x200000e0

08004ad4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d077      	beq.n	8004bdc <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60fb      	str	r3, [r7, #12]
    }
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d902      	bls.n	8004b1a <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e002      	b.n	8004b20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d058      	beq.n	8004bdc <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d153      	bne.n	8004bdc <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004b34:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d10a      	bne.n	8004b54 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60bb      	str	r3, [r7, #8]
    }
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db04      	blt.n	8004b72 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f1c3 0205 	rsb	r2, r3, #5
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	6959      	ldr	r1, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004b82:	4413      	add	r3, r2
 8004b84:	4299      	cmp	r1, r3
 8004b86:	d129      	bne.n	8004bdc <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe faba 	bl	8003106 <uxListRemove>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43da      	mvns	r2, r3
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004bac:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4a06      	ldr	r2, [pc, #24]	; (8004be8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004bce:	441a      	add	r2, r3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7fe fa38 	bl	800304c <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004bdc:	bf00      	nop
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200000dc 	.word	0x200000dc
 8004be8:	200000e0 	.word	0x200000e0
 8004bec:	200001bc 	.word	0x200001bc

08004bf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c02:	3201      	adds	r2, #1
 8004c04:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004c06:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c08:	681b      	ldr	r3, [r3, #0]
    }
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	200000dc 	.word	0x200000dc

08004c18 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004c22:	4b29      	ldr	r3, [pc, #164]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fa69 	bl	8003106 <uxListRemove>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c3a:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	2201      	movs	r2, #1
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43da      	mvns	r2, r3
 8004c48:	4b21      	ldr	r3, [pc, #132]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c50:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d10a      	bne.n	8004c70 <prvAddCurrentTaskToDelayedList+0x58>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c60:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	481a      	ldr	r0, [pc, #104]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c6a:	f7fe f9ef 	bl	800304c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c6e:	e026      	b.n	8004cbe <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c78:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d209      	bcs.n	8004c9c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c88:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fe f9fd 	bl	8003094 <vListInsert>
}
 8004c9a:	e010      	b.n	8004cbe <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fe f9f3 	bl	8003094 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004cae:	4b0c      	ldr	r3, [pc, #48]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d202      	bcs.n	8004cbe <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8004cb8:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6013      	str	r3, [r2, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200001b8 	.word	0x200001b8
 8004ccc:	200000dc 	.word	0x200000dc
 8004cd0:	200001bc 	.word	0x200001bc
 8004cd4:	200001a0 	.word	0x200001a0
 8004cd8:	20000170 	.word	0x20000170
 8004cdc:	2000016c 	.word	0x2000016c
 8004ce0:	200001d4 	.word	0x200001d4

08004ce4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004cee:	f000 fad5 	bl	800529c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004cf2:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <xTimerCreateTimerTask+0x54>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <xTimerCreateTimerTask+0x58>)
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	2302      	movs	r3, #2
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d08:	490d      	ldr	r1, [pc, #52]	; (8004d40 <xTimerCreateTimerTask+0x5c>)
 8004d0a:	480e      	ldr	r0, [pc, #56]	; (8004d44 <xTimerCreateTimerTask+0x60>)
 8004d0c:	f7ff f84e 	bl	8003dac <xTaskCreate>
 8004d10:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	603b      	str	r3, [r7, #0]
    }
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004d2e:	687b      	ldr	r3, [r7, #4]
    }
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000210 	.word	0x20000210
 8004d3c:	20000214 	.word	0x20000214
 8004d40:	08006470 	.word	0x08006470
 8004d44:	08004e7d 	.word	0x08004e7d

08004d48 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	623b      	str	r3, [r7, #32]
    }
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004d76:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <xTimerGenericCommand+0x98>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02a      	beq.n	8004dd4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	dc18      	bgt.n	8004dc2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d90:	f7ff fd92 	bl	80048b8 <xTaskGetSchedulerState>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d109      	bne.n	8004dae <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d9a:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <xTimerGenericCommand+0x98>)
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	f107 0114 	add.w	r1, r7, #20
 8004da2:	2300      	movs	r3, #0
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	f7fe fac3 	bl	8003330 <xQueueGenericSend>
 8004daa:	6278      	str	r0, [r7, #36]	; 0x24
 8004dac:	e012      	b.n	8004dd4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <xTimerGenericCommand+0x98>)
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	f107 0114 	add.w	r1, r7, #20
 8004db6:	2300      	movs	r3, #0
 8004db8:	2200      	movs	r2, #0
 8004dba:	f7fe fab9 	bl	8003330 <xQueueGenericSend>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004dc0:	e008      	b.n	8004dd4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <xTimerGenericCommand+0x98>)
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f107 0114 	add.w	r1, r7, #20
 8004dca:	2300      	movs	r3, #0
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	f7fe fbad 	bl	800352c <xQueueGenericSendFromISR>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3728      	adds	r7, #40	; 0x28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000210 	.word	0x20000210

08004de4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <prvProcessExpiredTimer+0x94>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f982 	bl	8003106 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d022      	beq.n	8004e56 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	18d1      	adds	r1, r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	6978      	ldr	r0, [r7, #20]
 8004e1e:	f000 f8d1 	bl	8004fc4 <prvInsertTimerInActiveList>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01f      	beq.n	8004e68 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	2100      	movs	r1, #0
 8004e32:	6978      	ldr	r0, [r7, #20]
 8004e34:	f7ff ff88 	bl	8004d48 <xTimerGenericCommand>
 8004e38:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d113      	bne.n	8004e68 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60fb      	str	r3, [r7, #12]
    }
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	4798      	blx	r3
    }
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000208 	.word	0x20000208

08004e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e84:	f107 0308 	add.w	r3, r7, #8
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f857 	bl	8004f3c <prvGetNextExpireTime>
 8004e8e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f803 	bl	8004ea0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e9a:	f000 f8d5 	bl	8005048 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e9e:	e7f1      	b.n	8004e84 <prvTimerTask+0x8>

08004ea0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004eaa:	f7ff f94b 	bl	8004144 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f866 	bl	8004f84 <prvSampleTimeNow>
 8004eb8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d130      	bne.n	8004f22 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <prvProcessTimerOrBlockTask+0x3c>
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d806      	bhi.n	8004edc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004ece:	f7ff f947 	bl	8004160 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff85 	bl	8004de4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004eda:	e024      	b.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <prvProcessTimerOrBlockTask+0x90>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <prvProcessTimerOrBlockTask+0x50>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <prvProcessTimerOrBlockTask+0x52>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <prvProcessTimerOrBlockTask+0x94>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f7fe ff1f 	bl	8003d44 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004f06:	f7ff f92b 	bl	8004160 <xTaskResumeAll>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <prvProcessTimerOrBlockTask+0x98>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
    }
 8004f20:	e001      	b.n	8004f26 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004f22:	f7ff f91d 	bl	8004160 <xTaskResumeAll>
    }
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2000020c 	.word	0x2000020c
 8004f34:	20000210 	.word	0x20000210
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <prvGetNextExpireTime+0x44>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <prvGetNextExpireTime+0x16>
 8004f4e:	2201      	movs	r2, #1
 8004f50:	e000      	b.n	8004f54 <prvGetNextExpireTime+0x18>
 8004f52:	2200      	movs	r2, #0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <prvGetNextExpireTime+0x44>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	e001      	b.n	8004f70 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004f70:	68fb      	ldr	r3, [r7, #12]
    }
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000208 	.word	0x20000208

08004f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004f8c:	f7ff f984 	bl	8004298 <xTaskGetTickCount>
 8004f90:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <prvSampleTimeNow+0x3c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d205      	bcs.n	8004fa8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f9c:	f000 f91a 	bl	80051d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e002      	b.n	8004fae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004fae:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvSampleTimeNow+0x3c>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
    }
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000218 	.word	0x20000218

08004fc4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d812      	bhi.n	8005010 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	1ad2      	subs	r2, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e01b      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <prvInsertTimerInActiveList+0x7c>)
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3304      	adds	r3, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f7fe f843 	bl	8003094 <vListInsert>
 800500e:	e012      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d206      	bcs.n	8005026 <prvInsertTimerInActiveList+0x62>
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e007      	b.n	8005036 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <prvInsertTimerInActiveList+0x80>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe f82f 	bl	8003094 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005036:	697b      	ldr	r3, [r7, #20]
    }
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	2000020c 	.word	0x2000020c
 8005044:	20000208 	.word	0x20000208

08005048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	; 0x30
 800504c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800504e:	e0ae      	b.n	80051ae <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f2c0 80aa 	blt.w	80051ac <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe f84c 	bl	8003106 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff87 	bl	8004f84 <prvSampleTimeNow>
 8005076:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b09      	cmp	r3, #9
 800507c:	f200 8097 	bhi.w	80051ae <prvProcessReceivedCommands+0x166>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <prvProcessReceivedCommands+0x40>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b1 	.word	0x080050b1
 8005094:	08005125 	.word	0x08005125
 8005098:	08005139 	.word	0x08005139
 800509c:	08005183 	.word	0x08005183
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050b1 	.word	0x080050b1
 80050a8:	08005125 	.word	0x08005125
 80050ac:	08005139 	.word	0x08005139
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	18d1      	adds	r1, r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d0:	f7ff ff78 	bl	8004fc4 <prvInsertTimerInActiveList>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d069      	beq.n	80051ae <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05e      	beq.n	80051ae <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	441a      	add	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	2100      	movs	r1, #0
 8005100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005102:	f7ff fe21 	bl	8004d48 <xTimerGenericCommand>
 8005106:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d14f      	bne.n	80051ae <prvProcessReceivedCommands+0x166>
        __asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61bb      	str	r3, [r7, #24]
    }
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005136:	e03a      	b.n	80051ae <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	b2da      	uxtb	r2, r3
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	617b      	str	r3, [r7, #20]
    }
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	18d1      	adds	r1, r2, r3
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	6a3a      	ldr	r2, [r7, #32]
 800517a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800517c:	f7ff ff22 	bl	8004fc4 <prvInsertTimerInActiveList>
                        break;
 8005180:	e015      	b.n	80051ae <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005192:	f000 fbeb 	bl	800596c <vPortFree>
 8005196:	e00a      	b.n	80051ae <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80051aa:	e000      	b.n	80051ae <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80051ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <prvProcessReceivedCommands+0x188>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f107 0108 	add.w	r1, r7, #8
 80051b6:	2200      	movs	r2, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe fa61 	bl	8003680 <xQueueReceive>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f47f af45 	bne.w	8005050 <prvProcessReceivedCommands+0x8>
        }
    }
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20000210 	.word	0x20000210

080051d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051da:	e048      	b.n	800526e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <prvSwitchTimerLists+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <prvSwitchTimerLists+0xc0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd ff86 	bl	8003106 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02e      	beq.n	800526e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90e      	bls.n	8005240 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <prvSwitchTimerLists+0xc0>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fd ff2b 	bl	8003094 <vListInsert>
 800523e:	e016      	b.n	800526e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005240:	2300      	movs	r3, #0
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	2100      	movs	r1, #0
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff fd7c 	bl	8004d48 <xTimerGenericCommand>
 8005250:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	603b      	str	r3, [r7, #0]
    }
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvSwitchTimerLists+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1b1      	bne.n	80051dc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <prvSwitchTimerLists+0xc0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <prvSwitchTimerLists+0xc4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a04      	ldr	r2, [pc, #16]	; (8005294 <prvSwitchTimerLists+0xc0>)
 8005284:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005286:	4a04      	ldr	r2, [pc, #16]	; (8005298 <prvSwitchTimerLists+0xc4>)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6013      	str	r3, [r2, #0]
    }
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000208 	.word	0x20000208
 8005298:	2000020c 	.word	0x2000020c

0800529c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80052a0:	f000 f962 	bl	8005568 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <prvCheckForValidListAndQueue+0x54>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11d      	bne.n	80052e8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80052ac:	4811      	ldr	r0, [pc, #68]	; (80052f4 <prvCheckForValidListAndQueue+0x58>)
 80052ae:	f7fd fea0 	bl	8002ff2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80052b2:	4811      	ldr	r0, [pc, #68]	; (80052f8 <prvCheckForValidListAndQueue+0x5c>)
 80052b4:	f7fd fe9d 	bl	8002ff2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <prvCheckForValidListAndQueue+0x60>)
 80052ba:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <prvCheckForValidListAndQueue+0x58>)
 80052bc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <prvCheckForValidListAndQueue+0x64>)
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <prvCheckForValidListAndQueue+0x5c>)
 80052c2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80052c4:	2200      	movs	r2, #0
 80052c6:	210c      	movs	r1, #12
 80052c8:	200a      	movs	r0, #10
 80052ca:	f7fd ffaf 	bl	800322c <xQueueGenericCreate>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a07      	ldr	r2, [pc, #28]	; (80052f0 <prvCheckForValidListAndQueue+0x54>)
 80052d2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <prvCheckForValidListAndQueue+0x54>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <prvCheckForValidListAndQueue+0x54>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4908      	ldr	r1, [pc, #32]	; (8005304 <prvCheckForValidListAndQueue+0x68>)
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fd04 	bl	8003cf0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052e8:	f000 f96e 	bl	80055c8 <vPortExitCritical>
    }
 80052ec:	bf00      	nop
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000210 	.word	0x20000210
 80052f4:	200001e0 	.word	0x200001e0
 80052f8:	200001f4 	.word	0x200001f4
 80052fc:	20000208 	.word	0x20000208
 8005300:	2000020c 	.word	0x2000020c
 8005304:	08006478 	.word	0x08006478

08005308 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b04      	subs	r3, #4
 8005318:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005320:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b04      	subs	r3, #4
 8005336:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005338:	4a0c      	ldr	r2, [pc, #48]	; (800536c <pxPortInitialiseStack+0x64>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b14      	subs	r3, #20
 8005342:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3b04      	subs	r3, #4
 800534e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f06f 0202 	mvn.w	r2, #2
 8005356:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3b20      	subs	r3, #32
 800535c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800535e:	68fb      	ldr	r3, [r7, #12]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	08005371 	.word	0x08005371

08005370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800537a:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <prvTaskExitError+0x54>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d00a      	beq.n	800539a <prvTaskExitError+0x2a>
        __asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	60fb      	str	r3, [r7, #12]
    }
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <prvTaskExitError+0x28>
        __asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	60bb      	str	r3, [r7, #8]
    }
 80053ac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80053ae:	bf00      	nop
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0fc      	beq.n	80053b0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	20000010 	.word	0x20000010
	...

080053d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <pxCurrentTCBConst2>)
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053da:	f380 8809 	msr	PSP, r0
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	4770      	bx	lr
 80053ec:	f3af 8000 	nop.w

080053f0 <pxCurrentTCBConst2>:
 80053f0:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053f8:	4808      	ldr	r0, [pc, #32]	; (800541c <prvPortStartFirstTask+0x24>)
 80053fa:	6800      	ldr	r0, [r0, #0]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	f380 8808 	msr	MSP, r0
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8814 	msr	CONTROL, r0
 800540a:	b662      	cpsie	i
 800540c:	b661      	cpsie	f
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	df00      	svc	0
 8005418:	bf00      	nop
 800541a:	0000      	.short	0x0000
 800541c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop

08005424 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800542a:	4b46      	ldr	r3, [pc, #280]	; (8005544 <xPortStartScheduler+0x120>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a46      	ldr	r2, [pc, #280]	; (8005548 <xPortStartScheduler+0x124>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10a      	bne.n	800544a <xPortStartScheduler+0x26>
        __asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	613b      	str	r3, [r7, #16]
    }
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800544a:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <xPortStartScheduler+0x120>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a3f      	ldr	r2, [pc, #252]	; (800554c <xPortStartScheduler+0x128>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10a      	bne.n	800546a <xPortStartScheduler+0x46>
        __asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60fb      	str	r3, [r7, #12]
    }
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <xPortStartScheduler+0x12c>)
 800546c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	22ff      	movs	r2, #255	; 0xff
 800547a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4b31      	ldr	r3, [pc, #196]	; (8005554 <xPortStartScheduler+0x130>)
 8005490:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005492:	4b31      	ldr	r3, [pc, #196]	; (8005558 <xPortStartScheduler+0x134>)
 8005494:	2207      	movs	r2, #7
 8005496:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005498:	e009      	b.n	80054ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800549a:	4b2f      	ldr	r3, [pc, #188]	; (8005558 <xPortStartScheduler+0x134>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3b01      	subs	r3, #1
 80054a0:	4a2d      	ldr	r2, [pc, #180]	; (8005558 <xPortStartScheduler+0x134>)
 80054a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d0ef      	beq.n	800549a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <xPortStartScheduler+0x134>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1c3 0307 	rsb	r3, r3, #7
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d00a      	beq.n	80054dc <xPortStartScheduler+0xb8>
        __asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
    }
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054dc:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <xPortStartScheduler+0x134>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <xPortStartScheduler+0x134>)
 80054e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <xPortStartScheduler+0x134>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <xPortStartScheduler+0x134>)
 80054f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80054fa:	4b18      	ldr	r3, [pc, #96]	; (800555c <xPortStartScheduler+0x138>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a17      	ldr	r2, [pc, #92]	; (800555c <xPortStartScheduler+0x138>)
 8005500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005504:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <xPortStartScheduler+0x138>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a14      	ldr	r2, [pc, #80]	; (800555c <xPortStartScheduler+0x138>)
 800550c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005510:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005512:	f000 f8db 	bl	80056cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <xPortStartScheduler+0x13c>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800551c:	f000 f8fa 	bl	8005714 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <xPortStartScheduler+0x140>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a0f      	ldr	r2, [pc, #60]	; (8005564 <xPortStartScheduler+0x140>)
 8005526:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800552a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800552c:	f7ff ff64 	bl	80053f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005530:	f7fe ff7a 	bl	8004428 <vTaskSwitchContext>
    prvTaskExitError();
 8005534:	f7ff ff1c 	bl	8005370 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000ed00 	.word	0xe000ed00
 8005548:	410fc271 	.word	0x410fc271
 800554c:	410fc270 	.word	0x410fc270
 8005550:	e000e400 	.word	0xe000e400
 8005554:	2000021c 	.word	0x2000021c
 8005558:	20000220 	.word	0x20000220
 800555c:	e000ed20 	.word	0xe000ed20
 8005560:	20000010 	.word	0x20000010
 8005564:	e000ef34 	.word	0xe000ef34

08005568 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
        __asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	607b      	str	r3, [r7, #4]
    }
 8005580:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <vPortEnterCritical+0x58>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	4a0d      	ldr	r2, [pc, #52]	; (80055c0 <vPortEnterCritical+0x58>)
 800558a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <vPortEnterCritical+0x58>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10f      	bne.n	80055b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <vPortEnterCritical+0x5c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	603b      	str	r3, [r7, #0]
    }
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vPortEnterCritical+0x4a>
    }
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000010 	.word	0x20000010
 80055c4:	e000ed04 	.word	0xe000ed04

080055c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <vPortExitCritical+0x50>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10a      	bne.n	80055ec <vPortExitCritical+0x24>
        __asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	607b      	str	r3, [r7, #4]
    }
 80055e8:	bf00      	nop
 80055ea:	e7fe      	b.n	80055ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <vPortExitCritical+0x50>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <vPortExitCritical+0x50>)
 80055f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <vPortExitCritical+0x50>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d105      	bne.n	800560a <vPortExitCritical+0x42>
 80055fe:	2300      	movs	r3, #0
 8005600:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f383 8811 	msr	BASEPRI, r3
    }
 8005608:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000010 	.word	0x20000010
 800561c:	00000000 	.word	0x00000000

08005620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005620:	f3ef 8009 	mrs	r0, PSP
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <pxCurrentTCBConst>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f01e 0f10 	tst.w	lr, #16
 8005630:	bf08      	it	eq
 8005632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	6010      	str	r0, [r2, #0]
 800563c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005644:	f380 8811 	msr	BASEPRI, r0
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f7fe feea 	bl	8004428 <vTaskSwitchContext>
 8005654:	f04f 0000 	mov.w	r0, #0
 8005658:	f380 8811 	msr	BASEPRI, r0
 800565c:	bc09      	pop	{r0, r3}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005666:	f01e 0f10 	tst.w	lr, #16
 800566a:	bf08      	it	eq
 800566c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005670:	f380 8809 	msr	PSP, r0
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst>:
 8005680:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
        __asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
    }
 80056a0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f7fe fe09 	bl	80042b8 <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <SysTick_Handler+0x40>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
    }
 80056be:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <vPortSetupTimerInterrupt+0x38>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <vPortSetupTimerInterrupt+0x3c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a0a      	ldr	r2, [pc, #40]	; (800570c <vPortSetupTimerInterrupt+0x40>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	4a09      	ldr	r2, [pc, #36]	; (8005710 <vPortSetupTimerInterrupt+0x44>)
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ee:	4b04      	ldr	r3, [pc, #16]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056f0:	2207      	movs	r2, #7
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	e000e010 	.word	0xe000e010
 8005704:	e000e018 	.word	0xe000e018
 8005708:	20000008 	.word	0x20000008
 800570c:	10624dd3 	.word	0x10624dd3
 8005710:	e000e014 	.word	0xe000e014

08005714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005724 <vPortEnableVFP+0x10>
 8005718:	6801      	ldr	r1, [r0, #0]
 800571a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800571e:	6001      	str	r1, [r0, #0]
 8005720:	4770      	bx	lr
 8005722:	0000      	.short	0x0000
 8005724:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop

0800572c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005732:	f3ef 8305 	mrs	r3, IPSR
 8005736:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b0f      	cmp	r3, #15
 800573c:	d914      	bls.n	8005768 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <vPortValidateInterruptPriority+0x70>)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005748:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <vPortValidateInterruptPriority+0x74>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	7afa      	ldrb	r2, [r7, #11]
 800574e:	429a      	cmp	r2, r3
 8005750:	d20a      	bcs.n	8005768 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	607b      	str	r3, [r7, #4]
    }
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005768:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <vPortValidateInterruptPriority+0x78>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <vPortValidateInterruptPriority+0x7c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d90a      	bls.n	800578e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	603b      	str	r3, [r7, #0]
    }
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <vPortValidateInterruptPriority+0x60>
    }
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	e000e3f0 	.word	0xe000e3f0
 80057a0:	2000021c 	.word	0x2000021c
 80057a4:	e000ed0c 	.word	0xe000ed0c
 80057a8:	20000220 	.word	0x20000220

080057ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80057b8:	f7fe fcc4 	bl	8004144 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80057bc:	4b65      	ldr	r3, [pc, #404]	; (8005954 <pvPortMalloc+0x1a8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80057c4:	f000 f934 	bl	8005a30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057c8:	4b63      	ldr	r3, [pc, #396]	; (8005958 <pvPortMalloc+0x1ac>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f040 80a7 	bne.w	8005924 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02d      	beq.n	8005838 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80057dc:	2208      	movs	r2, #8
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d227      	bcs.n	8005838 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80057e8:	2208      	movs	r2, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d021      	beq.n	800583e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d214      	bcs.n	8005832 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f023 0307 	bic.w	r3, r3, #7
 800580e:	3308      	adds	r3, #8
 8005810:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <pvPortMalloc+0x92>
        __asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	617b      	str	r3, [r7, #20]
    }
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005836:	e002      	b.n	800583e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	e000      	b.n	8005840 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800583e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d06e      	beq.n	8005924 <pvPortMalloc+0x178>
 8005846:	4b45      	ldr	r3, [pc, #276]	; (800595c <pvPortMalloc+0x1b0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	429a      	cmp	r2, r3
 800584e:	d869      	bhi.n	8005924 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005850:	4b43      	ldr	r3, [pc, #268]	; (8005960 <pvPortMalloc+0x1b4>)
 8005852:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005854:	4b42      	ldr	r3, [pc, #264]	; (8005960 <pvPortMalloc+0x1b4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800585a:	e004      	b.n	8005866 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d903      	bls.n	8005878 <pvPortMalloc+0xcc>
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f1      	bne.n	800585c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <pvPortMalloc+0x1a8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	429a      	cmp	r2, r3
 8005880:	d050      	beq.n	8005924 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2208      	movs	r2, #8
 8005888:	4413      	add	r3, r2
 800588a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	2308      	movs	r3, #8
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d91f      	bls.n	80058e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <pvPortMalloc+0x120>
        __asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	613b      	str	r3, [r7, #16]
    }
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058de:	69b8      	ldr	r0, [r7, #24]
 80058e0:	f000 f908 	bl	8005af4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <pvPortMalloc+0x1b0>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	4a1b      	ldr	r2, [pc, #108]	; (800595c <pvPortMalloc+0x1b0>)
 80058f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <pvPortMalloc+0x1b0>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <pvPortMalloc+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d203      	bcs.n	8005906 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <pvPortMalloc+0x1b0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a18      	ldr	r2, [pc, #96]	; (8005964 <pvPortMalloc+0x1b8>)
 8005904:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <pvPortMalloc+0x1ac>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	431a      	orrs	r2, r3
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <pvPortMalloc+0x1bc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3301      	adds	r3, #1
 8005920:	4a11      	ldr	r2, [pc, #68]	; (8005968 <pvPortMalloc+0x1bc>)
 8005922:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005924:	f7fe fc1c 	bl	8004160 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <pvPortMalloc+0x19c>
        __asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
    }
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <pvPortMalloc+0x19a>
    return pvReturn;
 8005948:	69fb      	ldr	r3, [r7, #28]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3728      	adds	r7, #40	; 0x28
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20012e2c 	.word	0x20012e2c
 8005958:	20012e40 	.word	0x20012e40
 800595c:	20012e30 	.word	0x20012e30
 8005960:	20012e24 	.word	0x20012e24
 8005964:	20012e34 	.word	0x20012e34
 8005968:	20012e38 	.word	0x20012e38

0800596c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04d      	beq.n	8005a1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800597e:	2308      	movs	r3, #8
 8005980:	425b      	negs	r3, r3
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <vPortFree+0xb8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4013      	ands	r3, r2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <vPortFree+0x44>
        __asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
    }
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <vPortFree+0x62>
        __asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60bb      	str	r3, [r7, #8]
    }
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	4b14      	ldr	r3, [pc, #80]	; (8005a24 <vPortFree+0xb8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01e      	beq.n	8005a1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11a      	bne.n	8005a1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <vPortFree+0xb8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	401a      	ands	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80059f4:	f7fe fba6 	bl	8004144 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <vPortFree+0xbc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4413      	add	r3, r2
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <vPortFree+0xbc>)
 8005a04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a06:	6938      	ldr	r0, [r7, #16]
 8005a08:	f000 f874 	bl	8005af4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <vPortFree+0xc0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <vPortFree+0xc0>)
 8005a14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a16:	f7fe fba3 	bl	8004160 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20012e40 	.word	0x20012e40
 8005a28:	20012e30 	.word	0x20012e30
 8005a2c:	20012e3c 	.word	0x20012e3c

08005a30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005a3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005a3c:	4b27      	ldr	r3, [pc, #156]	; (8005adc <prvHeapInit+0xac>)
 8005a3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3307      	adds	r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0307 	bic.w	r3, r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <prvHeapInit+0xac>)
 8005a60:	4413      	add	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a68:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <prvHeapInit+0xb0>)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <prvHeapInit+0xb0>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4413      	add	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <prvHeapInit+0xb4>)
 8005a90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <prvHeapInit+0xb4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <prvHeapInit+0xb4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	1ad2      	subs	r2, r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ab0:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <prvHeapInit+0xb4>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <prvHeapInit+0xb8>)
 8005abe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <prvHeapInit+0xbc>)
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <prvHeapInit+0xc0>)
 8005aca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ace:	601a      	str	r2, [r3, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	20000224 	.word	0x20000224
 8005ae0:	20012e24 	.word	0x20012e24
 8005ae4:	20012e2c 	.word	0x20012e2c
 8005ae8:	20012e34 	.word	0x20012e34
 8005aec:	20012e30 	.word	0x20012e30
 8005af0:	20012e40 	.word	0x20012e40

08005af4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005afc:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <prvInsertBlockIntoFreeList+0xac>)
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e002      	b.n	8005b08 <prvInsertBlockIntoFreeList+0x14>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d8f7      	bhi.n	8005b02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d108      	bne.n	8005b36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d118      	bne.n	8005b7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d00d      	beq.n	8005b72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	441a      	add	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e008      	b.n	8005b84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <prvInsertBlockIntoFreeList+0xb0>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e003      	b.n	8005b84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d002      	beq.n	8005b92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20012e24 	.word	0x20012e24
 8005ba4:	20012e2c 	.word	0x20012e2c

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4e0d      	ldr	r6, [pc, #52]	; (8005be0 <__libc_init_array+0x38>)
 8005bac:	4c0d      	ldr	r4, [pc, #52]	; (8005be4 <__libc_init_array+0x3c>)
 8005bae:	1ba4      	subs	r4, r4, r6
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	4e0b      	ldr	r6, [pc, #44]	; (8005be8 <__libc_init_array+0x40>)
 8005bba:	4c0c      	ldr	r4, [pc, #48]	; (8005bec <__libc_init_array+0x44>)
 8005bbc:	f000 fc36 	bl	800642c <_init>
 8005bc0:	1ba4      	subs	r4, r4, r6
 8005bc2:	10a4      	asrs	r4, r4, #2
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	42a5      	cmp	r5, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd0:	4798      	blx	r3
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bda:	4798      	blx	r3
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	080064d4 	.word	0x080064d4
 8005be4:	080064d4 	.word	0x080064d4
 8005be8:	080064d4 	.word	0x080064d4
 8005bec:	080064d8 	.word	0x080064d8

08005bf0 <memcpy>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	1e43      	subs	r3, r0, #1
 8005bf4:	440a      	add	r2, r1
 8005bf6:	4291      	cmp	r1, r2
 8005bf8:	d100      	bne.n	8005bfc <memcpy+0xc>
 8005bfa:	bd10      	pop	{r4, pc}
 8005bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c04:	e7f7      	b.n	8005bf6 <memcpy+0x6>

08005c06 <memset>:
 8005c06:	4402      	add	r2, r0
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d100      	bne.n	8005c10 <memset+0xa>
 8005c0e:	4770      	bx	lr
 8005c10:	f803 1b01 	strb.w	r1, [r3], #1
 8005c14:	e7f9      	b.n	8005c0a <memset+0x4>
	...

08005c18 <siprintf>:
 8005c18:	b40e      	push	{r1, r2, r3}
 8005c1a:	b500      	push	{lr}
 8005c1c:	b09c      	sub	sp, #112	; 0x70
 8005c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c20:	9002      	str	r0, [sp, #8]
 8005c22:	9006      	str	r0, [sp, #24]
 8005c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c28:	4809      	ldr	r0, [pc, #36]	; (8005c50 <siprintf+0x38>)
 8005c2a:	9107      	str	r1, [sp, #28]
 8005c2c:	9104      	str	r1, [sp, #16]
 8005c2e:	4909      	ldr	r1, [pc, #36]	; (8005c54 <siprintf+0x3c>)
 8005c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c34:	9105      	str	r1, [sp, #20]
 8005c36:	6800      	ldr	r0, [r0, #0]
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	a902      	add	r1, sp, #8
 8005c3c:	f000 f866 	bl	8005d0c <_svfiprintf_r>
 8005c40:	9b02      	ldr	r3, [sp, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	b01c      	add	sp, #112	; 0x70
 8005c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c4c:	b003      	add	sp, #12
 8005c4e:	4770      	bx	lr
 8005c50:	20000014 	.word	0x20000014
 8005c54:	ffff0208 	.word	0xffff0208

08005c58 <__ssputs_r>:
 8005c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	688e      	ldr	r6, [r1, #8]
 8005c5e:	429e      	cmp	r6, r3
 8005c60:	4682      	mov	sl, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	4690      	mov	r8, r2
 8005c66:	4699      	mov	r9, r3
 8005c68:	d837      	bhi.n	8005cda <__ssputs_r+0x82>
 8005c6a:	898a      	ldrh	r2, [r1, #12]
 8005c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c70:	d031      	beq.n	8005cd6 <__ssputs_r+0x7e>
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	6909      	ldr	r1, [r1, #16]
 8005c76:	1a6f      	subs	r7, r5, r1
 8005c78:	6965      	ldr	r5, [r4, #20]
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c80:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c84:	f109 0301 	add.w	r3, r9, #1
 8005c88:	443b      	add	r3, r7
 8005c8a:	429d      	cmp	r5, r3
 8005c8c:	bf38      	it	cc
 8005c8e:	461d      	movcc	r5, r3
 8005c90:	0553      	lsls	r3, r2, #21
 8005c92:	d530      	bpl.n	8005cf6 <__ssputs_r+0x9e>
 8005c94:	4629      	mov	r1, r5
 8005c96:	f000 fb21 	bl	80062dc <_malloc_r>
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	b950      	cbnz	r0, 8005cb4 <__ssputs_r+0x5c>
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	f8ca 3000 	str.w	r3, [sl]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb4:	463a      	mov	r2, r7
 8005cb6:	6921      	ldr	r1, [r4, #16]
 8005cb8:	f7ff ff9a 	bl	8005bf0 <memcpy>
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc6:	81a3      	strh	r3, [r4, #12]
 8005cc8:	6126      	str	r6, [r4, #16]
 8005cca:	6165      	str	r5, [r4, #20]
 8005ccc:	443e      	add	r6, r7
 8005cce:	1bed      	subs	r5, r5, r7
 8005cd0:	6026      	str	r6, [r4, #0]
 8005cd2:	60a5      	str	r5, [r4, #8]
 8005cd4:	464e      	mov	r6, r9
 8005cd6:	454e      	cmp	r6, r9
 8005cd8:	d900      	bls.n	8005cdc <__ssputs_r+0x84>
 8005cda:	464e      	mov	r6, r9
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4641      	mov	r1, r8
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	f000 fa93 	bl	800620c <memmove>
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	1b9b      	subs	r3, r3, r6
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	441e      	add	r6, r3
 8005cf0:	6026      	str	r6, [r4, #0]
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7dc      	b.n	8005cb0 <__ssputs_r+0x58>
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	f000 fb4a 	bl	8006390 <_realloc_r>
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d1e2      	bne.n	8005cc8 <__ssputs_r+0x70>
 8005d02:	6921      	ldr	r1, [r4, #16]
 8005d04:	4650      	mov	r0, sl
 8005d06:	f000 fa9b 	bl	8006240 <_free_r>
 8005d0a:	e7c8      	b.n	8005c9e <__ssputs_r+0x46>

08005d0c <_svfiprintf_r>:
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	461d      	mov	r5, r3
 8005d12:	898b      	ldrh	r3, [r1, #12]
 8005d14:	061f      	lsls	r7, r3, #24
 8005d16:	b09d      	sub	sp, #116	; 0x74
 8005d18:	4680      	mov	r8, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	d50f      	bpl.n	8005d40 <_svfiprintf_r+0x34>
 8005d20:	690b      	ldr	r3, [r1, #16]
 8005d22:	b96b      	cbnz	r3, 8005d40 <_svfiprintf_r+0x34>
 8005d24:	2140      	movs	r1, #64	; 0x40
 8005d26:	f000 fad9 	bl	80062dc <_malloc_r>
 8005d2a:	6020      	str	r0, [r4, #0]
 8005d2c:	6120      	str	r0, [r4, #16]
 8005d2e:	b928      	cbnz	r0, 8005d3c <_svfiprintf_r+0x30>
 8005d30:	230c      	movs	r3, #12
 8005d32:	f8c8 3000 	str.w	r3, [r8]
 8005d36:	f04f 30ff 	mov.w	r0, #4294967295
 8005d3a:	e0c8      	b.n	8005ece <_svfiprintf_r+0x1c2>
 8005d3c:	2340      	movs	r3, #64	; 0x40
 8005d3e:	6163      	str	r3, [r4, #20]
 8005d40:	2300      	movs	r3, #0
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	2320      	movs	r3, #32
 8005d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d4a:	2330      	movs	r3, #48	; 0x30
 8005d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d50:	9503      	str	r5, [sp, #12]
 8005d52:	f04f 0b01 	mov.w	fp, #1
 8005d56:	4637      	mov	r7, r6
 8005d58:	463d      	mov	r5, r7
 8005d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d5e:	b10b      	cbz	r3, 8005d64 <_svfiprintf_r+0x58>
 8005d60:	2b25      	cmp	r3, #37	; 0x25
 8005d62:	d13e      	bne.n	8005de2 <_svfiprintf_r+0xd6>
 8005d64:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d68:	d00b      	beq.n	8005d82 <_svfiprintf_r+0x76>
 8005d6a:	4653      	mov	r3, sl
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4640      	mov	r0, r8
 8005d72:	f7ff ff71 	bl	8005c58 <__ssputs_r>
 8005d76:	3001      	adds	r0, #1
 8005d78:	f000 80a4 	beq.w	8005ec4 <_svfiprintf_r+0x1b8>
 8005d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7e:	4453      	add	r3, sl
 8005d80:	9309      	str	r3, [sp, #36]	; 0x24
 8005d82:	783b      	ldrb	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 809d 	beq.w	8005ec4 <_svfiprintf_r+0x1b8>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	9307      	str	r3, [sp, #28]
 8005d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d9e:	462f      	mov	r7, r5
 8005da0:	2205      	movs	r2, #5
 8005da2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005da6:	4850      	ldr	r0, [pc, #320]	; (8005ee8 <_svfiprintf_r+0x1dc>)
 8005da8:	f7fa fa1a 	bl	80001e0 <memchr>
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	b9d0      	cbnz	r0, 8005de6 <_svfiprintf_r+0xda>
 8005db0:	06d9      	lsls	r1, r3, #27
 8005db2:	bf44      	itt	mi
 8005db4:	2220      	movmi	r2, #32
 8005db6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dba:	071a      	lsls	r2, r3, #28
 8005dbc:	bf44      	itt	mi
 8005dbe:	222b      	movmi	r2, #43	; 0x2b
 8005dc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dc4:	782a      	ldrb	r2, [r5, #0]
 8005dc6:	2a2a      	cmp	r2, #42	; 0x2a
 8005dc8:	d015      	beq.n	8005df6 <_svfiprintf_r+0xea>
 8005dca:	9a07      	ldr	r2, [sp, #28]
 8005dcc:	462f      	mov	r7, r5
 8005dce:	2000      	movs	r0, #0
 8005dd0:	250a      	movs	r5, #10
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd8:	3b30      	subs	r3, #48	; 0x30
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d94d      	bls.n	8005e7a <_svfiprintf_r+0x16e>
 8005dde:	b1b8      	cbz	r0, 8005e10 <_svfiprintf_r+0x104>
 8005de0:	e00f      	b.n	8005e02 <_svfiprintf_r+0xf6>
 8005de2:	462f      	mov	r7, r5
 8005de4:	e7b8      	b.n	8005d58 <_svfiprintf_r+0x4c>
 8005de6:	4a40      	ldr	r2, [pc, #256]	; (8005ee8 <_svfiprintf_r+0x1dc>)
 8005de8:	1a80      	subs	r0, r0, r2
 8005dea:	fa0b f000 	lsl.w	r0, fp, r0
 8005dee:	4318      	orrs	r0, r3
 8005df0:	9004      	str	r0, [sp, #16]
 8005df2:	463d      	mov	r5, r7
 8005df4:	e7d3      	b.n	8005d9e <_svfiprintf_r+0x92>
 8005df6:	9a03      	ldr	r2, [sp, #12]
 8005df8:	1d11      	adds	r1, r2, #4
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	9103      	str	r1, [sp, #12]
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	db01      	blt.n	8005e06 <_svfiprintf_r+0xfa>
 8005e02:	9207      	str	r2, [sp, #28]
 8005e04:	e004      	b.n	8005e10 <_svfiprintf_r+0x104>
 8005e06:	4252      	negs	r2, r2
 8005e08:	f043 0302 	orr.w	r3, r3, #2
 8005e0c:	9207      	str	r2, [sp, #28]
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	783b      	ldrb	r3, [r7, #0]
 8005e12:	2b2e      	cmp	r3, #46	; 0x2e
 8005e14:	d10c      	bne.n	8005e30 <_svfiprintf_r+0x124>
 8005e16:	787b      	ldrb	r3, [r7, #1]
 8005e18:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1a:	d133      	bne.n	8005e84 <_svfiprintf_r+0x178>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	1d1a      	adds	r2, r3, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	9203      	str	r2, [sp, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	bfb8      	it	lt
 8005e28:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e2c:	3702      	adds	r7, #2
 8005e2e:	9305      	str	r3, [sp, #20]
 8005e30:	4d2e      	ldr	r5, [pc, #184]	; (8005eec <_svfiprintf_r+0x1e0>)
 8005e32:	7839      	ldrb	r1, [r7, #0]
 8005e34:	2203      	movs	r2, #3
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa f9d2 	bl	80001e0 <memchr>
 8005e3c:	b138      	cbz	r0, 8005e4e <_svfiprintf_r+0x142>
 8005e3e:	2340      	movs	r3, #64	; 0x40
 8005e40:	1b40      	subs	r0, r0, r5
 8005e42:	fa03 f000 	lsl.w	r0, r3, r0
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	4303      	orrs	r3, r0
 8005e4a:	3701      	adds	r7, #1
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	7839      	ldrb	r1, [r7, #0]
 8005e50:	4827      	ldr	r0, [pc, #156]	; (8005ef0 <_svfiprintf_r+0x1e4>)
 8005e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e56:	2206      	movs	r2, #6
 8005e58:	1c7e      	adds	r6, r7, #1
 8005e5a:	f7fa f9c1 	bl	80001e0 <memchr>
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d038      	beq.n	8005ed4 <_svfiprintf_r+0x1c8>
 8005e62:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <_svfiprintf_r+0x1e8>)
 8005e64:	bb13      	cbnz	r3, 8005eac <_svfiprintf_r+0x1a0>
 8005e66:	9b03      	ldr	r3, [sp, #12]
 8005e68:	3307      	adds	r3, #7
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	3308      	adds	r3, #8
 8005e70:	9303      	str	r3, [sp, #12]
 8005e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e74:	444b      	add	r3, r9
 8005e76:	9309      	str	r3, [sp, #36]	; 0x24
 8005e78:	e76d      	b.n	8005d56 <_svfiprintf_r+0x4a>
 8005e7a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e7e:	2001      	movs	r0, #1
 8005e80:	460f      	mov	r7, r1
 8005e82:	e7a6      	b.n	8005dd2 <_svfiprintf_r+0xc6>
 8005e84:	2300      	movs	r3, #0
 8005e86:	3701      	adds	r7, #1
 8005e88:	9305      	str	r3, [sp, #20]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	250a      	movs	r5, #10
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e94:	3a30      	subs	r2, #48	; 0x30
 8005e96:	2a09      	cmp	r2, #9
 8005e98:	d903      	bls.n	8005ea2 <_svfiprintf_r+0x196>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0c8      	beq.n	8005e30 <_svfiprintf_r+0x124>
 8005e9e:	9105      	str	r1, [sp, #20]
 8005ea0:	e7c6      	b.n	8005e30 <_svfiprintf_r+0x124>
 8005ea2:	fb05 2101 	mla	r1, r5, r1, r2
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	e7f0      	b.n	8005e8e <_svfiprintf_r+0x182>
 8005eac:	ab03      	add	r3, sp, #12
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <_svfiprintf_r+0x1ec>)
 8005eb4:	a904      	add	r1, sp, #16
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f3af 8000 	nop.w
 8005ebc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ec0:	4681      	mov	r9, r0
 8005ec2:	d1d6      	bne.n	8005e72 <_svfiprintf_r+0x166>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	065b      	lsls	r3, r3, #25
 8005ec8:	f53f af35 	bmi.w	8005d36 <_svfiprintf_r+0x2a>
 8005ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ece:	b01d      	add	sp, #116	; 0x74
 8005ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed4:	ab03      	add	r3, sp, #12
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <_svfiprintf_r+0x1ec>)
 8005edc:	a904      	add	r1, sp, #16
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f000 f882 	bl	8005fe8 <_printf_i>
 8005ee4:	e7ea      	b.n	8005ebc <_svfiprintf_r+0x1b0>
 8005ee6:	bf00      	nop
 8005ee8:	08006498 	.word	0x08006498
 8005eec:	0800649e 	.word	0x0800649e
 8005ef0:	080064a2 	.word	0x080064a2
 8005ef4:	00000000 	.word	0x00000000
 8005ef8:	08005c59 	.word	0x08005c59

08005efc <_printf_common>:
 8005efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	4691      	mov	r9, r2
 8005f02:	461f      	mov	r7, r3
 8005f04:	688a      	ldr	r2, [r1, #8]
 8005f06:	690b      	ldr	r3, [r1, #16]
 8005f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	bfb8      	it	lt
 8005f10:	4613      	movlt	r3, r2
 8005f12:	f8c9 3000 	str.w	r3, [r9]
 8005f16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	b112      	cbz	r2, 8005f26 <_printf_common+0x2a>
 8005f20:	3301      	adds	r3, #1
 8005f22:	f8c9 3000 	str.w	r3, [r9]
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	0699      	lsls	r1, r3, #26
 8005f2a:	bf42      	ittt	mi
 8005f2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f30:	3302      	addmi	r3, #2
 8005f32:	f8c9 3000 	strmi.w	r3, [r9]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d107      	bne.n	8005f4e <_printf_common+0x52>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	f8d9 2000 	ldr.w	r2, [r9]
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	42ab      	cmp	r3, r5
 8005f4c:	dc28      	bgt.n	8005fa0 <_printf_common+0xa4>
 8005f4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	3300      	adds	r3, #0
 8005f56:	bf18      	it	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	0692      	lsls	r2, r2, #26
 8005f5c:	d42d      	bmi.n	8005fba <_printf_common+0xbe>
 8005f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f62:	4639      	mov	r1, r7
 8005f64:	4630      	mov	r0, r6
 8005f66:	47c0      	blx	r8
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d020      	beq.n	8005fae <_printf_common+0xb2>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	68e5      	ldr	r5, [r4, #12]
 8005f70:	f8d9 2000 	ldr.w	r2, [r9]
 8005f74:	f003 0306 	and.w	r3, r3, #6
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	bf08      	it	eq
 8005f7c:	1aad      	subeq	r5, r5, r2
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	6922      	ldr	r2, [r4, #16]
 8005f82:	bf0c      	ite	eq
 8005f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f88:	2500      	movne	r5, #0
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bfc4      	itt	gt
 8005f8e:	1a9b      	subgt	r3, r3, r2
 8005f90:	18ed      	addgt	r5, r5, r3
 8005f92:	f04f 0900 	mov.w	r9, #0
 8005f96:	341a      	adds	r4, #26
 8005f98:	454d      	cmp	r5, r9
 8005f9a:	d11a      	bne.n	8005fd2 <_printf_common+0xd6>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e008      	b.n	8005fb2 <_printf_common+0xb6>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4652      	mov	r2, sl
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	47c0      	blx	r8
 8005faa:	3001      	adds	r0, #1
 8005fac:	d103      	bne.n	8005fb6 <_printf_common+0xba>
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	3501      	adds	r5, #1
 8005fb8:	e7c3      	b.n	8005f42 <_printf_common+0x46>
 8005fba:	18e1      	adds	r1, r4, r3
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	2030      	movs	r0, #48	; 0x30
 8005fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fc4:	4422      	add	r2, r4
 8005fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fce:	3302      	adds	r3, #2
 8005fd0:	e7c5      	b.n	8005f5e <_printf_common+0x62>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	4630      	mov	r0, r6
 8005fda:	47c0      	blx	r8
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d0e6      	beq.n	8005fae <_printf_common+0xb2>
 8005fe0:	f109 0901 	add.w	r9, r9, #1
 8005fe4:	e7d8      	b.n	8005f98 <_printf_common+0x9c>
	...

08005fe8 <_printf_i>:
 8005fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	7e09      	ldrb	r1, [r1, #24]
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	296e      	cmp	r1, #110	; 0x6e
 8005ff8:	4617      	mov	r7, r2
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	4698      	mov	r8, r3
 8005ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006000:	f000 80b3 	beq.w	800616a <_printf_i+0x182>
 8006004:	d822      	bhi.n	800604c <_printf_i+0x64>
 8006006:	2963      	cmp	r1, #99	; 0x63
 8006008:	d036      	beq.n	8006078 <_printf_i+0x90>
 800600a:	d80a      	bhi.n	8006022 <_printf_i+0x3a>
 800600c:	2900      	cmp	r1, #0
 800600e:	f000 80b9 	beq.w	8006184 <_printf_i+0x19c>
 8006012:	2958      	cmp	r1, #88	; 0x58
 8006014:	f000 8083 	beq.w	800611e <_printf_i+0x136>
 8006018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006020:	e032      	b.n	8006088 <_printf_i+0xa0>
 8006022:	2964      	cmp	r1, #100	; 0x64
 8006024:	d001      	beq.n	800602a <_printf_i+0x42>
 8006026:	2969      	cmp	r1, #105	; 0x69
 8006028:	d1f6      	bne.n	8006018 <_printf_i+0x30>
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	6813      	ldr	r3, [r2, #0]
 800602e:	0605      	lsls	r5, r0, #24
 8006030:	f103 0104 	add.w	r1, r3, #4
 8006034:	d52a      	bpl.n	800608c <_printf_i+0xa4>
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	da03      	bge.n	8006046 <_printf_i+0x5e>
 800603e:	222d      	movs	r2, #45	; 0x2d
 8006040:	425b      	negs	r3, r3
 8006042:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006046:	486f      	ldr	r0, [pc, #444]	; (8006204 <_printf_i+0x21c>)
 8006048:	220a      	movs	r2, #10
 800604a:	e039      	b.n	80060c0 <_printf_i+0xd8>
 800604c:	2973      	cmp	r1, #115	; 0x73
 800604e:	f000 809d 	beq.w	800618c <_printf_i+0x1a4>
 8006052:	d808      	bhi.n	8006066 <_printf_i+0x7e>
 8006054:	296f      	cmp	r1, #111	; 0x6f
 8006056:	d020      	beq.n	800609a <_printf_i+0xb2>
 8006058:	2970      	cmp	r1, #112	; 0x70
 800605a:	d1dd      	bne.n	8006018 <_printf_i+0x30>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	f043 0320 	orr.w	r3, r3, #32
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	e003      	b.n	800606e <_printf_i+0x86>
 8006066:	2975      	cmp	r1, #117	; 0x75
 8006068:	d017      	beq.n	800609a <_printf_i+0xb2>
 800606a:	2978      	cmp	r1, #120	; 0x78
 800606c:	d1d4      	bne.n	8006018 <_printf_i+0x30>
 800606e:	2378      	movs	r3, #120	; 0x78
 8006070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006074:	4864      	ldr	r0, [pc, #400]	; (8006208 <_printf_i+0x220>)
 8006076:	e055      	b.n	8006124 <_printf_i+0x13c>
 8006078:	6813      	ldr	r3, [r2, #0]
 800607a:	1d19      	adds	r1, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6011      	str	r1, [r2, #0]
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e08c      	b.n	80061a6 <_printf_i+0x1be>
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6011      	str	r1, [r2, #0]
 8006090:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006094:	bf18      	it	ne
 8006096:	b21b      	sxthne	r3, r3
 8006098:	e7cf      	b.n	800603a <_printf_i+0x52>
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	6825      	ldr	r5, [r4, #0]
 800609e:	1d18      	adds	r0, r3, #4
 80060a0:	6010      	str	r0, [r2, #0]
 80060a2:	0628      	lsls	r0, r5, #24
 80060a4:	d501      	bpl.n	80060aa <_printf_i+0xc2>
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	e002      	b.n	80060b0 <_printf_i+0xc8>
 80060aa:	0668      	lsls	r0, r5, #25
 80060ac:	d5fb      	bpl.n	80060a6 <_printf_i+0xbe>
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	4854      	ldr	r0, [pc, #336]	; (8006204 <_printf_i+0x21c>)
 80060b2:	296f      	cmp	r1, #111	; 0x6f
 80060b4:	bf14      	ite	ne
 80060b6:	220a      	movne	r2, #10
 80060b8:	2208      	moveq	r2, #8
 80060ba:	2100      	movs	r1, #0
 80060bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c0:	6865      	ldr	r5, [r4, #4]
 80060c2:	60a5      	str	r5, [r4, #8]
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	f2c0 8095 	blt.w	80061f4 <_printf_i+0x20c>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	f021 0104 	bic.w	r1, r1, #4
 80060d0:	6021      	str	r1, [r4, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d13d      	bne.n	8006152 <_printf_i+0x16a>
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	f040 808e 	bne.w	80061f8 <_printf_i+0x210>
 80060dc:	4665      	mov	r5, ip
 80060de:	2a08      	cmp	r2, #8
 80060e0:	d10b      	bne.n	80060fa <_printf_i+0x112>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	07db      	lsls	r3, r3, #31
 80060e6:	d508      	bpl.n	80060fa <_printf_i+0x112>
 80060e8:	6923      	ldr	r3, [r4, #16]
 80060ea:	6862      	ldr	r2, [r4, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	bfde      	ittt	le
 80060f0:	2330      	movle	r3, #48	; 0x30
 80060f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060fa:	ebac 0305 	sub.w	r3, ip, r5
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	f8cd 8000 	str.w	r8, [sp]
 8006104:	463b      	mov	r3, r7
 8006106:	aa03      	add	r2, sp, #12
 8006108:	4621      	mov	r1, r4
 800610a:	4630      	mov	r0, r6
 800610c:	f7ff fef6 	bl	8005efc <_printf_common>
 8006110:	3001      	adds	r0, #1
 8006112:	d14d      	bne.n	80061b0 <_printf_i+0x1c8>
 8006114:	f04f 30ff 	mov.w	r0, #4294967295
 8006118:	b005      	add	sp, #20
 800611a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800611e:	4839      	ldr	r0, [pc, #228]	; (8006204 <_printf_i+0x21c>)
 8006120:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006124:	6813      	ldr	r3, [r2, #0]
 8006126:	6821      	ldr	r1, [r4, #0]
 8006128:	1d1d      	adds	r5, r3, #4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6015      	str	r5, [r2, #0]
 800612e:	060a      	lsls	r2, r1, #24
 8006130:	d50b      	bpl.n	800614a <_printf_i+0x162>
 8006132:	07ca      	lsls	r2, r1, #31
 8006134:	bf44      	itt	mi
 8006136:	f041 0120 	orrmi.w	r1, r1, #32
 800613a:	6021      	strmi	r1, [r4, #0]
 800613c:	b91b      	cbnz	r3, 8006146 <_printf_i+0x15e>
 800613e:	6822      	ldr	r2, [r4, #0]
 8006140:	f022 0220 	bic.w	r2, r2, #32
 8006144:	6022      	str	r2, [r4, #0]
 8006146:	2210      	movs	r2, #16
 8006148:	e7b7      	b.n	80060ba <_printf_i+0xd2>
 800614a:	064d      	lsls	r5, r1, #25
 800614c:	bf48      	it	mi
 800614e:	b29b      	uxthmi	r3, r3
 8006150:	e7ef      	b.n	8006132 <_printf_i+0x14a>
 8006152:	4665      	mov	r5, ip
 8006154:	fbb3 f1f2 	udiv	r1, r3, r2
 8006158:	fb02 3311 	mls	r3, r2, r1, r3
 800615c:	5cc3      	ldrb	r3, [r0, r3]
 800615e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006162:	460b      	mov	r3, r1
 8006164:	2900      	cmp	r1, #0
 8006166:	d1f5      	bne.n	8006154 <_printf_i+0x16c>
 8006168:	e7b9      	b.n	80060de <_printf_i+0xf6>
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	6825      	ldr	r5, [r4, #0]
 800616e:	6961      	ldr	r1, [r4, #20]
 8006170:	1d18      	adds	r0, r3, #4
 8006172:	6010      	str	r0, [r2, #0]
 8006174:	0628      	lsls	r0, r5, #24
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	d501      	bpl.n	800617e <_printf_i+0x196>
 800617a:	6019      	str	r1, [r3, #0]
 800617c:	e002      	b.n	8006184 <_printf_i+0x19c>
 800617e:	066a      	lsls	r2, r5, #25
 8006180:	d5fb      	bpl.n	800617a <_printf_i+0x192>
 8006182:	8019      	strh	r1, [r3, #0]
 8006184:	2300      	movs	r3, #0
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	4665      	mov	r5, ip
 800618a:	e7b9      	b.n	8006100 <_printf_i+0x118>
 800618c:	6813      	ldr	r3, [r2, #0]
 800618e:	1d19      	adds	r1, r3, #4
 8006190:	6011      	str	r1, [r2, #0]
 8006192:	681d      	ldr	r5, [r3, #0]
 8006194:	6862      	ldr	r2, [r4, #4]
 8006196:	2100      	movs	r1, #0
 8006198:	4628      	mov	r0, r5
 800619a:	f7fa f821 	bl	80001e0 <memchr>
 800619e:	b108      	cbz	r0, 80061a4 <_printf_i+0x1bc>
 80061a0:	1b40      	subs	r0, r0, r5
 80061a2:	6060      	str	r0, [r4, #4]
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	2300      	movs	r3, #0
 80061aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ae:	e7a7      	b.n	8006100 <_printf_i+0x118>
 80061b0:	6923      	ldr	r3, [r4, #16]
 80061b2:	462a      	mov	r2, r5
 80061b4:	4639      	mov	r1, r7
 80061b6:	4630      	mov	r0, r6
 80061b8:	47c0      	blx	r8
 80061ba:	3001      	adds	r0, #1
 80061bc:	d0aa      	beq.n	8006114 <_printf_i+0x12c>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	079b      	lsls	r3, r3, #30
 80061c2:	d413      	bmi.n	80061ec <_printf_i+0x204>
 80061c4:	68e0      	ldr	r0, [r4, #12]
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	4298      	cmp	r0, r3
 80061ca:	bfb8      	it	lt
 80061cc:	4618      	movlt	r0, r3
 80061ce:	e7a3      	b.n	8006118 <_printf_i+0x130>
 80061d0:	2301      	movs	r3, #1
 80061d2:	464a      	mov	r2, r9
 80061d4:	4639      	mov	r1, r7
 80061d6:	4630      	mov	r0, r6
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d09a      	beq.n	8006114 <_printf_i+0x12c>
 80061de:	3501      	adds	r5, #1
 80061e0:	68e3      	ldr	r3, [r4, #12]
 80061e2:	9a03      	ldr	r2, [sp, #12]
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	42ab      	cmp	r3, r5
 80061e8:	dcf2      	bgt.n	80061d0 <_printf_i+0x1e8>
 80061ea:	e7eb      	b.n	80061c4 <_printf_i+0x1dc>
 80061ec:	2500      	movs	r5, #0
 80061ee:	f104 0919 	add.w	r9, r4, #25
 80061f2:	e7f5      	b.n	80061e0 <_printf_i+0x1f8>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ac      	bne.n	8006152 <_printf_i+0x16a>
 80061f8:	7803      	ldrb	r3, [r0, #0]
 80061fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006202:	e76c      	b.n	80060de <_printf_i+0xf6>
 8006204:	080064a9 	.word	0x080064a9
 8006208:	080064ba 	.word	0x080064ba

0800620c <memmove>:
 800620c:	4288      	cmp	r0, r1
 800620e:	b510      	push	{r4, lr}
 8006210:	eb01 0302 	add.w	r3, r1, r2
 8006214:	d807      	bhi.n	8006226 <memmove+0x1a>
 8006216:	1e42      	subs	r2, r0, #1
 8006218:	4299      	cmp	r1, r3
 800621a:	d00a      	beq.n	8006232 <memmove+0x26>
 800621c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006220:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006224:	e7f8      	b.n	8006218 <memmove+0xc>
 8006226:	4283      	cmp	r3, r0
 8006228:	d9f5      	bls.n	8006216 <memmove+0xa>
 800622a:	1881      	adds	r1, r0, r2
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	42d3      	cmn	r3, r2
 8006230:	d100      	bne.n	8006234 <memmove+0x28>
 8006232:	bd10      	pop	{r4, pc}
 8006234:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006238:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800623c:	e7f7      	b.n	800622e <memmove+0x22>
	...

08006240 <_free_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4605      	mov	r5, r0
 8006244:	2900      	cmp	r1, #0
 8006246:	d045      	beq.n	80062d4 <_free_r+0x94>
 8006248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800624c:	1f0c      	subs	r4, r1, #4
 800624e:	2b00      	cmp	r3, #0
 8006250:	bfb8      	it	lt
 8006252:	18e4      	addlt	r4, r4, r3
 8006254:	f000 f8d2 	bl	80063fc <__malloc_lock>
 8006258:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <_free_r+0x98>)
 800625a:	6813      	ldr	r3, [r2, #0]
 800625c:	4610      	mov	r0, r2
 800625e:	b933      	cbnz	r3, 800626e <_free_r+0x2e>
 8006260:	6063      	str	r3, [r4, #4]
 8006262:	6014      	str	r4, [r2, #0]
 8006264:	4628      	mov	r0, r5
 8006266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800626a:	f000 b8c8 	b.w	80063fe <__malloc_unlock>
 800626e:	42a3      	cmp	r3, r4
 8006270:	d90c      	bls.n	800628c <_free_r+0x4c>
 8006272:	6821      	ldr	r1, [r4, #0]
 8006274:	1862      	adds	r2, r4, r1
 8006276:	4293      	cmp	r3, r2
 8006278:	bf04      	itt	eq
 800627a:	681a      	ldreq	r2, [r3, #0]
 800627c:	685b      	ldreq	r3, [r3, #4]
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	bf04      	itt	eq
 8006282:	1852      	addeq	r2, r2, r1
 8006284:	6022      	streq	r2, [r4, #0]
 8006286:	6004      	str	r4, [r0, #0]
 8006288:	e7ec      	b.n	8006264 <_free_r+0x24>
 800628a:	4613      	mov	r3, r2
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	b10a      	cbz	r2, 8006294 <_free_r+0x54>
 8006290:	42a2      	cmp	r2, r4
 8006292:	d9fa      	bls.n	800628a <_free_r+0x4a>
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	1858      	adds	r0, r3, r1
 8006298:	42a0      	cmp	r0, r4
 800629a:	d10b      	bne.n	80062b4 <_free_r+0x74>
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	4401      	add	r1, r0
 80062a0:	1858      	adds	r0, r3, r1
 80062a2:	4282      	cmp	r2, r0
 80062a4:	6019      	str	r1, [r3, #0]
 80062a6:	d1dd      	bne.n	8006264 <_free_r+0x24>
 80062a8:	6810      	ldr	r0, [r2, #0]
 80062aa:	6852      	ldr	r2, [r2, #4]
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	4401      	add	r1, r0
 80062b0:	6019      	str	r1, [r3, #0]
 80062b2:	e7d7      	b.n	8006264 <_free_r+0x24>
 80062b4:	d902      	bls.n	80062bc <_free_r+0x7c>
 80062b6:	230c      	movs	r3, #12
 80062b8:	602b      	str	r3, [r5, #0]
 80062ba:	e7d3      	b.n	8006264 <_free_r+0x24>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	1821      	adds	r1, r4, r0
 80062c0:	428a      	cmp	r2, r1
 80062c2:	bf04      	itt	eq
 80062c4:	6811      	ldreq	r1, [r2, #0]
 80062c6:	6852      	ldreq	r2, [r2, #4]
 80062c8:	6062      	str	r2, [r4, #4]
 80062ca:	bf04      	itt	eq
 80062cc:	1809      	addeq	r1, r1, r0
 80062ce:	6021      	streq	r1, [r4, #0]
 80062d0:	605c      	str	r4, [r3, #4]
 80062d2:	e7c7      	b.n	8006264 <_free_r+0x24>
 80062d4:	bd38      	pop	{r3, r4, r5, pc}
 80062d6:	bf00      	nop
 80062d8:	20012e44 	.word	0x20012e44

080062dc <_malloc_r>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	1ccd      	adds	r5, r1, #3
 80062e0:	f025 0503 	bic.w	r5, r5, #3
 80062e4:	3508      	adds	r5, #8
 80062e6:	2d0c      	cmp	r5, #12
 80062e8:	bf38      	it	cc
 80062ea:	250c      	movcc	r5, #12
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	4606      	mov	r6, r0
 80062f0:	db01      	blt.n	80062f6 <_malloc_r+0x1a>
 80062f2:	42a9      	cmp	r1, r5
 80062f4:	d903      	bls.n	80062fe <_malloc_r+0x22>
 80062f6:	230c      	movs	r3, #12
 80062f8:	6033      	str	r3, [r6, #0]
 80062fa:	2000      	movs	r0, #0
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	f000 f87d 	bl	80063fc <__malloc_lock>
 8006302:	4a21      	ldr	r2, [pc, #132]	; (8006388 <_malloc_r+0xac>)
 8006304:	6814      	ldr	r4, [r2, #0]
 8006306:	4621      	mov	r1, r4
 8006308:	b991      	cbnz	r1, 8006330 <_malloc_r+0x54>
 800630a:	4c20      	ldr	r4, [pc, #128]	; (800638c <_malloc_r+0xb0>)
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	b91b      	cbnz	r3, 8006318 <_malloc_r+0x3c>
 8006310:	4630      	mov	r0, r6
 8006312:	f000 f863 	bl	80063dc <_sbrk_r>
 8006316:	6020      	str	r0, [r4, #0]
 8006318:	4629      	mov	r1, r5
 800631a:	4630      	mov	r0, r6
 800631c:	f000 f85e 	bl	80063dc <_sbrk_r>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d124      	bne.n	800636e <_malloc_r+0x92>
 8006324:	230c      	movs	r3, #12
 8006326:	6033      	str	r3, [r6, #0]
 8006328:	4630      	mov	r0, r6
 800632a:	f000 f868 	bl	80063fe <__malloc_unlock>
 800632e:	e7e4      	b.n	80062fa <_malloc_r+0x1e>
 8006330:	680b      	ldr	r3, [r1, #0]
 8006332:	1b5b      	subs	r3, r3, r5
 8006334:	d418      	bmi.n	8006368 <_malloc_r+0x8c>
 8006336:	2b0b      	cmp	r3, #11
 8006338:	d90f      	bls.n	800635a <_malloc_r+0x7e>
 800633a:	600b      	str	r3, [r1, #0]
 800633c:	50cd      	str	r5, [r1, r3]
 800633e:	18cc      	adds	r4, r1, r3
 8006340:	4630      	mov	r0, r6
 8006342:	f000 f85c 	bl	80063fe <__malloc_unlock>
 8006346:	f104 000b 	add.w	r0, r4, #11
 800634a:	1d23      	adds	r3, r4, #4
 800634c:	f020 0007 	bic.w	r0, r0, #7
 8006350:	1ac3      	subs	r3, r0, r3
 8006352:	d0d3      	beq.n	80062fc <_malloc_r+0x20>
 8006354:	425a      	negs	r2, r3
 8006356:	50e2      	str	r2, [r4, r3]
 8006358:	e7d0      	b.n	80062fc <_malloc_r+0x20>
 800635a:	428c      	cmp	r4, r1
 800635c:	684b      	ldr	r3, [r1, #4]
 800635e:	bf16      	itet	ne
 8006360:	6063      	strne	r3, [r4, #4]
 8006362:	6013      	streq	r3, [r2, #0]
 8006364:	460c      	movne	r4, r1
 8006366:	e7eb      	b.n	8006340 <_malloc_r+0x64>
 8006368:	460c      	mov	r4, r1
 800636a:	6849      	ldr	r1, [r1, #4]
 800636c:	e7cc      	b.n	8006308 <_malloc_r+0x2c>
 800636e:	1cc4      	adds	r4, r0, #3
 8006370:	f024 0403 	bic.w	r4, r4, #3
 8006374:	42a0      	cmp	r0, r4
 8006376:	d005      	beq.n	8006384 <_malloc_r+0xa8>
 8006378:	1a21      	subs	r1, r4, r0
 800637a:	4630      	mov	r0, r6
 800637c:	f000 f82e 	bl	80063dc <_sbrk_r>
 8006380:	3001      	adds	r0, #1
 8006382:	d0cf      	beq.n	8006324 <_malloc_r+0x48>
 8006384:	6025      	str	r5, [r4, #0]
 8006386:	e7db      	b.n	8006340 <_malloc_r+0x64>
 8006388:	20012e44 	.word	0x20012e44
 800638c:	20012e48 	.word	0x20012e48

08006390 <_realloc_r>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	4607      	mov	r7, r0
 8006394:	4614      	mov	r4, r2
 8006396:	460e      	mov	r6, r1
 8006398:	b921      	cbnz	r1, 80063a4 <_realloc_r+0x14>
 800639a:	4611      	mov	r1, r2
 800639c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063a0:	f7ff bf9c 	b.w	80062dc <_malloc_r>
 80063a4:	b922      	cbnz	r2, 80063b0 <_realloc_r+0x20>
 80063a6:	f7ff ff4b 	bl	8006240 <_free_r>
 80063aa:	4625      	mov	r5, r4
 80063ac:	4628      	mov	r0, r5
 80063ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063b0:	f000 f826 	bl	8006400 <_malloc_usable_size_r>
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d20f      	bcs.n	80063d8 <_realloc_r+0x48>
 80063b8:	4621      	mov	r1, r4
 80063ba:	4638      	mov	r0, r7
 80063bc:	f7ff ff8e 	bl	80062dc <_malloc_r>
 80063c0:	4605      	mov	r5, r0
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d0f2      	beq.n	80063ac <_realloc_r+0x1c>
 80063c6:	4631      	mov	r1, r6
 80063c8:	4622      	mov	r2, r4
 80063ca:	f7ff fc11 	bl	8005bf0 <memcpy>
 80063ce:	4631      	mov	r1, r6
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ff35 	bl	8006240 <_free_r>
 80063d6:	e7e9      	b.n	80063ac <_realloc_r+0x1c>
 80063d8:	4635      	mov	r5, r6
 80063da:	e7e7      	b.n	80063ac <_realloc_r+0x1c>

080063dc <_sbrk_r>:
 80063dc:	b538      	push	{r3, r4, r5, lr}
 80063de:	4c06      	ldr	r4, [pc, #24]	; (80063f8 <_sbrk_r+0x1c>)
 80063e0:	2300      	movs	r3, #0
 80063e2:	4605      	mov	r5, r0
 80063e4:	4608      	mov	r0, r1
 80063e6:	6023      	str	r3, [r4, #0]
 80063e8:	f000 f812 	bl	8006410 <_sbrk>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_sbrk_r+0x1a>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_sbrk_r+0x1a>
 80063f4:	602b      	str	r3, [r5, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	20012fd0 	.word	0x20012fd0

080063fc <__malloc_lock>:
 80063fc:	4770      	bx	lr

080063fe <__malloc_unlock>:
 80063fe:	4770      	bx	lr

08006400 <_malloc_usable_size_r>:
 8006400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006404:	1f18      	subs	r0, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfbc      	itt	lt
 800640a:	580b      	ldrlt	r3, [r1, r0]
 800640c:	18c0      	addlt	r0, r0, r3
 800640e:	4770      	bx	lr

08006410 <_sbrk>:
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <_sbrk+0x14>)
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	4602      	mov	r2, r0
 8006416:	b909      	cbnz	r1, 800641c <_sbrk+0xc>
 8006418:	4903      	ldr	r1, [pc, #12]	; (8006428 <_sbrk+0x18>)
 800641a:	6019      	str	r1, [r3, #0]
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	4402      	add	r2, r0
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	4770      	bx	lr
 8006424:	20012e4c 	.word	0x20012e4c
 8006428:	20012fd8 	.word	0x20012fd8

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
