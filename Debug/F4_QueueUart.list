
F4_QueueUart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae8  08006ae8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006af0  08006af0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af4  08006af4  00016af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012fa4  20000078  08006b70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001301c  08006b70  0002301c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001178a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  00031832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183cd  00000000  00000000  000366b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012327  00000000  00000000  0004ea7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095721  00000000  00000000  00060da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f64c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  000f6518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a38 	.word	0x08006a38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006a38 	.word	0x08006a38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <HAL_Init+0x40>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <HAL_Init+0x40>)
 800058e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <HAL_Init+0x40>)
 800059a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_Init+0x40>)
 80005a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f8d8 	bl	8000762 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f002 fe1e 	bl	80031f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f002 fd32 	bl	8003020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023c00 	.word	0x40023c00

080005c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004
 80005ec:	20000094 	.word	0x20000094

080005f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000094 	.word	0x20000094

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ff4c 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078a:	f7ff ff61 	bl	8000650 <__NVIC_GetPriorityGrouping>
 800078e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	68b9      	ldr	r1, [r7, #8]
 8000794:	6978      	ldr	r0, [r7, #20]
 8000796:	f7ff ffb1 	bl	80006fc <NVIC_EncodePriority>
 800079a:	4602      	mov	r2, r0
 800079c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff80 	bl	80006a8 <__NVIC_SetPriority>
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff54 	bl	800066c <__NVIC_EnableIRQ>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d004      	beq.n	80007ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00c      	b.n	8000804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2205      	movs	r2, #5
 80007ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f022 0201 	bic.w	r2, r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	e159      	b.n	8000ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8148 	bne.w	8000ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d00b      	beq.n	800086a <HAL_GPIO_Init+0x5a>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d007      	beq.n	800086a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085e:	2b11      	cmp	r3, #17
 8000860:	d003      	beq.n	800086a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b12      	cmp	r3, #18
 8000868:	d130      	bne.n	80008cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2203      	movs	r2, #3
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	68da      	ldr	r2, [r3, #12]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a0:	2201      	movs	r2, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4013      	ands	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	091b      	lsrs	r3, r3, #4
 80008b6:	f003 0201 	and.w	r2, r3, #1
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4013      	ands	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d003      	beq.n	800090c <HAL_GPIO_Init+0xfc>
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b12      	cmp	r3, #18
 800090a:	d123      	bne.n	8000954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	08da      	lsrs	r2, r3, #3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	220f      	movs	r2, #15
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	691a      	ldr	r2, [r3, #16]
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	08da      	lsrs	r2, r3, #3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3208      	adds	r2, #8
 800094e:	69b9      	ldr	r1, [r7, #24]
 8000950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0203 	and.w	r2, r3, #3
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4313      	orrs	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80a2 	beq.w	8000ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <HAL_GPIO_Init+0x2e8>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a56      	ldr	r2, [pc, #344]	; (8000af8 <HAL_GPIO_Init+0x2e8>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b54      	ldr	r3, [pc, #336]	; (8000af8 <HAL_GPIO_Init+0x2e8>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b2:	4a52      	ldr	r2, [pc, #328]	; (8000afc <HAL_GPIO_Init+0x2ec>)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	089b      	lsrs	r3, r3, #2
 80009b8:	3302      	adds	r3, #2
 80009ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	220f      	movs	r2, #15
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a49      	ldr	r2, [pc, #292]	; (8000b00 <HAL_GPIO_Init+0x2f0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d019      	beq.n	8000a12 <HAL_GPIO_Init+0x202>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_GPIO_Init+0x2f4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d013      	beq.n	8000a0e <HAL_GPIO_Init+0x1fe>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <HAL_GPIO_Init+0x2f8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00d      	beq.n	8000a0a <HAL_GPIO_Init+0x1fa>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d007      	beq.n	8000a06 <HAL_GPIO_Init+0x1f6>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a45      	ldr	r2, [pc, #276]	; (8000b10 <HAL_GPIO_Init+0x300>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_GPIO_Init+0x1f2>
 80009fe:	2304      	movs	r3, #4
 8000a00:	e008      	b.n	8000a14 <HAL_GPIO_Init+0x204>
 8000a02:	2307      	movs	r3, #7
 8000a04:	e006      	b.n	8000a14 <HAL_GPIO_Init+0x204>
 8000a06:	2303      	movs	r3, #3
 8000a08:	e004      	b.n	8000a14 <HAL_GPIO_Init+0x204>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e002      	b.n	8000a14 <HAL_GPIO_Init+0x204>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x204>
 8000a12:	2300      	movs	r3, #0
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	f002 0203 	and.w	r2, r2, #3
 8000a1a:	0092      	lsls	r2, r2, #2
 8000a1c:	4093      	lsls	r3, r2
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a24:	4935      	ldr	r1, [pc, #212]	; (8000afc <HAL_GPIO_Init+0x2ec>)
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a56:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a80:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	4013      	ands	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aaa:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_GPIO_Init+0x304>)
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3301      	adds	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	f67f aea2 	bls.w	800082c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40013800 	.word	0x40013800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40013c00 	.word	0x40013c00

08000b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
 8000b24:	4613      	mov	r3, r2
 8000b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b28:	787b      	ldrb	r3, [r7, #1]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2e:	887a      	ldrh	r2, [r7, #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b34:	e003      	b.n	8000b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b36:	887b      	ldrh	r3, [r7, #2]
 8000b38:	041a      	lsls	r2, r3, #16
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	619a      	str	r2, [r3, #24]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d104      	bne.n	8000b6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	041a      	lsls	r2, r3, #16
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	619a      	str	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e25e      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d075      	beq.n	8000c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b9e:	4b88      	ldr	r3, [pc, #544]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	d00c      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000baa:	4b85      	ldr	r3, [pc, #532]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d112      	bne.n	8000bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb6:	4b82      	ldr	r3, [pc, #520]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bc2:	d10b      	bne.n	8000bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bc4:	4b7e      	ldr	r3, [pc, #504]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d05b      	beq.n	8000c88 <HAL_RCC_OscConfig+0x108>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d157      	bne.n	8000c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e239      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be4:	d106      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x74>
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a75      	ldr	r2, [pc, #468]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e01d      	b.n	8000c30 <HAL_RCC_OscConfig+0xb0>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0x98>
 8000bfe:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a6f      	ldr	r2, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6c      	ldr	r2, [pc, #432]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e00b      	b.n	8000c30 <HAL_RCC_OscConfig+0xb0>
 8000c18:	4b69      	ldr	r3, [pc, #420]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a68      	ldr	r2, [pc, #416]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b66      	ldr	r3, [pc, #408]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a65      	ldr	r2, [pc, #404]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fcda 	bl	80005f0 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fcd6 	bl	80005f0 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e1fe      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0xc0>
 8000c5e:	e014      	b.n	8000c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fcc6 	bl	80005f0 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fcc2 	bl	80005f0 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e1ea      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b51      	ldr	r3, [pc, #324]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0xe8>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d063      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c96:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ca2:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d11c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cae:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d116      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	4b41      	ldr	r3, [pc, #260]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x152>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d001      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e1be      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4937      	ldr	r1, [pc, #220]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	e03a      	b.n	8000d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d020      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <HAL_RCC_OscConfig+0x244>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc7b 	bl	80005f0 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fc77 	bl	80005f0 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e19f      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4925      	ldr	r1, [pc, #148]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_RCC_OscConfig+0x244>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d38:	f7ff fc5a 	bl	80005f0 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fc56 	bl	80005f0 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e17e      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d036      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d016      	beq.n	8000da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_RCC_OscConfig+0x248>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc3a 	bl	80005f0 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fc36 	bl	80005f0 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e15e      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_RCC_OscConfig+0x240>)
 8000d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x200>
 8000d9e:	e01b      	b.n	8000dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_RCC_OscConfig+0x248>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fc23 	bl	80005f0 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dac:	e00e      	b.n	8000dcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dae:	f7ff fc1f 	bl	80005f0 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d907      	bls.n	8000dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e147      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	42470000 	.word	0x42470000
 8000dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b88      	ldr	r3, [pc, #544]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1ea      	bne.n	8000dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 8097 	beq.w	8000f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b81      	ldr	r3, [pc, #516]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10f      	bne.n	8000e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a7c      	ldr	r2, [pc, #496]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b7a      	ldr	r3, [pc, #488]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b77      	ldr	r3, [pc, #476]	; (8000ff4 <HAL_RCC_OscConfig+0x474>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d118      	bne.n	8000e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <HAL_RCC_OscConfig+0x474>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a73      	ldr	r2, [pc, #460]	; (8000ff4 <HAL_RCC_OscConfig+0x474>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbdf 	bl	80005f0 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e36:	f7ff fbdb 	bl	80005f0 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e103      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <HAL_RCC_OscConfig+0x474>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d106      	bne.n	8000e6a <HAL_RCC_OscConfig+0x2ea>
 8000e5c:	4b64      	ldr	r3, [pc, #400]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e60:	4a63      	ldr	r2, [pc, #396]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6713      	str	r3, [r2, #112]	; 0x70
 8000e68:	e01c      	b.n	8000ea4 <HAL_RCC_OscConfig+0x324>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x30c>
 8000e72:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e76:	4a5e      	ldr	r2, [pc, #376]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e82:	4a5b      	ldr	r2, [pc, #364]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8a:	e00b      	b.n	8000ea4 <HAL_RCC_OscConfig+0x324>
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	6713      	str	r3, [r2, #112]	; 0x70
 8000e98:	4b55      	ldr	r3, [pc, #340]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9c:	4a54      	ldr	r2, [pc, #336]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000e9e:	f023 0304 	bic.w	r3, r3, #4
 8000ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d015      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eac:	f7ff fba0 	bl	80005f0 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb2:	e00a      	b.n	8000eca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb4:	f7ff fb9c 	bl	80005f0 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e0c2      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0ee      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x334>
 8000ed6:	e014      	b.n	8000f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed8:	f7ff fb8a 	bl	80005f0 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ede:	e00a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fb86 	bl	80005f0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e0ac      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1ee      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d105      	bne.n	8000f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f08:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a38      	ldr	r2, [pc, #224]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 8098 	beq.w	800104e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d05c      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d141      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_RCC_OscConfig+0x478>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb5a 	bl	80005f0 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f40:	f7ff fb56 	bl	80005f0 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e07e      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f52:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69da      	ldr	r2, [r3, #28]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a1b      	ldr	r3, [r3, #32]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	3b01      	subs	r3, #1
 8000f78:	041b      	lsls	r3, r3, #16
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	061b      	lsls	r3, r3, #24
 8000f82:	491b      	ldr	r1, [pc, #108]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_RCC_OscConfig+0x478>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb2f 	bl	80005f0 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb2b 	bl	80005f0 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e053      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x416>
 8000fb4:	e04b      	b.n	800104e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_RCC_OscConfig+0x478>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fb18 	bl	80005f0 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fb14 	bl	80005f0 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e03c      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_RCC_OscConfig+0x470>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x444>
 8000fe2:	e034      	b.n	800104e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d107      	bne.n	8000ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e02f      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <HAL_RCC_OscConfig+0x4d8>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	429a      	cmp	r2, r3
 800100e:	d11c      	bne.n	800104a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	429a      	cmp	r2, r3
 800101c:	d115      	bne.n	800104a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001024:	4013      	ands	r3, r2
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800102a:	4293      	cmp	r3, r2
 800102c:	d10d      	bne.n	800104a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001038:	429a      	cmp	r2, r3
 800103a:	d106      	bne.n	800104a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001046:	429a      	cmp	r2, r3
 8001048:	d001      	beq.n	800104e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e000      	b.n	8001050 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0cc      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001070:	4b68      	ldr	r3, [pc, #416]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d90c      	bls.n	8001098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	4b63      	ldr	r3, [pc, #396]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0b8      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c8:	4b53      	ldr	r3, [pc, #332]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	494d      	ldr	r1, [pc, #308]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d044      	beq.n	800117c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d119      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e07f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d003      	beq.n	800111a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001116:	2b03      	cmp	r3, #3
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e06f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e067      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 0203 	bic.w	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4934      	ldr	r1, [pc, #208]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800114c:	f7ff fa50 	bl	80005f0 <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	e00a      	b.n	800116a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f7ff fa4c 	bl	80005f0 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d901      	bls.n	800116a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e04f      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 020c 	and.w	r2, r3, #12
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	429a      	cmp	r2, r3
 800117a:	d1eb      	bne.n	8001154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d20c      	bcs.n	80011a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b22      	ldr	r3, [pc, #136]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e032      	b.n	800120a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4916      	ldr	r1, [pc, #88]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011e2:	f000 f821 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	490a      	ldr	r1, [pc, #40]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	5ccb      	ldrb	r3, [r1, r3]
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1c8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fff6 	bl	80031f4 <HAL_InitTick>

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00
 8001218:	40023800 	.word	0x40023800
 800121c:	08006a9c 	.word	0x08006a9c
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000

08001228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800122c:	b090      	sub	sp, #64	; 0x40
 800122e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
 8001234:	2300      	movs	r3, #0
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001240:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d00d      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x40>
 800124c:	2b08      	cmp	r3, #8
 800124e:	f200 80a1 	bhi.w	8001394 <HAL_RCC_GetSysClockFreq+0x16c>
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x34>
 8001256:	2b04      	cmp	r3, #4
 8001258:	d003      	beq.n	8001262 <HAL_RCC_GetSysClockFreq+0x3a>
 800125a:	e09b      	b.n	8001394 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_GetSysClockFreq+0x184>)
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001260:	e09b      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001266:	e098      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001268:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001272:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d028      	beq.n	80012d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	099b      	lsrs	r3, r3, #6
 8001284:	2200      	movs	r2, #0
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	627a      	str	r2, [r7, #36]	; 0x24
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001290:	2100      	movs	r1, #0
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001294:	fb03 f201 	mul.w	r2, r3, r1
 8001298:	2300      	movs	r3, #0
 800129a:	fb00 f303 	mul.w	r3, r0, r3
 800129e:	4413      	add	r3, r2
 80012a0:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80012a2:	fba0 1202 	umull	r1, r2, r0, r2
 80012a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012a8:	460a      	mov	r2, r1
 80012aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80012ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ae:	4413      	add	r3, r2
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b4:	2200      	movs	r2, #0
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	61fa      	str	r2, [r7, #28]
 80012ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012c2:	f7fe ffdd 	bl	8000280 <__aeabi_uldivmod>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4613      	mov	r3, r2
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ce:	e053      	b.n	8001378 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d0:	4b35      	ldr	r3, [pc, #212]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	099b      	lsrs	r3, r3, #6
 80012d6:	2200      	movs	r2, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	617a      	str	r2, [r7, #20]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012e2:	f04f 0b00 	mov.w	fp, #0
 80012e6:	4652      	mov	r2, sl
 80012e8:	465b      	mov	r3, fp
 80012ea:	f04f 0000 	mov.w	r0, #0
 80012ee:	f04f 0100 	mov.w	r1, #0
 80012f2:	0159      	lsls	r1, r3, #5
 80012f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012f8:	0150      	lsls	r0, r2, #5
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001302:	eb63 090b 	sbc.w	r9, r3, fp
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001312:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001316:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800131a:	ebb2 0408 	subs.w	r4, r2, r8
 800131e:	eb63 0509 	sbc.w	r5, r3, r9
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	00eb      	lsls	r3, r5, #3
 800132c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001330:	00e2      	lsls	r2, r4, #3
 8001332:	4614      	mov	r4, r2
 8001334:	461d      	mov	r5, r3
 8001336:	eb14 030a 	adds.w	r3, r4, sl
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	eb45 030b 	adc.w	r3, r5, fp
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800134e:	4629      	mov	r1, r5
 8001350:	028b      	lsls	r3, r1, #10
 8001352:	4621      	mov	r1, r4
 8001354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001358:	4621      	mov	r1, r4
 800135a:	028a      	lsls	r2, r1, #10
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001362:	2200      	movs	r2, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	60fa      	str	r2, [r7, #12]
 8001368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136c:	f7fe ff88 	bl	8000280 <__aeabi_uldivmod>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4613      	mov	r3, r2
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	3301      	adds	r3, #1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001392:	e002      	b.n	800139a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800139c:	4618      	mov	r0, r3
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	00f42400 	.word	0x00f42400
 80013b0:	017d7840 	.word	0x017d7840

080013b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013d0:	f7ff fff0 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	0a9b      	lsrs	r3, r3, #10
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	08006aac 	.word	0x08006aac

080013f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013f8:	f7ff ffdc 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	0b5b      	lsrs	r3, r3, #13
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	4903      	ldr	r1, [pc, #12]	; (8001418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40023800 	.word	0x40023800
 8001418:	08006aac 	.word	0x08006aac

0800141c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	220f      	movs	r2, #15
 800142a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_GetClockConfig+0x5c>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_RCC_GetClockConfig+0x5c>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_GetClockConfig+0x5c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_GetClockConfig+0x5c>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <HAL_RCC_GetClockConfig+0x60>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 020f 	and.w	r2, r3, #15
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40023c00 	.word	0x40023c00

08001480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e01d      	b.n	80014ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f815 	bl	80014d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f000 f968 	bl	8001794 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b06      	cmp	r3, #6
 8001512:	d007      	beq.n	8001524 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b02      	cmp	r3, #2
 8001546:	d122      	bne.n	800158e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d11b      	bne.n	800158e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 0202 	mvn.w	r2, #2
 800155e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f8ee 	bl	8001756 <HAL_TIM_IC_CaptureCallback>
 800157a:	e005      	b.n	8001588 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f8e0 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8f1 	bl	800176a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d122      	bne.n	80015e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d11b      	bne.n	80015e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f06f 0204 	mvn.w	r2, #4
 80015b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f8c4 	bl	8001756 <HAL_TIM_IC_CaptureCallback>
 80015ce:	e005      	b.n	80015dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f8b6 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f8c7 	bl	800176a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d122      	bne.n	8001636 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11b      	bne.n	8001636 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f06f 0208 	mvn.w	r2, #8
 8001606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2204      	movs	r2, #4
 800160c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f89a 	bl	8001756 <HAL_TIM_IC_CaptureCallback>
 8001622:	e005      	b.n	8001630 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f88c 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f89d 	bl	800176a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b10      	cmp	r3, #16
 8001642:	d122      	bne.n	800168a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b10      	cmp	r3, #16
 8001650:	d11b      	bne.n	800168a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f06f 0210 	mvn.w	r2, #16
 800165a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2208      	movs	r2, #8
 8001660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f870 	bl	8001756 <HAL_TIM_IC_CaptureCallback>
 8001676:	e005      	b.n	8001684 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f862 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f873 	bl	800176a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10e      	bne.n	80016b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f06f 0201 	mvn.w	r2, #1
 80016ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f001 fc9b 	bl	8002fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	2b80      	cmp	r3, #128	; 0x80
 80016c2:	d10e      	bne.n	80016e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b80      	cmp	r3, #128	; 0x80
 80016d0:	d107      	bne.n	80016e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f8e3 	bl	80018a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	2b40      	cmp	r3, #64	; 0x40
 80016ee:	d10e      	bne.n	800170e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d107      	bne.n	800170e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f838 	bl	800177e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b20      	cmp	r3, #32
 800171a:	d10e      	bne.n	800173a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0320 	and.w	r3, r3, #32
 8001726:	2b20      	cmp	r3, #32
 8001728:	d107      	bne.n	800173a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f06f 0220 	mvn.w	r2, #32
 8001732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f8ad 	bl	8001894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a34      	ldr	r2, [pc, #208]	; (8001878 <TIM_Base_SetConfig+0xe4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00f      	beq.n	80017cc <TIM_Base_SetConfig+0x38>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b2:	d00b      	beq.n	80017cc <TIM_Base_SetConfig+0x38>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <TIM_Base_SetConfig+0xe8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <TIM_Base_SetConfig+0x38>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <TIM_Base_SetConfig+0xec>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d003      	beq.n	80017cc <TIM_Base_SetConfig+0x38>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <TIM_Base_SetConfig+0xf0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d108      	bne.n	80017de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a25      	ldr	r2, [pc, #148]	; (8001878 <TIM_Base_SetConfig+0xe4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01b      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ec:	d017      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <TIM_Base_SetConfig+0xe8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <TIM_Base_SetConfig+0xec>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00f      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <TIM_Base_SetConfig+0xf0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00b      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <TIM_Base_SetConfig+0xf4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <TIM_Base_SetConfig+0xf8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d003      	beq.n	800181e <TIM_Base_SetConfig+0x8a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <TIM_Base_SetConfig+0xfc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d108      	bne.n	8001830 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <TIM_Base_SetConfig+0xe4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d103      	bne.n	8001864 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	615a      	str	r2, [r3, #20]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40010000 	.word	0x40010000
 800187c:	40000400 	.word	0x40000400
 8001880:	40000800 	.word	0x40000800
 8001884:	40000c00 	.word	0x40000c00
 8001888:	40014000 	.word	0x40014000
 800188c:	40014400 	.word	0x40014400
 8001890:	40014800 	.word	0x40014800

08001894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e03f      	b.n	800194e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f001 fbc4 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2224      	movs	r2, #36	; 0x24
 80018ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fb97 	bl	8002034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2220      	movs	r2, #32
 8001940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b088      	sub	sp, #32
 800195a:	af02      	add	r7, sp, #8
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b20      	cmp	r3, #32
 8001974:	f040 8083 	bne.w	8001a7e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <HAL_UART_Transmit+0x2e>
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e07b      	b.n	8001a80 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_UART_Transmit+0x40>
 8001992:	2302      	movs	r3, #2
 8001994:	e074      	b.n	8001a80 <HAL_UART_Transmit+0x12a>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2221      	movs	r2, #33	; 0x21
 80019a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80019ac:	f7fe fe20 	bl	80005f0 <HAL_GetTick>
 80019b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80019c6:	e042      	b.n	8001a4e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019de:	d122      	bne.n	8001a26 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2200      	movs	r2, #0
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f9b6 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e042      	b.n	8001a80 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a0c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	e017      	b.n	8001a4e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	e013      	b.n	8001a4e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f993 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e01f      	b.n	8001a80 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1b7      	bne.n	80019c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f97a 	bl	8001d5c <UART_WaitOnFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e006      	b.n	8001a80 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	4613      	mov	r3, r2
 8001a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d140      	bne.n	8001b24 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_UART_Receive_IT+0x26>
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e039      	b.n	8001b26 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_UART_Receive_IT+0x38>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e032      	b.n	8001b26 <HAL_UART_Receive_IT+0x9e>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	88fa      	ldrh	r2, [r7, #6]
 8001ad8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2222      	movs	r2, #34	; 0x22
 8001ae4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10d      	bne.n	8001b86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_UART_IRQHandler+0x52>
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f9d6 	bl	8001f30 <UART_Receive_IT>
      return;
 8001b84:	e0d0      	b.n	8001d28 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80b0 	beq.w	8001cee <HAL_UART_IRQHandler+0x1ba>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_UART_IRQHandler+0x70>
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a5 	beq.w	8001cee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x90>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <HAL_UART_IRQHandler+0xb0>
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bdc:	f043 0202 	orr.w	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_UART_IRQHandler+0xd0>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00f      	beq.n	8001c2e <HAL_UART_IRQHandler+0xfa>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d104      	bne.n	8001c22 <HAL_UART_IRQHandler+0xee>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	f043 0208 	orr.w	r2, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d077      	beq.n	8001d26 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_UART_IRQHandler+0x11c>
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f970 	bl	8001f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_UART_IRQHandler+0x144>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d031      	beq.n	8001cdc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8b9 	bl	8001df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	2b40      	cmp	r3, #64	; 0x40
 8001c8a:	d123      	bne.n	8001cd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <HAL_UART_IRQHandler+0x1fc>)
 8001caa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fd8b 	bl	80007cc <HAL_DMA_Abort_IT>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d016      	beq.n	8001cea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cca:	e00e      	b.n	8001cea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f83b 	bl	8001d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cd2:	e00a      	b.n	8001cea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f837 	bl	8001d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cda:	e006      	b.n	8001cea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f833 	bl	8001d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001ce8:	e01d      	b.n	8001d26 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cea:	bf00      	nop
    return;
 8001cec:	e01b      	b.n	8001d26 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_UART_IRQHandler+0x1d6>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f8a6 	bl	8001e54 <UART_Transmit_IT>
    return;
 8001d08:	e00e      	b.n	8001d28 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <HAL_UART_IRQHandler+0x1f4>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8ee 	bl	8001f00 <UART_EndTransmit_IT>
    return;
 8001d24:	e000      	b.n	8001d28 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001d26:	bf00      	nop
  }
}
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08001e2d 	.word	0x08001e2d

08001d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d6c:	e02c      	b.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d028      	beq.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8001d7c:	f7fe fc38 	bl	80005f0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d21d      	bcs.n	8001dc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e00f      	b.n	8001de8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d0c3      	beq.n	8001d6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff ff7e 	bl	8001d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b21      	cmp	r3, #33	; 0x21
 8001e66:	d144      	bne.n	8001ef2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e70:	d11a      	bne.n	8001ea8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	1c9a      	adds	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	621a      	str	r2, [r3, #32]
 8001e9a:	e00e      	b.n	8001eba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	621a      	str	r2, [r3, #32]
 8001ea6:	e008      	b.n	8001eba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	1c59      	adds	r1, r3, #1
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6211      	str	r1, [r2, #32]
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001edc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff07 	bl	8001d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b22      	cmp	r3, #34	; 0x22
 8001f42:	d171      	bne.n	8002028 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4c:	d123      	bne.n	8001f96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10e      	bne.n	8001f7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	1c9a      	adds	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
 8001f78:	e029      	b.n	8001fce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
 8001f94:	e01b      	b.n	8001fce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6858      	ldr	r0, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	1c59      	adds	r1, r3, #1
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6291      	str	r1, [r2, #40]	; 0x28
 8001fae:	b2c2      	uxtb	r2, r0
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e00c      	b.n	8001fce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	1c58      	adds	r0, r3, #1
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	6288      	str	r0, [r1, #40]	; 0x28
 8001fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d120      	bne.n	8002024 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0220 	bic.w	r2, r2, #32
 8001ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 ffbe 	bl	8002f9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e002      	b.n	800202a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	e000      	b.n	800202a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002028:	2302      	movs	r3, #2
  }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002038:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800203c:	af00      	add	r7, sp, #0
 800203e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002042:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800204e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002052:	68d9      	ldr	r1, [r3, #12]
 8002054:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	ea40 0301 	orr.w	r3, r0, r1
 800205e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	431a      	orrs	r2, r3
 800206e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	431a      	orrs	r2, r3
 8002076:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8002082:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800208e:	f021 010c 	bic.w	r1, r1, #12
 8002092:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800209c:	430b      	orrs	r3, r1
 800209e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80020ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020b0:	6999      	ldr	r1, [r3, #24]
 80020b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	ea40 0301 	orr.w	r3, r0, r1
 80020bc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c8:	f040 824a 	bne.w	8002560 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b96      	ldr	r3, [pc, #600]	; (800232c <UART_SetConfig+0x2f8>)
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d006      	beq.n	80020e6 <UART_SetConfig+0xb2>
 80020d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b94      	ldr	r3, [pc, #592]	; (8002330 <UART_SetConfig+0x2fc>)
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f040 8129 	bne.w	8002338 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020e6:	f7ff f985 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 80020ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80020f8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80020fc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8002100:	4622      	mov	r2, r4
 8002102:	462b      	mov	r3, r5
 8002104:	1891      	adds	r1, r2, r2
 8002106:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800210a:	415b      	adcs	r3, r3
 800210c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002110:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8002114:	4621      	mov	r1, r4
 8002116:	1851      	adds	r1, r2, r1
 8002118:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800211c:	4629      	mov	r1, r5
 800211e:	414b      	adcs	r3, r1
 8002120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8002130:	4649      	mov	r1, r9
 8002132:	00cb      	lsls	r3, r1, #3
 8002134:	4641      	mov	r1, r8
 8002136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800213a:	4641      	mov	r1, r8
 800213c:	00ca      	lsls	r2, r1, #3
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	4603      	mov	r3, r0
 8002144:	4622      	mov	r2, r4
 8002146:	189b      	adds	r3, r3, r2
 8002148:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800214c:	462b      	mov	r3, r5
 800214e:	460a      	mov	r2, r1
 8002150:	eb42 0303 	adc.w	r3, r2, r3
 8002154:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002158:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002164:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8002168:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800216c:	460b      	mov	r3, r1
 800216e:	18db      	adds	r3, r3, r3
 8002170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002174:	4613      	mov	r3, r2
 8002176:	eb42 0303 	adc.w	r3, r2, r3
 800217a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800217e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002182:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8002186:	f7fe f87b 	bl	8000280 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4b69      	ldr	r3, [pc, #420]	; (8002334 <UART_SetConfig+0x300>)
 8002190:	fba3 2302 	umull	r2, r3, r3, r2
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	011c      	lsls	r4, r3, #4
 8002198:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800219c:	2200      	movs	r2, #0
 800219e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80021a2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80021a6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80021aa:	4642      	mov	r2, r8
 80021ac:	464b      	mov	r3, r9
 80021ae:	1891      	adds	r1, r2, r2
 80021b0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80021b4:	415b      	adcs	r3, r3
 80021b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80021ba:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80021be:	4641      	mov	r1, r8
 80021c0:	1851      	adds	r1, r2, r1
 80021c2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80021c6:	4649      	mov	r1, r9
 80021c8:	414b      	adcs	r3, r1
 80021ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80021da:	4659      	mov	r1, fp
 80021dc:	00cb      	lsls	r3, r1, #3
 80021de:	4651      	mov	r1, sl
 80021e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021e4:	4651      	mov	r1, sl
 80021e6:	00ca      	lsls	r2, r1, #3
 80021e8:	4610      	mov	r0, r2
 80021ea:	4619      	mov	r1, r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	4642      	mov	r2, r8
 80021f0:	189b      	adds	r3, r3, r2
 80021f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80021f6:	464b      	mov	r3, r9
 80021f8:	460a      	mov	r2, r1
 80021fa:	eb42 0303 	adc.w	r3, r2, r3
 80021fe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002202:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800220e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8002212:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8002216:	460b      	mov	r3, r1
 8002218:	18db      	adds	r3, r3, r3
 800221a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800221e:	4613      	mov	r3, r2
 8002220:	eb42 0303 	adc.w	r3, r2, r3
 8002224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002228:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800222c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8002230:	f7fe f826 	bl	8000280 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4611      	mov	r1, r2
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <UART_SetConfig+0x300>)
 800223c:	fba3 2301 	umull	r2, r3, r3, r1
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2264      	movs	r2, #100	; 0x64
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	1acb      	subs	r3, r1, r3
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <UART_SetConfig+0x300>)
 8002252:	fba3 2302 	umull	r2, r3, r3, r2
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800225e:	441c      	add	r4, r3
 8002260:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002264:	2200      	movs	r2, #0
 8002266:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800226a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800226e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8002272:	4642      	mov	r2, r8
 8002274:	464b      	mov	r3, r9
 8002276:	1891      	adds	r1, r2, r2
 8002278:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800227c:	415b      	adcs	r3, r3
 800227e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002282:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002286:	4641      	mov	r1, r8
 8002288:	1851      	adds	r1, r2, r1
 800228a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800228e:	4649      	mov	r1, r9
 8002290:	414b      	adcs	r3, r1
 8002292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80022a2:	4659      	mov	r1, fp
 80022a4:	00cb      	lsls	r3, r1, #3
 80022a6:	4651      	mov	r1, sl
 80022a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ac:	4651      	mov	r1, sl
 80022ae:	00ca      	lsls	r2, r1, #3
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	4642      	mov	r2, r8
 80022b8:	189b      	adds	r3, r3, r2
 80022ba:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80022be:	464b      	mov	r3, r9
 80022c0:	460a      	mov	r2, r1
 80022c2:	eb42 0303 	adc.w	r3, r2, r3
 80022c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80022d6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80022da:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80022de:	460b      	mov	r3, r1
 80022e0:	18db      	adds	r3, r3, r3
 80022e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022e6:	4613      	mov	r3, r2
 80022e8:	eb42 0303 	adc.w	r3, r2, r3
 80022ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022f0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80022f4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80022f8:	f7fd ffc2 	bl	8000280 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <UART_SetConfig+0x300>)
 8002302:	fba3 1302 	umull	r1, r3, r3, r2
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2164      	movs	r1, #100	; 0x64
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	3332      	adds	r3, #50	; 0x32
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <UART_SetConfig+0x300>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	f003 0207 	and.w	r2, r3, #7
 8002320:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4422      	add	r2, r4
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	e349      	b.n	80029c0 <UART_SetConfig+0x98c>
 800232c:	40011000 	.word	0x40011000
 8002330:	40011400 	.word	0x40011400
 8002334:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002338:	f7ff f848 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 800233c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002340:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002344:	2200      	movs	r2, #0
 8002346:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800234a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800234e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8002352:	4622      	mov	r2, r4
 8002354:	462b      	mov	r3, r5
 8002356:	1891      	adds	r1, r2, r2
 8002358:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800235c:	415b      	adcs	r3, r3
 800235e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002362:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002366:	4621      	mov	r1, r4
 8002368:	eb12 0a01 	adds.w	sl, r2, r1
 800236c:	4629      	mov	r1, r5
 800236e:	eb43 0b01 	adc.w	fp, r3, r1
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800237e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002386:	4692      	mov	sl, r2
 8002388:	469b      	mov	fp, r3
 800238a:	4623      	mov	r3, r4
 800238c:	eb1a 0303 	adds.w	r3, sl, r3
 8002390:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002394:	462b      	mov	r3, r5
 8002396:	eb4b 0303 	adc.w	r3, fp, r3
 800239a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800239e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80023aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80023ae:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80023b2:	460b      	mov	r3, r1
 80023b4:	18db      	adds	r3, r3, r3
 80023b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023ba:	4613      	mov	r3, r2
 80023bc:	eb42 0303 	adc.w	r3, r2, r3
 80023c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023c4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80023c8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80023cc:	f7fd ff58 	bl	8000280 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <UART_SetConfig+0x528>)
 80023d6:	fba3 2302 	umull	r2, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	011c      	lsls	r4, r3, #4
 80023de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80023e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80023ec:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80023f0:	4642      	mov	r2, r8
 80023f2:	464b      	mov	r3, r9
 80023f4:	1891      	adds	r1, r2, r2
 80023f6:	67b9      	str	r1, [r7, #120]	; 0x78
 80023f8:	415b      	adcs	r3, r3
 80023fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002400:	4641      	mov	r1, r8
 8002402:	1851      	adds	r1, r2, r1
 8002404:	6739      	str	r1, [r7, #112]	; 0x70
 8002406:	4649      	mov	r1, r9
 8002408:	414b      	adcs	r3, r1
 800240a:	677b      	str	r3, [r7, #116]	; 0x74
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8002418:	4659      	mov	r1, fp
 800241a:	00cb      	lsls	r3, r1, #3
 800241c:	4651      	mov	r1, sl
 800241e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002422:	4651      	mov	r1, sl
 8002424:	00ca      	lsls	r2, r1, #3
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	4603      	mov	r3, r0
 800242c:	4642      	mov	r2, r8
 800242e:	189b      	adds	r3, r3, r2
 8002430:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002434:	464b      	mov	r3, r9
 8002436:	460a      	mov	r2, r1
 8002438:	eb42 0303 	adc.w	r3, r2, r3
 800243c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002440:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800244c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8002450:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8002454:	460b      	mov	r3, r1
 8002456:	18db      	adds	r3, r3, r3
 8002458:	66bb      	str	r3, [r7, #104]	; 0x68
 800245a:	4613      	mov	r3, r2
 800245c:	eb42 0303 	adc.w	r3, r2, r3
 8002460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002462:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002466:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800246a:	f7fd ff09 	bl	8000280 <__aeabi_uldivmod>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4611      	mov	r1, r2
 8002474:	4b39      	ldr	r3, [pc, #228]	; (800255c <UART_SetConfig+0x528>)
 8002476:	fba3 2301 	umull	r2, r3, r3, r1
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2264      	movs	r2, #100	; 0x64
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	1acb      	subs	r3, r1, r3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800248a:	4b34      	ldr	r3, [pc, #208]	; (800255c <UART_SetConfig+0x528>)
 800248c:	fba3 2302 	umull	r2, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002498:	441c      	add	r4, r3
 800249a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80024a4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80024a8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80024ac:	4642      	mov	r2, r8
 80024ae:	464b      	mov	r3, r9
 80024b0:	1891      	adds	r1, r2, r2
 80024b2:	6639      	str	r1, [r7, #96]	; 0x60
 80024b4:	415b      	adcs	r3, r3
 80024b6:	667b      	str	r3, [r7, #100]	; 0x64
 80024b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80024bc:	4641      	mov	r1, r8
 80024be:	1851      	adds	r1, r2, r1
 80024c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80024c2:	4649      	mov	r1, r9
 80024c4:	414b      	adcs	r3, r1
 80024c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80024d4:	4659      	mov	r1, fp
 80024d6:	00cb      	lsls	r3, r1, #3
 80024d8:	4651      	mov	r1, sl
 80024da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024de:	4651      	mov	r1, sl
 80024e0:	00ca      	lsls	r2, r1, #3
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	4642      	mov	r2, r8
 80024ea:	189b      	adds	r3, r3, r2
 80024ec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80024f0:	464b      	mov	r3, r9
 80024f2:	460a      	mov	r2, r1
 80024f4:	eb42 0303 	adc.w	r3, r2, r3
 80024f8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80024fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002508:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800250c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8002510:	460b      	mov	r3, r1
 8002512:	18db      	adds	r3, r3, r3
 8002514:	653b      	str	r3, [r7, #80]	; 0x50
 8002516:	4613      	mov	r3, r2
 8002518:	eb42 0303 	adc.w	r3, r2, r3
 800251c:	657b      	str	r3, [r7, #84]	; 0x54
 800251e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002522:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002526:	f7fd feab 	bl	8000280 <__aeabi_uldivmod>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <UART_SetConfig+0x528>)
 8002530:	fba3 1302 	umull	r1, r3, r3, r2
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	2164      	movs	r1, #100	; 0x64
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	3332      	adds	r3, #50	; 0x32
 8002542:	4a06      	ldr	r2, [pc, #24]	; (800255c <UART_SetConfig+0x528>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	f003 0207 	and.w	r2, r3, #7
 800254e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4422      	add	r2, r4
 8002556:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002558:	e232      	b.n	80029c0 <UART_SetConfig+0x98c>
 800255a:	bf00      	nop
 800255c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002560:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b8d      	ldr	r3, [pc, #564]	; (800279c <UART_SetConfig+0x768>)
 8002568:	429a      	cmp	r2, r3
 800256a:	d006      	beq.n	800257a <UART_SetConfig+0x546>
 800256c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b8b      	ldr	r3, [pc, #556]	; (80027a0 <UART_SetConfig+0x76c>)
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8117 	bne.w	80027a8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800257a:	f7fe ff3b 	bl	80013f4 <HAL_RCC_GetPCLK2Freq>
 800257e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002582:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800258c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002590:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002594:	4622      	mov	r2, r4
 8002596:	462b      	mov	r3, r5
 8002598:	1891      	adds	r1, r2, r2
 800259a:	64b9      	str	r1, [r7, #72]	; 0x48
 800259c:	415b      	adcs	r3, r3
 800259e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025a4:	4621      	mov	r1, r4
 80025a6:	eb12 0801 	adds.w	r8, r2, r1
 80025aa:	4629      	mov	r1, r5
 80025ac:	eb43 0901 	adc.w	r9, r3, r1
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c4:	4690      	mov	r8, r2
 80025c6:	4699      	mov	r9, r3
 80025c8:	4623      	mov	r3, r4
 80025ca:	eb18 0303 	adds.w	r3, r8, r3
 80025ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80025d2:	462b      	mov	r3, r5
 80025d4:	eb49 0303 	adc.w	r3, r9, r3
 80025d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80025dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025e8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80025f8:	4629      	mov	r1, r5
 80025fa:	008b      	lsls	r3, r1, #2
 80025fc:	4621      	mov	r1, r4
 80025fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002602:	4621      	mov	r1, r4
 8002604:	008a      	lsls	r2, r1, #2
 8002606:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800260a:	f7fd fe39 	bl	8000280 <__aeabi_uldivmod>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <UART_SetConfig+0x770>)
 8002614:	fba3 2302 	umull	r2, r3, r3, r2
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	011c      	lsls	r4, r3, #4
 800261c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002626:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800262a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800262e:	4642      	mov	r2, r8
 8002630:	464b      	mov	r3, r9
 8002632:	1891      	adds	r1, r2, r2
 8002634:	6439      	str	r1, [r7, #64]	; 0x40
 8002636:	415b      	adcs	r3, r3
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
 800263a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800263e:	4641      	mov	r1, r8
 8002640:	1851      	adds	r1, r2, r1
 8002642:	63b9      	str	r1, [r7, #56]	; 0x38
 8002644:	4649      	mov	r1, r9
 8002646:	414b      	adcs	r3, r1
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002656:	4659      	mov	r1, fp
 8002658:	00cb      	lsls	r3, r1, #3
 800265a:	4651      	mov	r1, sl
 800265c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002660:	4651      	mov	r1, sl
 8002662:	00ca      	lsls	r2, r1, #3
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	4603      	mov	r3, r0
 800266a:	4642      	mov	r2, r8
 800266c:	189b      	adds	r3, r3, r2
 800266e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002672:	464b      	mov	r3, r9
 8002674:	460a      	mov	r2, r1
 8002676:	eb42 0303 	adc.w	r3, r2, r3
 800267a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800267e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800268a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800269a:	4649      	mov	r1, r9
 800269c:	008b      	lsls	r3, r1, #2
 800269e:	4641      	mov	r1, r8
 80026a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a4:	4641      	mov	r1, r8
 80026a6:	008a      	lsls	r2, r1, #2
 80026a8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80026ac:	f7fd fde8 	bl	8000280 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <UART_SetConfig+0x770>)
 80026b6:	fba3 1302 	umull	r1, r3, r3, r2
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2164      	movs	r1, #100	; 0x64
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	3332      	adds	r3, #50	; 0x32
 80026c8:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <UART_SetConfig+0x770>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d4:	441c      	add	r4, r3
 80026d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80026e0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80026e4:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	1891      	adds	r1, r2, r2
 80026ee:	6339      	str	r1, [r7, #48]	; 0x30
 80026f0:	415b      	adcs	r3, r3
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
 80026f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80026f8:	4641      	mov	r1, r8
 80026fa:	1851      	adds	r1, r2, r1
 80026fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80026fe:	4649      	mov	r1, r9
 8002700:	414b      	adcs	r3, r1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8002710:	4659      	mov	r1, fp
 8002712:	00cb      	lsls	r3, r1, #3
 8002714:	4651      	mov	r1, sl
 8002716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800271a:	4651      	mov	r1, sl
 800271c:	00ca      	lsls	r2, r1, #3
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	4603      	mov	r3, r0
 8002724:	4642      	mov	r2, r8
 8002726:	189b      	adds	r3, r3, r2
 8002728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800272c:	464b      	mov	r3, r9
 800272e:	460a      	mov	r2, r1
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002738:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002744:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8002754:	4649      	mov	r1, r9
 8002756:	008b      	lsls	r3, r1, #2
 8002758:	4641      	mov	r1, r8
 800275a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800275e:	4641      	mov	r1, r8
 8002760:	008a      	lsls	r2, r1, #2
 8002762:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002766:	f7fd fd8b 	bl	8000280 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <UART_SetConfig+0x770>)
 8002770:	fba3 1302 	umull	r1, r3, r3, r2
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	2164      	movs	r1, #100	; 0x64
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	3332      	adds	r3, #50	; 0x32
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <UART_SetConfig+0x770>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	f003 020f 	and.w	r2, r3, #15
 800278e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4422      	add	r2, r4
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e112      	b.n	80029c0 <UART_SetConfig+0x98c>
 800279a:	bf00      	nop
 800279c:	40011000 	.word	0x40011000
 80027a0:	40011400 	.word	0x40011400
 80027a4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80027a8:	f7fe fe10 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 80027ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80027ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80027be:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80027c2:	4642      	mov	r2, r8
 80027c4:	464b      	mov	r3, r9
 80027c6:	1891      	adds	r1, r2, r2
 80027c8:	6239      	str	r1, [r7, #32]
 80027ca:	415b      	adcs	r3, r3
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
 80027ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027d2:	4641      	mov	r1, r8
 80027d4:	1854      	adds	r4, r2, r1
 80027d6:	4649      	mov	r1, r9
 80027d8:	eb43 0501 	adc.w	r5, r3, r1
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	00eb      	lsls	r3, r5, #3
 80027e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ea:	00e2      	lsls	r2, r4, #3
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	4643      	mov	r3, r8
 80027f2:	18e3      	adds	r3, r4, r3
 80027f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80027f8:	464b      	mov	r3, r9
 80027fa:	eb45 0303 	adc.w	r3, r5, r3
 80027fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002802:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800280e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800281e:	4629      	mov	r1, r5
 8002820:	008b      	lsls	r3, r1, #2
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002828:	4621      	mov	r1, r4
 800282a:	008a      	lsls	r2, r1, #2
 800282c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002830:	f7fd fd26 	bl	8000280 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4b64      	ldr	r3, [pc, #400]	; (80029cc <UART_SetConfig+0x998>)
 800283a:	fba3 2302 	umull	r2, r3, r3, r2
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	011c      	lsls	r4, r3, #4
 8002842:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800284c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002850:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8002854:	4642      	mov	r2, r8
 8002856:	464b      	mov	r3, r9
 8002858:	1891      	adds	r1, r2, r2
 800285a:	61b9      	str	r1, [r7, #24]
 800285c:	415b      	adcs	r3, r3
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002864:	4641      	mov	r1, r8
 8002866:	1851      	adds	r1, r2, r1
 8002868:	6139      	str	r1, [r7, #16]
 800286a:	4649      	mov	r1, r9
 800286c:	414b      	adcs	r3, r1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800287c:	4659      	mov	r1, fp
 800287e:	00cb      	lsls	r3, r1, #3
 8002880:	4651      	mov	r1, sl
 8002882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002886:	4651      	mov	r1, sl
 8002888:	00ca      	lsls	r2, r1, #3
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	4603      	mov	r3, r0
 8002890:	4642      	mov	r2, r8
 8002892:	189b      	adds	r3, r3, r2
 8002894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002898:	464b      	mov	r3, r9
 800289a:	460a      	mov	r2, r1
 800289c:	eb42 0303 	adc.w	r3, r2, r3
 80028a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80028a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80028b0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80028c0:	4649      	mov	r1, r9
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4641      	mov	r1, r8
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80028d2:	f7fd fcd5 	bl	8000280 <__aeabi_uldivmod>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <UART_SetConfig+0x998>)
 80028dc:	fba3 1302 	umull	r1, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a37      	ldr	r2, [pc, #220]	; (80029cc <UART_SetConfig+0x998>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028fa:	441c      	add	r4, r3
 80028fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002900:	2200      	movs	r2, #0
 8002902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002906:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800290a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800290e:	4642      	mov	r2, r8
 8002910:	464b      	mov	r3, r9
 8002912:	1891      	adds	r1, r2, r2
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	415b      	adcs	r3, r3
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800291e:	4641      	mov	r1, r8
 8002920:	1851      	adds	r1, r2, r1
 8002922:	6039      	str	r1, [r7, #0]
 8002924:	4649      	mov	r1, r9
 8002926:	414b      	adcs	r3, r1
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002936:	4659      	mov	r1, fp
 8002938:	00cb      	lsls	r3, r1, #3
 800293a:	4651      	mov	r1, sl
 800293c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002940:	4651      	mov	r1, sl
 8002942:	00ca      	lsls	r2, r1, #3
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	4603      	mov	r3, r0
 800294a:	4642      	mov	r2, r8
 800294c:	189b      	adds	r3, r3, r2
 800294e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002952:	464b      	mov	r3, r9
 8002954:	460a      	mov	r2, r1
 8002956:	eb42 0303 	adc.w	r3, r2, r3
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800295e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800296a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800297a:	4649      	mov	r1, r9
 800297c:	008b      	lsls	r3, r1, #2
 800297e:	4641      	mov	r1, r8
 8002980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002984:	4641      	mov	r1, r8
 8002986:	008a      	lsls	r2, r1, #2
 8002988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800298c:	f7fd fc78 	bl	8000280 <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <UART_SetConfig+0x998>)
 8002996:	fba3 1302 	umull	r1, r3, r3, r2
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2164      	movs	r1, #100	; 0x64
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	3332      	adds	r3, #50	; 0x32
 80029a8:	4a08      	ldr	r2, [pc, #32]	; (80029cc <UART_SetConfig+0x998>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	f003 020f 	and.w	r2, r3, #15
 80029b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4422      	add	r2, r4
 80029bc:	609a      	str	r2, [r3, #8]
}
 80029be:	e7ff      	b.n	80029c0 <UART_SetConfig+0x98c>
 80029c0:	bf00      	nop
 80029c2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80029c6:	46bd      	mov	sp, r7
 80029c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029cc:	51eb851f 	.word	0x51eb851f

080029d0 <print_task>:

extern uint32_t count_size6;
extern uint32_t count_size1;

void print_task(void *param)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b094      	sub	sp, #80	; 0x50
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	uint8_t arr[10];
	uint8_t msg[50];
//	xSemaphoreTake(xSemaphore, portMAX_DELAY);
	while (1)
	{
		if (xQueueReceive(queue_print, &msg, portMAX_DELAY) == pdPASS)
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <print_task+0x94>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f107 010c 	add.w	r1, r7, #12
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	4618      	mov	r0, r3
 80029e6:	f001 f8eb 	bl	8003bc0 <xQueueReceive>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d1f3      	bne.n	80029d8 <print_task+0x8>
		{
			free_spaces = uxQueueSpacesAvailable(queue_print);
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <print_task+0x94>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 facf 	bl	8003f98 <uxQueueSpacesAvailable>
 80029fa:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (free_spaces == 1)
 80029fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <print_task+0x40>
				xSemaphoreGive(xSemaphore);
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <print_task+0x98>)
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f000 fe94 	bl	8003738 <xQueueGenericSend>
			sprintf((char *)arr, "Left: %u\n", (unsigned int)free_spaces);
 8002a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a16:	4915      	ldr	r1, [pc, #84]	; (8002a6c <print_task+0x9c>)
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fb9f 	bl	800615c <siprintf>
			HAL_UART_Transmit(&huart2, arr, 10, 1000);
 8002a1e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	220a      	movs	r2, #10
 8002a28:	4811      	ldr	r0, [pc, #68]	; (8002a70 <print_task+0xa0>)
 8002a2a:	f7fe ff94 	bl	8001956 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, msg, 50, HAL_MAX_DELAY);
 8002a2e:	f107 010c 	add.w	r1, r7, #12
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	2232      	movs	r2, #50	; 0x32
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <print_task+0xa0>)
 8002a3a:	f7fe ff8c 	bl	8001956 <HAL_UART_Transmit>
			memset(msg, 0, sizeof(msg));
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	2232      	movs	r2, #50	; 0x32
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fb80 	bl	800614c <memset>
			memset(arr, 0, sizeof(arr));
 8002a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a50:	220a      	movs	r2, #10
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 fb79 	bl	800614c <memset>
			vTaskDelay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f001 fd8c 	bl	8004578 <vTaskDelay>
		if (xQueueReceive(queue_print, &msg, portMAX_DELAY) == pdPASS)
 8002a60:	e7ba      	b.n	80029d8 <print_task+0x8>
 8002a62:	bf00      	nop
 8002a64:	200001a4 	.word	0x200001a4
 8002a68:	200001a8 	.word	0x200001a8
 8002a6c:	08006a50 	.word	0x08006a50
 8002a70:	200000d8 	.word	0x200000d8

08002a74 <led_task>:
		}
	}
}
void led_task(void *param)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	
	while (1)
	{
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <led_task+0x44>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	4618      	mov	r0, r3
 8002a86:	f001 f97b 	bl	8003d80 <xQueueSemaphoreTake>
		uint32_t count = HAL_GetTick();
 8002a8a:	f7fd fdb1 	bl	80005f0 <HAL_GetTick>
 8002a8e:	60f8      	str	r0, [r7, #12]
		while (HAL_GetTick() - count < 10000)
 8002a90:	e007      	b.n	8002aa2 <led_task+0x2e>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a96:	4809      	ldr	r0, [pc, #36]	; (8002abc <led_task+0x48>)
 8002a98:	f7fe f857 	bl	8000b4a <HAL_GPIO_TogglePin>
			vTaskDelay(100);
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	f001 fd6b 	bl	8004578 <vTaskDelay>
		while (HAL_GetTick() - count < 10000)
 8002aa2:	f7fd fda5 	bl	80005f0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d9ee      	bls.n	8002a92 <led_task+0x1e>
	{
 8002ab4:	e7e2      	b.n	8002a7c <led_task+0x8>
 8002ab6:	bf00      	nop
 8002ab8:	200001a8 	.word	0x200001a8
 8002abc:	40020c00 	.word	0x40020c00

08002ac0 <receive_task>:
		}
	}
}
void receive_task(void*param )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xsemaphoreIT, portMAX_DELAY);
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <receive_task+0xe4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f955 	bl	8003d80 <xQueueSemaphoreTake>
		if (uart.Instance == USART1)
 8002ad6:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <receive_task+0xe8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a34      	ldr	r2, [pc, #208]	; (8002bac <receive_task+0xec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d12d      	bne.n	8002b3c <receive_task+0x7c>
		{
			if (count_size1 < 100)
 8002ae0:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <receive_task+0xf0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b63      	cmp	r3, #99	; 0x63
 8002ae6:	d823      	bhi.n	8002b30 <receive_task+0x70>
			{
				data1[count_size1] = data_byte1;
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <receive_task+0xf0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <receive_task+0xf4>)
 8002aee:	7811      	ldrb	r1, [r2, #0]
 8002af0:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <receive_task+0xf8>)
 8002af2:	54d1      	strb	r1, [r2, r3]
				count_size1++;
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <receive_task+0xf0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <receive_task+0xf0>)
 8002afc:	6013      	str	r3, [r2, #0]

				if (data_byte1 == '\n')
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <receive_task+0xf4>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b0a      	cmp	r3, #10
 8002b04:	d114      	bne.n	8002b30 <receive_task+0x70>
				{
					data1[count_size1] = '\0';
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <receive_task+0xf0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <receive_task+0xf8>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	54d1      	strb	r1, [r2, r3]
					xQueueSend(queue_print, data1,portMAX_DELAY);
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <receive_task+0xfc>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1a:	4927      	ldr	r1, [pc, #156]	; (8002bb8 <receive_task+0xf8>)
 8002b1c:	f000 fe0c 	bl	8003738 <xQueueGenericSend>
					count_size1 = 0;
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <receive_task+0xf0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
					memset(data1, 0, sizeof(data1));
 8002b26:	2232      	movs	r2, #50	; 0x32
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4823      	ldr	r0, [pc, #140]	; (8002bb8 <receive_task+0xf8>)
 8002b2c:	f003 fb0e 	bl	800614c <memset>
				}
			}

			HAL_UART_Receive_IT(&huart1, &data_byte1, 1);
 8002b30:	2201      	movs	r2, #1
 8002b32:	4920      	ldr	r1, [pc, #128]	; (8002bb4 <receive_task+0xf4>)
 8002b34:	4822      	ldr	r0, [pc, #136]	; (8002bc0 <receive_task+0x100>)
 8002b36:	f7fe ffa7 	bl	8001a88 <HAL_UART_Receive_IT>
 8002b3a:	e7c5      	b.n	8002ac8 <receive_task+0x8>
		}
		else if (uart.Instance == USART6)
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <receive_task+0xe8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <receive_task+0x104>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d1c0      	bne.n	8002ac8 <receive_task+0x8>
		{

			if (count_size6 < 100)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <receive_task+0x108>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b63      	cmp	r3, #99	; 0x63
 8002b4c:	d823      	bhi.n	8002b96 <receive_task+0xd6>
			{
				data6[count_size6] = data_byte6;
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <receive_task+0x108>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <receive_task+0x10c>)
 8002b54:	7811      	ldrb	r1, [r2, #0]
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <receive_task+0x110>)
 8002b58:	54d1      	strb	r1, [r2, r3]
				count_size6++;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <receive_task+0x108>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <receive_task+0x108>)
 8002b62:	6013      	str	r3, [r2, #0]
				if (data_byte6 == '\n')
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <receive_task+0x10c>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b0a      	cmp	r3, #10
 8002b6a:	d114      	bne.n	8002b96 <receive_task+0xd6>
				{
					data6[count_size6] = '\0';
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <receive_task+0x108>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <receive_task+0x110>)
 8002b72:	2100      	movs	r1, #0
 8002b74:	54d1      	strb	r1, [r2, r3]
					xQueueSend(queue_print, data6,portMAX_DELAY);
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <receive_task+0xfc>)
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	4913      	ldr	r1, [pc, #76]	; (8002bd0 <receive_task+0x110>)
 8002b82:	f000 fdd9 	bl	8003738 <xQueueGenericSend>
					count_size6 = 0;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <receive_task+0x108>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
					memset(data6, 0, sizeof(data6));
 8002b8c:	2232      	movs	r2, #50	; 0x32
 8002b8e:	2100      	movs	r1, #0
 8002b90:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <receive_task+0x110>)
 8002b92:	f003 fadb 	bl	800614c <memset>
				}
			}

			HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	490c      	ldr	r1, [pc, #48]	; (8002bcc <receive_task+0x10c>)
 8002b9a:	480e      	ldr	r0, [pc, #56]	; (8002bd4 <receive_task+0x114>)
 8002b9c:	f7fe ff74 	bl	8001a88 <HAL_UART_Receive_IT>
		xSemaphoreTake(xsemaphoreIT, portMAX_DELAY);
 8002ba0:	e792      	b.n	8002ac8 <receive_task+0x8>
 8002ba2:	bf00      	nop
 8002ba4:	200001ac 	.word	0x200001ac
 8002ba8:	20000158 	.word	0x20000158
 8002bac:	40011000 	.word	0x40011000
 8002bb0:	2000021c 	.word	0x2000021c
 8002bb4:	20000216 	.word	0x20000216
 8002bb8:	200001b0 	.word	0x200001b0
 8002bbc:	200001a4 	.word	0x200001a4
 8002bc0:	20000098 	.word	0x20000098
 8002bc4:	40011400 	.word	0x40011400
 8002bc8:	20000218 	.word	0x20000218
 8002bcc:	20000217 	.word	0x20000217
 8002bd0:	200001e4 	.word	0x200001e4
 8002bd4:	20000118 	.word	0x20000118

08002bd8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bde:	f7fd fcd1 	bl	8000584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be2:	f000 f8ad 	bl	8002d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be6:	f000 f987 	bl	8002ef8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002bea:	f000 f907 	bl	8002dfc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002bee:	f000 f92f 	bl	8002e50 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002bf2:	f000 f957 	bl	8002ea4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(print_task, "print_task", 400, NULL, 2, &handle_print_task);
 8002bf6:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <main+0x128>)
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c04:	493f      	ldr	r1, [pc, #252]	; (8002d04 <main+0x12c>)
 8002c06:	4840      	ldr	r0, [pc, #256]	; (8002d08 <main+0x130>)
 8002c08:	f001 fb70 	bl	80042ec <xTaskCreate>
 8002c0c:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d00a      	beq.n	8002c2a <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <main+0x50>

  status = xTaskCreate(led_task, "led-task", 200, NULL, 3, &handle_led_task);
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <main+0x134>)
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2303      	movs	r3, #3
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	22c8      	movs	r2, #200	; 0xc8
 8002c36:	4936      	ldr	r1, [pc, #216]	; (8002d10 <main+0x138>)
 8002c38:	4836      	ldr	r0, [pc, #216]	; (8002d14 <main+0x13c>)
 8002c3a:	f001 fb57 	bl	80042ec <xTaskCreate>
 8002c3e:	60f8      	str	r0, [r7, #12]
  queue_print = xQueueCreate(20, sizeof(data1));
 8002c40:	2200      	movs	r2, #0
 8002c42:	2132      	movs	r1, #50	; 0x32
 8002c44:	2014      	movs	r0, #20
 8002c46:	f000 fcc1 	bl	80035cc <xQueueGenericCreate>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a32      	ldr	r2, [pc, #200]	; (8002d18 <main+0x140>)
 8002c4e:	6013      	str	r3, [r2, #0]
  configASSERT(queue_print != NULL);
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <main+0x140>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <main+0x96>
        __asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	607b      	str	r3, [r7, #4]
    }
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <main+0x94>

  status = xTaskCreate(receive_task, "receive_task", 400, NULL, 4, &handle_receive_task);
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <main+0x144>)
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	2304      	movs	r3, #4
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c7c:	4928      	ldr	r1, [pc, #160]	; (8002d20 <main+0x148>)
 8002c7e:	4829      	ldr	r0, [pc, #164]	; (8002d24 <main+0x14c>)
 8002c80:	f001 fb34 	bl	80042ec <xTaskCreate>
 8002c84:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d00a      	beq.n	8002ca2 <main+0xca>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	603b      	str	r3, [r7, #0]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <main+0xc8>

  vSemaphoreCreateBinary(xSemaphore);
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2001      	movs	r0, #1
 8002ca8:	f000 fc90 	bl	80035cc <xQueueGenericCreate>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <main+0x150>)
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <main+0x150>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <main+0xf0>
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <main+0x150>)
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	f000 fd38 	bl	8003738 <xQueueGenericSend>
  xsemaphoreIT = xSemaphoreCreateCounting(20, 0);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2014      	movs	r0, #20
 8002ccc:	f000 fd00 	bl	80036d0 <xQueueCreateCountingSemaphore>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <main+0x154>)
 8002cd4:	6013      	str	r3, [r2, #0]

  // run scheduler

  // memset(data6,0,sizeof(data6));
  HAL_UART_Receive_IT(&huart1, &data_byte1, 1);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4915      	ldr	r1, [pc, #84]	; (8002d30 <main+0x158>)
 8002cda:	4816      	ldr	r0, [pc, #88]	; (8002d34 <main+0x15c>)
 8002cdc:	f7fe fed4 	bl	8001a88 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &data_byte6, 1);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4915      	ldr	r1, [pc, #84]	; (8002d38 <main+0x160>)
 8002ce4:	4815      	ldr	r0, [pc, #84]	; (8002d3c <main+0x164>)
 8002ce6:	f7fe fecf 	bl	8001a88 <HAL_UART_Receive_IT>

  xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <main+0x150>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f844 	bl	8003d80 <xQueueSemaphoreTake>

  vTaskStartScheduler();
 8002cf8:	f001 fc72 	bl	80045e0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <main+0x124>
 8002cfe:	bf00      	nop
 8002d00:	20000198 	.word	0x20000198
 8002d04:	08006a5c 	.word	0x08006a5c
 8002d08:	080029d1 	.word	0x080029d1
 8002d0c:	2000019c 	.word	0x2000019c
 8002d10:	08006a68 	.word	0x08006a68
 8002d14:	08002a75 	.word	0x08002a75
 8002d18:	200001a4 	.word	0x200001a4
 8002d1c:	200001a0 	.word	0x200001a0
 8002d20:	08006a74 	.word	0x08006a74
 8002d24:	08002ac1 	.word	0x08002ac1
 8002d28:	200001a8 	.word	0x200001a8
 8002d2c:	200001ac 	.word	0x200001ac
 8002d30:	20000216 	.word	0x20000216
 8002d34:	20000098 	.word	0x20000098
 8002d38:	20000217 	.word	0x20000217
 8002d3c:	20000118 	.word	0x20000118

08002d40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b094      	sub	sp, #80	; 0x50
 8002d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d46:	f107 0320 	add.w	r3, r7, #32
 8002d4a:	2230      	movs	r2, #48	; 0x30
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 f9fc 	bl	800614c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <SystemClock_Config+0xb4>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <SystemClock_Config+0xb4>)
 8002d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <SystemClock_Config+0xb4>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d80:	2300      	movs	r3, #0
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <SystemClock_Config+0xb8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <SystemClock_Config+0xb8>)
 8002d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <SystemClock_Config+0xb8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da4:	2310      	movs	r3, #16
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fee5 	bl	8000b80 <HAL_RCC_OscConfig>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002dbc:	f000 f928 	bl	8003010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dc0:	230f      	movs	r3, #15
 8002dc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f93e 	bl	800105c <HAL_RCC_ClockConfig>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002de6:	f000 f913 	bl	8003010 <Error_Handler>
  }
}
 8002dea:	bf00      	nop
 8002dec:	3750      	adds	r7, #80	; 0x50
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000

08002dfc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e02:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <MX_USART1_UART_Init+0x50>)
 8002e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e22:	220c      	movs	r2, #12
 8002e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_USART1_UART_Init+0x4c>)
 8002e34:	f7fe fd42 	bl	80018bc <HAL_UART_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e3e:	f000 f8e7 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000098 	.word	0x20000098
 8002e4c:	40011000 	.word	0x40011000

08002e50 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e56:	4a12      	ldr	r2, [pc, #72]	; (8002ea0 <MX_USART2_UART_Init+0x50>)
 8002e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e5c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e76:	220c      	movs	r2, #12
 8002e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e86:	4805      	ldr	r0, [pc, #20]	; (8002e9c <MX_USART2_UART_Init+0x4c>)
 8002e88:	f7fe fd18 	bl	80018bc <HAL_UART_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e92:	f000 f8bd 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200000d8 	.word	0x200000d8
 8002ea0:	40004400 	.word	0x40004400

08002ea4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <MX_USART6_UART_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eb4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_USART6_UART_Init+0x4c>)
 8002edc:	f7fe fcee 	bl	80018bc <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002ee6:	f000 f893 	bl	8003010 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000118 	.word	0x20000118
 8002ef4:	40011400 	.word	0x40011400

08002ef8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efe:	f107 030c 	add.w	r3, r7, #12
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	4b20      	ldr	r3, [pc, #128]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <MX_GPIO_Init+0x9c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f68:	480b      	ldr	r0, [pc, #44]	; (8002f98 <MX_GPIO_Init+0xa0>)
 8002f6a:	f7fd fdd5 	bl	8000b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f80:	f107 030c 	add.w	r3, r7, #12
 8002f84:	4619      	mov	r1, r3
 8002f86:	4804      	ldr	r0, [pc, #16]	; (8002f98 <MX_GPIO_Init+0xa0>)
 8002f88:	f7fd fc42 	bl	8000810 <HAL_GPIO_Init>
}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020c00 	.word	0x40020c00

08002f9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  uart.Instance = huart->Instance;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_UART_RxCpltCallback+0x44>)
 8002fae:	6013      	str	r3, [r2, #0]
  xSemaphoreGiveFromISR(xsemaphoreIT, &xHigherPriorityTaskWoken);
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_UART_RxCpltCallback+0x48>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f107 020c 	add.w	r2, r7, #12
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fd64 	bl	8003a88 <xQueueGiveFromISR>
  portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_UART_RxCpltCallback+0x3a>
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_UART_RxCpltCallback+0x4c>)
 8002fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	f3bf 8f6f 	isb	sy
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000158 	.word	0x20000158
 8002fe4:	200001ac 	.word	0x200001ac
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002ffe:	f7fd fae3 	bl	80005c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40000c00 	.word	0x40000c00

08003010 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_MspInit+0x4c>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a0f      	ldr	r2, [pc, #60]	; (800306c <HAL_MspInit+0x4c>)
 8003030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_MspInit+0x4c>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_MspInit+0x4c>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_MspInit+0x4c>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_MspInit+0x4c>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a53      	ldr	r2, [pc, #332]	; (80031dc <HAL_UART_MspInit+0x16c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d135      	bne.n	80030fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a51      	ldr	r2, [pc, #324]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_UART_MspInit+0x170>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <HAL_UART_MspInit+0x170>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <HAL_UART_MspInit+0x170>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_UART_MspInit+0x170>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d8:	2303      	movs	r3, #3
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030dc:	2307      	movs	r3, #7
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e4:	4619      	mov	r1, r3
 80030e6:	483f      	ldr	r0, [pc, #252]	; (80031e4 <HAL_UART_MspInit+0x174>)
 80030e8:	f7fd fb92 	bl	8000810 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	2106      	movs	r1, #6
 80030f0:	2025      	movs	r0, #37	; 0x25
 80030f2:	f7fd fb41 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030f6:	2025      	movs	r0, #37	; 0x25
 80030f8:	f7fd fb5a 	bl	80007b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030fc:	e06a      	b.n	80031d4 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a39      	ldr	r2, [pc, #228]	; (80031e8 <HAL_UART_MspInit+0x178>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d12c      	bne.n	8003162 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003116:	6413      	str	r3, [r2, #64]	; 0x40
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6313      	str	r3, [r2, #48]	; 0x30
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003140:	230c      	movs	r3, #12
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003148:	2301      	movs	r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314c:	2303      	movs	r3, #3
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003150:	2307      	movs	r3, #7
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003158:	4619      	mov	r1, r3
 800315a:	4822      	ldr	r0, [pc, #136]	; (80031e4 <HAL_UART_MspInit+0x174>)
 800315c:	f7fd fb58 	bl	8000810 <HAL_GPIO_Init>
}
 8003160:	e038      	b.n	80031d4 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_UART_MspInit+0x17c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d133      	bne.n	80031d4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003176:	f043 0320 	orr.w	r3, r3, #32
 800317a:	6453      	str	r3, [r2, #68]	; 0x44
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_UART_MspInit+0x170>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_UART_MspInit+0x170>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031a4:	23c0      	movs	r3, #192	; 0xc0
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031b4:	2308      	movs	r3, #8
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031bc:	4619      	mov	r1, r3
 80031be:	480c      	ldr	r0, [pc, #48]	; (80031f0 <HAL_UART_MspInit+0x180>)
 80031c0:	f7fd fb26 	bl	8000810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 7, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2107      	movs	r1, #7
 80031c8:	2047      	movs	r0, #71	; 0x47
 80031ca:	f7fd fad5 	bl	8000778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031ce:	2047      	movs	r0, #71	; 0x47
 80031d0:	f7fd faee 	bl	80007b0 <HAL_NVIC_EnableIRQ>
}
 80031d4:	bf00      	nop
 80031d6:	3738      	adds	r7, #56	; 0x38
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020000 	.word	0x40020000
 80031e8:	40004400 	.word	0x40004400
 80031ec:	40011400 	.word	0x40011400
 80031f0:	40020800 	.word	0x40020800

080031f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8003204:	2200      	movs	r2, #0
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	2032      	movs	r0, #50	; 0x32
 800320a:	f7fd fab5 	bl	8000778 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800320e:	2032      	movs	r0, #50	; 0x32
 8003210:	f7fd face 	bl	80007b0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_InitTick+0xa0>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_InitTick+0xa0>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	6413      	str	r3, [r2, #64]	; 0x40
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_InitTick+0xa0>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003230:	f107 0210 	add.w	r2, r7, #16
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe f8ee 	bl	800141c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe f8c4 	bl	80013cc <HAL_RCC_GetPCLK1Freq>
 8003244:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003248:	4a13      	ldr	r2, [pc, #76]	; (8003298 <HAL_InitTick+0xa4>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0c9b      	lsrs	r3, r3, #18
 8003250:	3b01      	subs	r3, #1
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_InitTick+0xa8>)
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <HAL_InitTick+0xac>)
 8003258:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_InitTick+0xa8>)
 800325c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003260:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <HAL_InitTick+0xa8>)
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_InitTick+0xa8>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_InitTick+0xa8>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8003274:	4809      	ldr	r0, [pc, #36]	; (800329c <HAL_InitTick+0xa8>)
 8003276:	f7fe f903 	bl	8001480 <HAL_TIM_Base_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8003280:	4806      	ldr	r0, [pc, #24]	; (800329c <HAL_InitTick+0xa8>)
 8003282:	f7fe f932 	bl	80014ea <HAL_TIM_Base_Start_IT>
 8003286:	4603      	mov	r3, r0
 8003288:	e000      	b.n	800328c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	3730      	adds	r7, #48	; 0x30
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	431bde83 	.word	0x431bde83
 800329c:	20000220 	.word	0x20000220
 80032a0:	40000c00 	.word	0x40000c00

080032a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <HardFault_Handler+0x4>

080032b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <MemManage_Handler+0x4>

080032be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <BusFault_Handler+0x4>

080032c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <UsageFault_Handler+0x4>

080032ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <USART1_IRQHandler+0x10>)
 80032de:	f7fe fc29 	bl	8001b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000098 	.word	0x20000098

080032ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <TIM5_IRQHandler+0x10>)
 80032f2:	f7fe f91e 	bl	8001532 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000220 	.word	0x20000220

08003300 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <USART6_IRQHandler+0x10>)
 8003306:	f7fe fc15 	bl	8001b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000118 	.word	0x20000118

08003314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <SystemInit+0x28>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	4a07      	ldr	r2, [pc, #28]	; (800333c <SystemInit+0x28>)
 8003320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <SystemInit+0x28>)
 800332a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800332e:	609a      	str	r2, [r3, #8]
#endif
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003346:	e003      	b.n	8003350 <LoopCopyDataInit>

08003348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800334a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800334c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800334e:	3104      	adds	r1, #4

08003350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003350:	480b      	ldr	r0, [pc, #44]	; (8003380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003358:	d3f6      	bcc.n	8003348 <CopyDataInit>
  ldr  r2, =_sbss
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800335c:	e002      	b.n	8003364 <LoopFillZerobss>

0800335e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800335e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003360:	f842 3b04 	str.w	r3, [r2], #4

08003364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003368:	d3f9      	bcc.n	800335e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800336a:	f7ff ffd3 	bl	8003314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800336e:	f002 febb 	bl	80060e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003372:	f7ff fc31 	bl	8002bd8 <main>
  bx  lr    
 8003376:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003378:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800337c:	08006af8 	.word	0x08006af8
  ldr  r0, =_sdata
 8003380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003384:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003388:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800338c:	2001301c 	.word	0x2001301c

08003390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003390:	e7fe      	b.n	8003390 <ADC_IRQHandler>

08003392 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f103 0208 	add.w	r2, r3, #8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f04f 32ff 	mov.w	r2, #4294967295
 80033aa:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f103 0208 	add.w	r2, r3, #8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f103 0208 	add.w	r2, r3, #8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d103      	bne.n	8003454 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e00c      	b.n	800346e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3308      	adds	r3, #8
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e002      	b.n	8003462 <vListInsert+0x2e>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d2f6      	bcs.n	800345c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6892      	ldr	r2, [r2, #8]
 80034bc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6852      	ldr	r2, [r2, #4]
 80034c6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d103      	bne.n	80034da <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xQueueGenericReset+0x2a>
        __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	60bb      	str	r3, [r7, #8]
    }
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003526:	f002 fabf 	bl	8005aa8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	68f9      	ldr	r1, [r7, #12]
 8003534:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	3b01      	subs	r3, #1
 8003558:	68f9      	ldr	r1, [r7, #12]
 800355a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	441a      	add	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01a      	beq.n	80035ba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3310      	adds	r3, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f001 fa99 	bl	8004ac0 <xTaskRemoveFromEventList>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d012      	beq.n	80035ba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <xQueueGenericReset+0xcc>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	e009      	b.n	80035ba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3310      	adds	r3, #16
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fef1 	bl	8003392 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3324      	adds	r3, #36	; 0x24
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff feec 	bl	8003392 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80035ba:	f002 faa5 	bl	8005b08 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80035be:	2301      	movs	r3, #1
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	e000ed04 	.word	0xe000ed04

080035cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	61bb      	str	r3, [r7, #24]
    }
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <xQueueGenericCreate+0x48>
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	429a      	cmp	r2, r3
 8003612:	d101      	bne.n	8003618 <xQueueGenericCreate+0x4c>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <xQueueGenericCreate+0x4e>
 8003618:	2300      	movs	r3, #0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <xQueueGenericCreate+0x68>
        __asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	617b      	str	r3, [r7, #20]
    }
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800363a:	d90a      	bls.n	8003652 <xQueueGenericCreate+0x86>
        __asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	613b      	str	r3, [r7, #16]
    }
 800364e:	bf00      	nop
 8003650:	e7fe      	b.n	8003650 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	3350      	adds	r3, #80	; 0x50
 8003656:	4618      	mov	r0, r3
 8003658:	f002 fb48 	bl	8005cec <pvPortMalloc>
 800365c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3350      	adds	r3, #80	; 0x50
 800366c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800366e:	79fa      	ldrb	r2, [r7, #7]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f805 	bl	800368a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003680:	6a3b      	ldr	r3, [r7, #32]
    }
 8003682:	4618      	mov	r0, r3
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e002      	b.n	80036ac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036b8:	2101      	movs	r1, #1
 80036ba:	69b8      	ldr	r0, [r7, #24]
 80036bc:	f7ff ff1e 	bl	80034fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	613b      	str	r3, [r7, #16]
    }
 80036f2:	bf00      	nop
 80036f4:	e7fe      	b.n	80036f4 <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d90a      	bls.n	8003714 <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	60fb      	str	r3, [r7, #12]
    }
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003714:	2202      	movs	r2, #2
 8003716:	2100      	movs	r1, #0
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff57 	bl	80035cc <xQueueGenericCreate>
 800371e:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 800372c:	697b      	ldr	r3, [r7, #20]
    }
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003746:	2300      	movs	r3, #0
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <xQueueGenericSend+0x32>
        __asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <xQueueGenericSend+0x40>
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <xQueueGenericSend+0x44>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <xQueueGenericSend+0x46>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <xQueueGenericSend+0x60>
        __asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d103      	bne.n	80037a6 <xQueueGenericSend+0x6e>
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <xQueueGenericSend+0x72>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericSend+0x74>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <xQueueGenericSend+0x8e>
        __asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	623b      	str	r3, [r7, #32]
    }
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037c6:	f001 fb17 	bl	8004df8 <xTaskGetSchedulerState>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <xQueueGenericSend+0x9e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <xQueueGenericSend+0xa2>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <xQueueGenericSend+0xa4>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xQueueGenericSend+0xbe>
        __asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	61fb      	str	r3, [r7, #28]
    }
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80037f6:	f002 f957 	bl	8005aa8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <xQueueGenericSend+0xd4>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d129      	bne.n	8003860 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	68b9      	ldr	r1, [r7, #8]
 8003810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003812:	f000 fbfc 	bl	800400e <prvCopyDataToQueue>
 8003816:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d010      	beq.n	8003842 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	3324      	adds	r3, #36	; 0x24
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f94b 	bl	8004ac0 <xTaskRemoveFromEventList>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <xQueueGenericSend+0x1f8>)
 8003832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	e00a      	b.n	8003858 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <xQueueGenericSend+0x1f8>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003858:	f002 f956 	bl	8005b08 <vPortExitCritical>
                return pdPASS;
 800385c:	2301      	movs	r3, #1
 800385e:	e063      	b.n	8003928 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003866:	f002 f94f 	bl	8005b08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800386a:	2300      	movs	r3, #0
 800386c:	e05c      	b.n	8003928 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	4618      	mov	r0, r3
 800387a:	f001 f983 	bl	8004b84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800387e:	2301      	movs	r3, #1
 8003880:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003882:	f002 f941 	bl	8005b08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003886:	f000 fefd 	bl	8004684 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800388a:	f002 f90d 	bl	8005aa8 <vPortEnterCritical>
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003894:	b25b      	sxtb	r3, r3
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d103      	bne.n	80038a4 <xQueueGenericSend+0x16c>
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038aa:	b25b      	sxtb	r3, r3
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d103      	bne.n	80038ba <xQueueGenericSend+0x182>
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ba:	f002 f925 	bl	8005b08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038be:	1d3a      	adds	r2, r7, #4
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 f972 	bl	8004bb0 <xTaskCheckForTimeOut>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d124      	bne.n	800391c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038d4:	f000 fc93 	bl	80041fe <prvIsQueueFull>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	3310      	adds	r3, #16
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f89a 	bl	8004a20 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80038ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ee:	f000 fc1e 	bl	800412e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80038f2:	f000 fed5 	bl	80046a0 <xTaskResumeAll>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f47f af7c 	bne.w	80037f6 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <xQueueGenericSend+0x1f8>)
 8003900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	e772      	b.n	80037f6 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003912:	f000 fc0c 	bl	800412e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003916:	f000 fec3 	bl	80046a0 <xTaskResumeAll>
 800391a:	e76c      	b.n	80037f6 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800391c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800391e:	f000 fc06 	bl	800412e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003922:	f000 febd 	bl	80046a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003926:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003928:	4618      	mov	r0, r3
 800392a:	3738      	adds	r7, #56	; 0x38
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	e000ed04 	.word	0xe000ed04

08003934 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b090      	sub	sp, #64	; 0x40
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <xQueueGenericSendFromISR+0x3c>
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <xQueueGenericSendFromISR+0x40>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <xQueueGenericSendFromISR+0x42>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d103      	bne.n	800399e <xQueueGenericSendFromISR+0x6a>
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <xQueueGenericSendFromISR+0x6e>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <xQueueGenericSendFromISR+0x70>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	623b      	str	r3, [r7, #32]
    }
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039be:	f002 f955 	bl	8005c6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80039c2:	f3ef 8211 	mrs	r2, BASEPRI
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	61fa      	str	r2, [r7, #28]
 80039d8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80039da:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <xQueueGenericSendFromISR+0xbc>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d13e      	bne.n	8003a6e <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a06:	f000 fb02 	bl	800400e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003a0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d112      	bne.n	8003a3a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d025      	beq.n	8003a68 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	3324      	adds	r3, #36	; 0x24
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 f84d 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01d      	beq.n	8003a68 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01a      	beq.n	8003a68 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e016      	b.n	8003a68 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003a3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a40:	d10a      	bne.n	8003a58 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	617b      	str	r3, [r7, #20]
    }
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	b25a      	sxtb	r2, r3
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003a6c:	e001      	b.n	8003a72 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003a7c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3740      	adds	r7, #64	; 0x40
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08e      	sub	sp, #56	; 0x38
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGiveFromISR+0x2a>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	623b      	str	r3, [r7, #32]
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <xQueueGiveFromISR+0x48>
        __asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	61fb      	str	r3, [r7, #28]
    }
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <xQueueGiveFromISR+0x58>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <xQueueGiveFromISR+0x5c>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <xQueueGiveFromISR+0x5e>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <xQueueGiveFromISR+0x78>
        __asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	61bb      	str	r3, [r7, #24]
    }
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b00:	f002 f8b4 	bl	8005c6c <vPortValidateInterruptPriority>
        __asm volatile
 8003b04:	f3ef 8211 	mrs	r2, BASEPRI
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	617a      	str	r2, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8003b1c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d23a      	bcs.n	8003ba6 <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003b42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d112      	bne.n	8003b72 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d025      	beq.n	8003ba0 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	3324      	adds	r3, #36	; 0x24
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 ffb1 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01d      	beq.n	8003ba0 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01a      	beq.n	8003ba0 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e016      	b.n	8003ba0 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b76:	2b7f      	cmp	r3, #127	; 0x7f
 8003b78:	d10a      	bne.n	8003b90 <xQueueGiveFromISR+0x108>
        __asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	60fb      	str	r3, [r7, #12]
    }
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b94:	3301      	adds	r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	e001      	b.n	8003baa <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
    }
 8003bb4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3738      	adds	r7, #56	; 0x38
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08c      	sub	sp, #48	; 0x30
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xQueueReceive+0x30>
        __asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	623b      	str	r3, [r7, #32]
    }
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <xQueueReceive+0x3e>
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <xQueueReceive+0x42>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <xQueueReceive+0x44>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <xQueueReceive+0x5e>
        __asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	61fb      	str	r3, [r7, #28]
    }
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c1e:	f001 f8eb 	bl	8004df8 <xTaskGetSchedulerState>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <xQueueReceive+0x6e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <xQueueReceive+0x72>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <xQueueReceive+0x74>
 8003c32:	2300      	movs	r3, #0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <xQueueReceive+0x8e>
        __asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	61bb      	str	r3, [r7, #24]
    }
 8003c4a:	bf00      	nop
 8003c4c:	e7fe      	b.n	8003c4c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c4e:	f001 ff2b 	bl	8005aa8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01f      	beq.n	8003c9e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c62:	f000 fa3e 	bl	80040e2 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00f      	beq.n	8003c96 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	3310      	adds	r3, #16
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 ff20 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003c86:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <xQueueReceive+0x1bc>)
 8003c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003c96:	f001 ff37 	bl	8005b08 <vPortExitCritical>
                return pdPASS;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e069      	b.n	8003d72 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003ca4:	f001 ff30 	bl	8005b08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e062      	b.n	8003d72 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cb2:	f107 0310 	add.w	r3, r7, #16
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 ff64 	bl	8004b84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cc0:	f001 ff22 	bl	8005b08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cc4:	f000 fcde 	bl	8004684 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cc8:	f001 feee 	bl	8005aa8 <vPortEnterCritical>
 8003ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d103      	bne.n	8003ce2 <xQueueReceive+0x122>
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce8:	b25b      	sxtb	r3, r3
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d103      	bne.n	8003cf8 <xQueueReceive+0x138>
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf8:	f001 ff06 	bl	8005b08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cfc:	1d3a      	adds	r2, r7, #4
 8003cfe:	f107 0310 	add.w	r3, r7, #16
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 ff53 	bl	8004bb0 <xTaskCheckForTimeOut>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d123      	bne.n	8003d58 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d12:	f000 fa5e 	bl	80041d2 <prvIsQueueEmpty>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fe7b 	bl	8004a20 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d2c:	f000 f9ff 	bl	800412e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003d30:	f000 fcb6 	bl	80046a0 <xTaskResumeAll>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d189      	bne.n	8003c4e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <xQueueReceive+0x1bc>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	e780      	b.n	8003c4e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4e:	f000 f9ee 	bl	800412e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d52:	f000 fca5 	bl	80046a0 <xTaskResumeAll>
 8003d56:	e77a      	b.n	8003c4e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d5a:	f000 f9e8 	bl	800412e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d5e:	f000 fc9f 	bl	80046a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d64:	f000 fa35 	bl	80041d2 <prvIsQueueEmpty>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f43f af6f 	beq.w	8003c4e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003d70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3730      	adds	r7, #48	; 0x30
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
    }
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	61fb      	str	r3, [r7, #28]
    }
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dd0:	f001 f812 	bl	8004df8 <xTaskGetSchedulerState>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <xQueueSemaphoreTake+0x60>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <xQueueSemaphoreTake+0x64>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <xQueueSemaphoreTake+0x66>
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	61bb      	str	r3, [r7, #24]
    }
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e00:	f001 fe52 	bl	8005aa8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d024      	beq.n	8003e5a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	1e5a      	subs	r2, r3, #1
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e20:	f001 f986 	bl	8005130 <pvTaskIncrementMutexHeldCount>
 8003e24:	4602      	mov	r2, r0
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	3310      	adds	r3, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fe42 	bl	8004ac0 <xTaskRemoveFromEventList>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e42:	4b54      	ldr	r3, [pc, #336]	; (8003f94 <xQueueSemaphoreTake+0x214>)
 8003e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e52:	f001 fe59 	bl	8005b08 <vPortExitCritical>
                return pdPASS;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e097      	b.n	8003f8a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d111      	bne.n	8003e84 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	617b      	str	r3, [r7, #20]
    }
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003e7c:	f001 fe44 	bl	8005b08 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e082      	b.n	8003f8a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e8a:	f107 030c 	add.w	r3, r7, #12
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fe78 	bl	8004b84 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e98:	f001 fe36 	bl	8005b08 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e9c:	f000 fbf2 	bl	8004684 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ea0:	f001 fe02 	bl	8005aa8 <vPortEnterCritical>
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eaa:	b25b      	sxtb	r3, r3
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d103      	bne.n	8003eba <xQueueSemaphoreTake+0x13a>
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec0:	b25b      	sxtb	r3, r3
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d103      	bne.n	8003ed0 <xQueueSemaphoreTake+0x150>
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed0:	f001 fe1a 	bl	8005b08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed4:	463a      	mov	r2, r7
 8003ed6:	f107 030c 	add.w	r3, r7, #12
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fe67 	bl	8004bb0 <xTaskCheckForTimeOut>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d132      	bne.n	8003f4e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eea:	f000 f972 	bl	80041d2 <prvIsQueueEmpty>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d026      	beq.n	8003f42 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003efc:	f001 fdd4 	bl	8005aa8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 ff95 	bl	8004e34 <xTaskPriorityInherit>
 8003f0a:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003f0c:	f001 fdfc 	bl	8005b08 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	3324      	adds	r3, #36	; 0x24
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fd81 	bl	8004a20 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f20:	f000 f905 	bl	800412e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003f24:	f000 fbbc 	bl	80046a0 <xTaskResumeAll>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f47f af68 	bne.w	8003e00 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <xQueueSemaphoreTake+0x214>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	e75e      	b.n	8003e00 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f44:	f000 f8f3 	bl	800412e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f48:	f000 fbaa 	bl	80046a0 <xTaskResumeAll>
 8003f4c:	e758      	b.n	8003e00 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f50:	f000 f8ed 	bl	800412e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f54:	f000 fba4 	bl	80046a0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f5a:	f000 f93a 	bl	80041d2 <prvIsQueueEmpty>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f43f af4d 	beq.w	8003e00 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00d      	beq.n	8003f88 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003f6c:	f001 fd9c 	bl	8005aa8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f72:	f000 f834 	bl	8003fde <prvGetDisinheritPriorityAfterTimeout>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f848 	bl	8005014 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003f84:	f001 fdc0 	bl	8005b08 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f88:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3738      	adds	r7, #56	; 0x38
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <uxQueueSpacesAvailable>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <uxQueueSpacesAvailable+0x28>
        __asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60fb      	str	r3, [r7, #12]
    }
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 8003fc0:	f001 fd72 	bl	8005aa8 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 8003fd0:	f001 fd9a 	bl	8005b08 <vPortExitCritical>

    return uxReturn;
 8003fd4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1c3 0305 	rsb	r3, r3, #5
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004000:	68fb      	ldr	r3, [r7, #12]
    }
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10d      	bne.n	8004048 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d14d      	bne.n	80040d0 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4618      	mov	r0, r3
 800403a:	f000 ff71 	bl	8004f20 <xTaskPriorityDisinherit>
 800403e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e043      	b.n	80040d0 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6858      	ldr	r0, [r3, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	461a      	mov	r2, r3
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	f002 f869 	bl	8006130 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	441a      	add	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d32b      	bcc.n	80040d0 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	e026      	b.n	80040d0 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68d8      	ldr	r0, [r3, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	461a      	mov	r2, r3
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	f002 f84f 	bl	8006130 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	425b      	negs	r3, r3
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d207      	bcs.n	80040be <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	425b      	negs	r3, r3
 80040b8:	441a      	add	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d105      	bne.n	80040d0 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80040d8:	697b      	ldr	r3, [r7, #20]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d018      	beq.n	8004126 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	441a      	add	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	d303      	bcc.n	8004116 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68d9      	ldr	r1, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	461a      	mov	r2, r3
 8004120:	6838      	ldr	r0, [r7, #0]
 8004122:	f002 f805 	bl	8006130 <memcpy>
    }
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004136:	f001 fcb7 	bl	8005aa8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004140:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004142:	e011      	b.n	8004168 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d012      	beq.n	8004172 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fcb5 	bl	8004ac0 <xTaskRemoveFromEventList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800415c:	f000 fd8e 	bl	8004c7c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	3b01      	subs	r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	dce9      	bgt.n	8004144 <prvUnlockQueue+0x16>
 8004170:	e000      	b.n	8004174 <prvUnlockQueue+0x46>
                        break;
 8004172:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800417c:	f001 fcc4 	bl	8005b08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004180:	f001 fc92 	bl	8005aa8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800418a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800418c:	e011      	b.n	80041b2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d012      	beq.n	80041bc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3310      	adds	r3, #16
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc90 	bl	8004ac0 <xTaskRemoveFromEventList>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80041a6:	f000 fd69 	bl	8004c7c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80041aa:	7bbb      	ldrb	r3, [r7, #14]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dce9      	bgt.n	800418e <prvUnlockQueue+0x60>
 80041ba:	e000      	b.n	80041be <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80041bc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80041c6:	f001 fc9f 	bl	8005b08 <vPortExitCritical>
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80041da:	f001 fc65 	bl	8005aa8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80041e6:	2301      	movs	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e001      	b.n	80041f0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80041f0:	f001 fc8a 	bl	8005b08 <vPortExitCritical>

    return xReturn;
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004206:	f001 fc4f 	bl	8005aa8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	429a      	cmp	r2, r3
 8004214:	d102      	bne.n	800421c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e001      	b.n	8004220 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004220:	f001 fc72 	bl	8005b08 <vPortExitCritical>

    return xReturn;
 8004224:	68fb      	ldr	r3, [r7, #12]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e014      	b.n	800426a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004240:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <vQueueAddToRegistry+0x50>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <vQueueAddToRegistry+0x50>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004256:	4a0a      	ldr	r2, [pc, #40]	; (8004280 <vQueueAddToRegistry+0x50>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004262:	e006      	b.n	8004272 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3301      	adds	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b07      	cmp	r3, #7
 800426e:	d9e7      	bls.n	8004240 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000260 	.word	0x20000260

08004284 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004294:	f001 fc08 	bl	8005aa8 <vPortEnterCritical>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800429e:	b25b      	sxtb	r3, r3
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d103      	bne.n	80042ae <vQueueWaitForMessageRestricted+0x2a>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d103      	bne.n	80042c4 <vQueueWaitForMessageRestricted+0x40>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c4:	f001 fc20 	bl	8005b08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3324      	adds	r3, #36	; 0x24
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fbc5 	bl	8004a68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80042de:	6978      	ldr	r0, [r7, #20]
 80042e0:	f7ff ff25 	bl	800412e <prvUnlockQueue>
    }
 80042e4:	bf00      	nop
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fcf3 	bl	8005cec <pvPortMalloc>
 8004306:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800430e:	2058      	movs	r0, #88	; 0x58
 8004310:	f001 fcec 	bl	8005cec <pvPortMalloc>
 8004314:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
 8004322:	e005      	b.n	8004330 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f001 fdc1 	bl	8005eac <vPortFree>
 800432a:	e001      	b.n	8004330 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d013      	beq.n	800435e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	2300      	movs	r3, #0
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	9302      	str	r3, [sp, #8]
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f80e 	bl	800436e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004352:	69f8      	ldr	r0, [r7, #28]
 8004354:	f000 f8a2 	bl	800449c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004358:	2301      	movs	r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e002      	b.n	8004364 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004364:	69bb      	ldr	r3, [r7, #24]
    }
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b088      	sub	sp, #32
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	461a      	mov	r2, r3
 8004386:	21a5      	movs	r1, #165	; 0xa5
 8004388:	f001 fee0 	bl	800614c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004396:	3b01      	subs	r3, #1
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f023 0307 	bic.w	r3, r3, #7
 80043a4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	617b      	str	r3, [r7, #20]
    }
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01f      	beq.n	800440c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043cc:	2300      	movs	r3, #0
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e012      	b.n	80043f8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	4413      	add	r3, r2
 80043d8:	7819      	ldrb	r1, [r3, #0]
 80043da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	3334      	adds	r3, #52	; 0x34
 80043e2:	460a      	mov	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b09      	cmp	r3, #9
 80043fc:	d9e9      	bls.n	80043d2 <prvInitialiseNewTask+0x64>
 80043fe:	e000      	b.n	8004402 <prvInitialiseNewTask+0x94>
            {
                break;
 8004400:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800440a:	e003      	b.n	8004414 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	2b04      	cmp	r3, #4
 8004418:	d901      	bls.n	800441e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800441a:	2304      	movs	r3, #4
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004428:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	2200      	movs	r2, #0
 800442e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe ffcc 	bl	80033d2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	3318      	adds	r3, #24
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe ffc7 	bl	80033d2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004448:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	f1c3 0205 	rsb	r2, r3, #5
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	3350      	adds	r3, #80	; 0x50
 800445e:	2204      	movs	r2, #4
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fe72 	bl	800614c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	3354      	adds	r3, #84	; 0x54
 800446c:	2201      	movs	r2, #1
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f001 fe6b 	bl	800614c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	68f9      	ldr	r1, [r7, #12]
 800447a:	69b8      	ldr	r0, [r7, #24]
 800447c:	f001 f9e4 	bl	8005848 <pxPortInitialiseStack>
 8004480:	4602      	mov	r2, r0
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004490:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004492:	bf00      	nop
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80044a4:	f001 fb00 	bl	8005aa8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80044a8:	4b2c      	ldr	r3, [pc, #176]	; (800455c <prvAddNewTaskToReadyList+0xc0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a2b      	ldr	r2, [pc, #172]	; (800455c <prvAddNewTaskToReadyList+0xc0>)
 80044b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80044b2:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044c0:	4b26      	ldr	r3, [pc, #152]	; (800455c <prvAddNewTaskToReadyList+0xc0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d110      	bne.n	80044ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80044c8:	f000 fbfc 	bl	8004cc4 <prvInitialiseTaskLists>
 80044cc:	e00d      	b.n	80044ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80044ce:	4b25      	ldr	r3, [pc, #148]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d802      	bhi.n	80044ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <prvAddNewTaskToReadyList+0xcc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <prvAddNewTaskToReadyList+0xcc>)
 80044f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044f4:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <prvAddNewTaskToReadyList+0xcc>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <prvAddNewTaskToReadyList+0xd0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	4a18      	ldr	r2, [pc, #96]	; (800456c <prvAddNewTaskToReadyList+0xd0>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <prvAddNewTaskToReadyList+0xd4>)
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7fe ff61 	bl	80033ec <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800452a:	f001 faed 	bl	8005b08 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <prvAddNewTaskToReadyList+0xc8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <prvAddNewTaskToReadyList+0xc4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	429a      	cmp	r2, r3
 8004542:	d207      	bcs.n	8004554 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <prvAddNewTaskToReadyList+0xd8>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	20000378 	.word	0x20000378
 8004560:	200002a0 	.word	0x200002a0
 8004564:	20000384 	.word	0x20000384
 8004568:	20000394 	.word	0x20000394
 800456c:	20000380 	.word	0x20000380
 8004570:	200002a4 	.word	0x200002a4
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d017      	beq.n	80045ba <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <vTaskDelay+0x60>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <vTaskDelay+0x30>
        __asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
    }
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80045a8:	f000 f86c 	bl	8004684 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045ac:	2100      	movs	r1, #0
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fdd2 	bl	8005158 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80045b4:	f000 f874 	bl	80046a0 <xTaskResumeAll>
 80045b8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <vTaskDelay+0x64>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200003a0 	.word	0x200003a0
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <vTaskStartScheduler+0x88>)
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2300      	movs	r3, #0
 80045f0:	2282      	movs	r2, #130	; 0x82
 80045f2:	491e      	ldr	r1, [pc, #120]	; (800466c <vTaskStartScheduler+0x8c>)
 80045f4:	481e      	ldr	r0, [pc, #120]	; (8004670 <vTaskStartScheduler+0x90>)
 80045f6:	f7ff fe79 	bl	80042ec <xTaskCreate>
 80045fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004602:	f000 fe0f 	bl	8005224 <xTimerCreateTimerTask>
 8004606:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d116      	bne.n	800463c <vTaskStartScheduler+0x5c>
        __asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60bb      	str	r3, [r7, #8]
    }
 8004620:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <vTaskStartScheduler+0x94>)
 8004624:	f04f 32ff 	mov.w	r2, #4294967295
 8004628:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <vTaskStartScheduler+0x98>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <vTaskStartScheduler+0x9c>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004636:	f001 f995 	bl	8005964 <xPortStartScheduler>
 800463a:	e00e      	b.n	800465a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d10a      	bne.n	800465a <vTaskStartScheduler+0x7a>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	607b      	str	r3, [r7, #4]
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <vTaskStartScheduler+0xa0>)
 800465c:	681b      	ldr	r3, [r3, #0]
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000039c 	.word	0x2000039c
 800466c:	08006a84 	.word	0x08006a84
 8004670:	08004c95 	.word	0x08004c95
 8004674:	20000398 	.word	0x20000398
 8004678:	20000384 	.word	0x20000384
 800467c:	2000037c 	.word	0x2000037c
 8004680:	2000000c 	.word	0x2000000c

08004684 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <vTaskSuspendAll+0x18>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	4a03      	ldr	r2, [pc, #12]	; (800469c <vTaskSuspendAll+0x18>)
 8004690:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	200003a0 	.word	0x200003a0

080046a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <xTaskResumeAll+0x114>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <xTaskResumeAll+0x2c>
        __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	603b      	str	r3, [r7, #0]
    }
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80046cc:	f001 f9ec 	bl	8005aa8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80046d0:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <xTaskResumeAll+0x114>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <xTaskResumeAll+0x114>)
 80046d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046da:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <xTaskResumeAll+0x114>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d161      	bne.n	80047a6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046e2:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <xTaskResumeAll+0x118>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d05d      	beq.n	80047a6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046ea:	e02e      	b.n	800474a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ec:	4b33      	ldr	r3, [pc, #204]	; (80047bc <xTaskResumeAll+0x11c>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3318      	adds	r3, #24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fed4 	bl	80034a6 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fecf 	bl	80034a6 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <xTaskResumeAll+0x120>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <xTaskResumeAll+0x120>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <xTaskResumeAll+0x124>)
 8004728:	441a      	add	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe fe5b 	bl	80033ec <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <xTaskResumeAll+0x128>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <xTaskResumeAll+0x12c>)
 8004746:	2201      	movs	r2, #1
 8004748:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <xTaskResumeAll+0x11c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1cc      	bne.n	80046ec <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004758:	f000 fb32 	bl	8004dc0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800475c:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <xTaskResumeAll+0x130>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004768:	f000 f846 	bl	80047f8 <xTaskIncrementTick>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <xTaskResumeAll+0x12c>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b01      	subs	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f1      	bne.n	8004768 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8004784:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <xTaskResumeAll+0x130>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <xTaskResumeAll+0x12c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004792:	2301      	movs	r3, #1
 8004794:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <xTaskResumeAll+0x134>)
 8004798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80047a6:	f001 f9af 	bl	8005b08 <vPortExitCritical>

    return xAlreadyYielded;
 80047aa:	68bb      	ldr	r3, [r7, #8]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200003a0 	.word	0x200003a0
 80047b8:	20000378 	.word	0x20000378
 80047bc:	20000338 	.word	0x20000338
 80047c0:	20000380 	.word	0x20000380
 80047c4:	200002a4 	.word	0x200002a4
 80047c8:	200002a0 	.word	0x200002a0
 80047cc:	2000038c 	.word	0x2000038c
 80047d0:	20000388 	.word	0x20000388
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <xTaskGetTickCount+0x1c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80047e4:	687b      	ldr	r3, [r7, #4]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000037c 	.word	0x2000037c

080047f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004802:	4b4e      	ldr	r3, [pc, #312]	; (800493c <xTaskIncrementTick+0x144>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 808e 	bne.w	8004928 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800480c:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <xTaskIncrementTick+0x148>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004814:	4a4a      	ldr	r2, [pc, #296]	; (8004940 <xTaskIncrementTick+0x148>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d120      	bne.n	8004862 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004820:	4b48      	ldr	r3, [pc, #288]	; (8004944 <xTaskIncrementTick+0x14c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <xTaskIncrementTick+0x48>
        __asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	603b      	str	r3, [r7, #0]
    }
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <xTaskIncrementTick+0x46>
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <xTaskIncrementTick+0x14c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b40      	ldr	r3, [pc, #256]	; (8004948 <xTaskIncrementTick+0x150>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3e      	ldr	r2, [pc, #248]	; (8004944 <xTaskIncrementTick+0x14c>)
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4a3e      	ldr	r2, [pc, #248]	; (8004948 <xTaskIncrementTick+0x150>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b3d      	ldr	r3, [pc, #244]	; (800494c <xTaskIncrementTick+0x154>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a3c      	ldr	r2, [pc, #240]	; (800494c <xTaskIncrementTick+0x154>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	f000 faaf 	bl	8004dc0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004862:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <xTaskIncrementTick+0x158>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	429a      	cmp	r2, r3
 800486a:	d348      	bcc.n	80048fe <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <xTaskIncrementTick+0x14c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <xTaskIncrementTick+0x158>)
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	601a      	str	r2, [r3, #0]
                    break;
 800487e:	e03e      	b.n	80048fe <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004880:	4b30      	ldr	r3, [pc, #192]	; (8004944 <xTaskIncrementTick+0x14c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d203      	bcs.n	80048a0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004898:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <xTaskIncrementTick+0x158>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800489e:	e02e      	b.n	80048fe <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fdfe 	bl	80034a6 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3318      	adds	r3, #24
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fdf5 	bl	80034a6 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	4b23      	ldr	r3, [pc, #140]	; (8004954 <xTaskIncrementTick+0x15c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <xTaskIncrementTick+0x15c>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <xTaskIncrementTick+0x160>)
 80048dc:	441a      	add	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f7fe fd81 	bl	80033ec <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ee:	4b1b      	ldr	r3, [pc, #108]	; (800495c <xTaskIncrementTick+0x164>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d3b9      	bcc.n	800486c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fc:	e7b6      	b.n	800486c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <xTaskIncrementTick+0x164>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4914      	ldr	r1, [pc, #80]	; (8004958 <xTaskIncrementTick+0x160>)
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d901      	bls.n	800491a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <xTaskIncrementTick+0x168>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e004      	b.n	8004932 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <xTaskIncrementTick+0x16c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <xTaskIncrementTick+0x16c>)
 8004930:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004932:	697b      	ldr	r3, [r7, #20]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	200003a0 	.word	0x200003a0
 8004940:	2000037c 	.word	0x2000037c
 8004944:	20000330 	.word	0x20000330
 8004948:	20000334 	.word	0x20000334
 800494c:	20000390 	.word	0x20000390
 8004950:	20000398 	.word	0x20000398
 8004954:	20000380 	.word	0x20000380
 8004958:	200002a4 	.word	0x200002a4
 800495c:	200002a0 	.word	0x200002a0
 8004960:	2000038c 	.word	0x2000038c
 8004964:	20000388 	.word	0x20000388

08004968 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <vTaskSwitchContext+0xa4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004976:	4b26      	ldr	r3, [pc, #152]	; (8004a10 <vTaskSwitchContext+0xa8>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800497c:	e03f      	b.n	80049fe <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <vTaskSwitchContext+0xa8>)
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004984:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <vTaskSwitchContext+0xac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	fab3 f383 	clz	r3, r3
 8004990:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	f1c3 031f 	rsb	r3, r3, #31
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	491f      	ldr	r1, [pc, #124]	; (8004a18 <vTaskSwitchContext+0xb0>)
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
    }
 80049c0:	bf00      	nop
 80049c2:	e7fe      	b.n	80049c2 <vTaskSwitchContext+0x5a>
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <vTaskSwitchContext+0xb0>)
 80049d0:	4413      	add	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	605a      	str	r2, [r3, #4]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3308      	adds	r3, #8
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d104      	bne.n	80049f4 <vTaskSwitchContext+0x8c>
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <vTaskSwitchContext+0xb4>)
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	200003a0 	.word	0x200003a0
 8004a10:	2000038c 	.word	0x2000038c
 8004a14:	20000380 	.word	0x20000380
 8004a18:	200002a4 	.word	0x200002a4
 8004a1c:	200002a0 	.word	0x200002a0

08004a20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	60fb      	str	r3, [r7, #12]
    }
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a46:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <vTaskPlaceOnEventList+0x44>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe fcf0 	bl	8003434 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a54:	2101      	movs	r1, #1
 8004a56:	6838      	ldr	r0, [r7, #0]
 8004a58:	f000 fb7e 	bl	8005158 <prvAddCurrentTaskToDelayedList>
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200002a0 	.word	0x200002a0

08004a68 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	617b      	str	r3, [r7, #20]
    }
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <vTaskPlaceOnEventListRestricted+0x54>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4619      	mov	r1, r3
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7fe fca7 	bl	80033ec <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f000 fb53 	bl	8005158 <prvAddCurrentTaskToDelayedList>
    }
 8004ab2:	bf00      	nop
 8004ab4:	3718      	adds	r7, #24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200002a0 	.word	0x200002a0

08004ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60fb      	str	r3, [r7, #12]
    }
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	3318      	adds	r3, #24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe fcd8 	bl	80034a6 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <xTaskRemoveFromEventList+0xac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11c      	bne.n	8004b38 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fccf 	bl	80034a6 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <xTaskRemoveFromEventList+0xb0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <xTaskRemoveFromEventList+0xb0>)
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <xTaskRemoveFromEventList+0xb4>)
 8004b28:	441a      	add	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f7fe fc5b 	bl	80033ec <vListInsertEnd>
 8004b36:	e005      	b.n	8004b44 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	3318      	adds	r3, #24
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	480e      	ldr	r0, [pc, #56]	; (8004b78 <xTaskRemoveFromEventList+0xb8>)
 8004b40:	f7fe fc54 	bl	80033ec <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <xTaskRemoveFromEventList+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d905      	bls.n	8004b5e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <xTaskRemoveFromEventList+0xc0>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e001      	b.n	8004b62 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004b62:	697b      	ldr	r3, [r7, #20]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200003a0 	.word	0x200003a0
 8004b70:	20000380 	.word	0x20000380
 8004b74:	200002a4 	.word	0x200002a4
 8004b78:	20000338 	.word	0x20000338
 8004b7c:	200002a0 	.word	0x200002a0
 8004b80:	2000038c 	.word	0x2000038c

08004b84 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <vTaskInternalSetTimeOutState+0x24>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <vTaskInternalSetTimeOutState+0x28>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	605a      	str	r2, [r3, #4]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000390 	.word	0x20000390
 8004bac:	2000037c 	.word	0x2000037c

08004bb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	613b      	str	r3, [r7, #16]
    }
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60fb      	str	r3, [r7, #12]
    }
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004bf2:	f000 ff59 	bl	8005aa8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <xTaskCheckForTimeOut+0xc4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d102      	bne.n	8004c16 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e026      	b.n	8004c64 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <xTaskCheckForTimeOut+0xc8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d00a      	beq.n	8004c38 <xTaskCheckForTimeOut+0x88>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d305      	bcc.n	8004c38 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e015      	b.n	8004c64 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d20b      	bcs.n	8004c5a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff ff98 	bl	8004b84 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e004      	b.n	8004c64 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004c64:	f000 ff50 	bl	8005b08 <vPortExitCritical>

    return xReturn;
 8004c68:	69fb      	ldr	r3, [r7, #28]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2000037c 	.word	0x2000037c
 8004c78:	20000390 	.word	0x20000390

08004c7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004c80:	4b03      	ldr	r3, [pc, #12]	; (8004c90 <vTaskMissedYield+0x14>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	2000038c 	.word	0x2000038c

08004c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004c9c:	f000 f852 	bl	8004d44 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <prvIdleTask+0x28>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d9f9      	bls.n	8004c9c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <prvIdleTask+0x2c>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004cb8:	e7f0      	b.n	8004c9c <prvIdleTask+0x8>
 8004cba:	bf00      	nop
 8004cbc:	200002a4 	.word	0x200002a4
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
 8004cce:	e00c      	b.n	8004cea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <prvInitialiseTaskLists+0x60>)
 8004cdc:	4413      	add	r3, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fb57 	bl	8003392 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d9ef      	bls.n	8004cd0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004cf0:	480d      	ldr	r0, [pc, #52]	; (8004d28 <prvInitialiseTaskLists+0x64>)
 8004cf2:	f7fe fb4e 	bl	8003392 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004cf6:	480d      	ldr	r0, [pc, #52]	; (8004d2c <prvInitialiseTaskLists+0x68>)
 8004cf8:	f7fe fb4b 	bl	8003392 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004cfc:	480c      	ldr	r0, [pc, #48]	; (8004d30 <prvInitialiseTaskLists+0x6c>)
 8004cfe:	f7fe fb48 	bl	8003392 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004d02:	480c      	ldr	r0, [pc, #48]	; (8004d34 <prvInitialiseTaskLists+0x70>)
 8004d04:	f7fe fb45 	bl	8003392 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004d08:	480b      	ldr	r0, [pc, #44]	; (8004d38 <prvInitialiseTaskLists+0x74>)
 8004d0a:	f7fe fb42 	bl	8003392 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <prvInitialiseTaskLists+0x78>)
 8004d10:	4a05      	ldr	r2, [pc, #20]	; (8004d28 <prvInitialiseTaskLists+0x64>)
 8004d12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d14:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvInitialiseTaskLists+0x7c>)
 8004d16:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <prvInitialiseTaskLists+0x68>)
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	200002a4 	.word	0x200002a4
 8004d28:	20000308 	.word	0x20000308
 8004d2c:	2000031c 	.word	0x2000031c
 8004d30:	20000338 	.word	0x20000338
 8004d34:	2000034c 	.word	0x2000034c
 8004d38:	20000364 	.word	0x20000364
 8004d3c:	20000330 	.word	0x20000330
 8004d40:	20000334 	.word	0x20000334

08004d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d4a:	e019      	b.n	8004d80 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004d4c:	f000 feac 	bl	8005aa8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <prvCheckTasksWaitingTermination+0x50>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fba2 	bl	80034a6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <prvCheckTasksWaitingTermination+0x54>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <prvCheckTasksWaitingTermination+0x54>)
 8004d6a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <prvCheckTasksWaitingTermination+0x58>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <prvCheckTasksWaitingTermination+0x58>)
 8004d74:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004d76:	f000 fec7 	bl	8005b08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f810 	bl	8004da0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <prvCheckTasksWaitingTermination+0x58>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e1      	bne.n	8004d4c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	2000034c 	.word	0x2000034c
 8004d98:	20000378 	.word	0x20000378
 8004d9c:	20000360 	.word	0x20000360

08004da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 f87d 	bl	8005eac <vPortFree>
                vPortFree( pxTCB );
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f001 f87a 	bl	8005eac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004db8:	bf00      	nop
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <prvResetNextTaskUnblockTime+0x30>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <prvResetNextTaskUnblockTime+0x34>)
 8004dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004dd6:	e005      	b.n	8004de4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <prvResetNextTaskUnblockTime+0x30>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <prvResetNextTaskUnblockTime+0x34>)
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000330 	.word	0x20000330
 8004df4:	20000398 	.word	0x20000398

08004df8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <xTaskGetSchedulerState+0x34>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004e06:	2301      	movs	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	e008      	b.n	8004e1e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <xTaskGetSchedulerState+0x38>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004e14:	2302      	movs	r3, #2
 8004e16:	607b      	str	r3, [r7, #4]
 8004e18:	e001      	b.n	8004e1e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004e1e:	687b      	ldr	r3, [r7, #4]
    }
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000384 	.word	0x20000384
 8004e30:	200003a0 	.word	0x200003a0

08004e34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d05e      	beq.n	8004f08 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <xTaskPriorityInherit+0xe0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d24e      	bcs.n	8004ef6 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	db06      	blt.n	8004e6e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e60:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <xTaskPriorityInherit+0xe0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f1c3 0205 	rsb	r2, r3, #5
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6959      	ldr	r1, [r3, #20]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a26      	ldr	r2, [pc, #152]	; (8004f18 <xTaskPriorityInherit+0xe4>)
 8004e80:	4413      	add	r3, r2
 8004e82:	4299      	cmp	r1, r3
 8004e84:	d12f      	bne.n	8004ee6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe fb0b 	bl	80034a6 <uxListRemove>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10a      	bne.n	8004eac <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <xTaskPriorityInherit+0xe8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <xTaskPriorityInherit+0xe8>)
 8004eaa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <xTaskPriorityInherit+0xe0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	2201      	movs	r2, #1
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <xTaskPriorityInherit+0xe8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <xTaskPriorityInherit+0xe8>)
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4a10      	ldr	r2, [pc, #64]	; (8004f18 <xTaskPriorityInherit+0xe4>)
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fe fa84 	bl	80033ec <vListInsertEnd>
 8004ee4:	e004      	b.n	8004ef0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <xTaskPriorityInherit+0xe0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e008      	b.n	8004f08 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <xTaskPriorityInherit+0xe0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d201      	bcs.n	8004f08 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004f08:	68fb      	ldr	r3, [r7, #12]
    }
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	200002a0 	.word	0x200002a0
 8004f18:	200002a4 	.word	0x200002a4
 8004f1c:	20000380 	.word	0x20000380

08004f20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d063      	beq.n	8004ffe <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004f36:	4b34      	ldr	r3, [pc, #208]	; (8005008 <xTaskPriorityDisinherit+0xe8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d00a      	beq.n	8004f56 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60fb      	str	r3, [r7, #12]
    }
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	60bb      	str	r3, [r7, #8]
    }
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f78:	1e5a      	subs	r2, r3, #1
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d039      	beq.n	8004ffe <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d135      	bne.n	8004ffe <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fa85 	bl	80034a6 <uxListRemove>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43da      	mvns	r2, r3
 8004fae:	4b17      	ldr	r3, [pc, #92]	; (800500c <xTaskPriorityDisinherit+0xec>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	4a15      	ldr	r2, [pc, #84]	; (800500c <xTaskPriorityDisinherit+0xec>)
 8004fb6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f1c3 0205 	rsb	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <xTaskPriorityDisinherit+0xec>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <xTaskPriorityDisinherit+0xec>)
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <xTaskPriorityDisinherit+0xf0>)
 8004fec:	441a      	add	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f7fe f9f9 	bl	80033ec <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004ffe:	697b      	ldr	r3, [r7, #20]
    }
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	200002a0 	.word	0x200002a0
 800500c:	20000380 	.word	0x20000380
 8005010:	200002a4 	.word	0x200002a4

08005014 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005022:	2301      	movs	r3, #1
 8005024:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d077      	beq.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
    }
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d902      	bls.n	800505a <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e002      	b.n	8005060 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505e:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	429a      	cmp	r2, r3
 8005068:	d058      	beq.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	429a      	cmp	r2, r3
 8005072:	d153      	bne.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005074:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	429a      	cmp	r2, r3
 800507c:	d10a      	bne.n	8005094 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60bb      	str	r3, [r7, #8]
    }
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db04      	blt.n	80050b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f1c3 0205 	rsb	r2, r3, #5
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	6959      	ldr	r1, [r3, #20]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80050c2:	4413      	add	r3, r2
 80050c4:	4299      	cmp	r1, r3
 80050c6:	d129      	bne.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe f9ea 	bl	80034a6 <uxListRemove>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	2201      	movs	r2, #1
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43da      	mvns	r2, r3
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4013      	ands	r3, r2
 80050ea:	4a10      	ldr	r2, [pc, #64]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050ec:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	2201      	movs	r2, #1
 80050f4:	409a      	lsls	r2, r3
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4a06      	ldr	r2, [pc, #24]	; (8005128 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800510e:	441a      	add	r2, r3
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f7fe f968 	bl	80033ec <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800511c:	bf00      	nop
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	200002a0 	.word	0x200002a0
 8005128:	200002a4 	.word	0x200002a4
 800512c:	20000380 	.word	0x20000380

08005130 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <pvTaskIncrementMutexHeldCount+0x24>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <pvTaskIncrementMutexHeldCount+0x24>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005142:	3201      	adds	r2, #1
 8005144:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8005146:	4b03      	ldr	r3, [pc, #12]	; (8005154 <pvTaskIncrementMutexHeldCount+0x24>)
 8005148:	681b      	ldr	r3, [r3, #0]
    }
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	200002a0 	.word	0x200002a0

08005158 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe f999 	bl	80034a6 <uxListRemove>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	2201      	movs	r2, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43da      	mvns	r2, r3
 8005188:	4b21      	ldr	r3, [pc, #132]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4013      	ands	r3, r2
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005190:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d10a      	bne.n	80051b0 <prvAddCurrentTaskToDelayedList+0x58>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	481a      	ldr	r0, [pc, #104]	; (8005214 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051aa:	f7fe f91f 	bl	80033ec <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80051ae:	e026      	b.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051b8:	4b14      	ldr	r3, [pc, #80]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d209      	bcs.n	80051dc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <prvAddCurrentTaskToDelayedList+0xc0>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4610      	mov	r0, r2
 80051d6:	f7fe f92d 	bl	8003434 <vListInsert>
}
 80051da:	e010      	b.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <prvAddCurrentTaskToDelayedList+0xc4>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <prvAddCurrentTaskToDelayedList+0xb4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3304      	adds	r3, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f7fe f923 	bl	8003434 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80051ee:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d202      	bcs.n	80051fe <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	2000037c 	.word	0x2000037c
 800520c:	200002a0 	.word	0x200002a0
 8005210:	20000380 	.word	0x20000380
 8005214:	20000364 	.word	0x20000364
 8005218:	20000334 	.word	0x20000334
 800521c:	20000330 	.word	0x20000330
 8005220:	20000398 	.word	0x20000398

08005224 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800522e:	f000 fad5 	bl	80057dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <xTimerCreateTimerTask+0x54>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <xTimerCreateTimerTask+0x58>)
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	2302      	movs	r3, #2
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005248:	490d      	ldr	r1, [pc, #52]	; (8005280 <xTimerCreateTimerTask+0x5c>)
 800524a:	480e      	ldr	r0, [pc, #56]	; (8005284 <xTimerCreateTimerTask+0x60>)
 800524c:	f7ff f84e 	bl	80042ec <xTaskCreate>
 8005250:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	603b      	str	r3, [r7, #0]
    }
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800526e:	687b      	ldr	r3, [r7, #4]
    }
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200003d4 	.word	0x200003d4
 800527c:	200003d8 	.word	0x200003d8
 8005280:	08006a8c 	.word	0x08006a8c
 8005284:	080053bd 	.word	0x080053bd

08005288 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005296:	2300      	movs	r3, #0
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	623b      	str	r3, [r7, #32]
    }
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <xTimerGenericCommand+0x98>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d02a      	beq.n	8005314 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	dc18      	bgt.n	8005302 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052d0:	f7ff fd92 	bl	8004df8 <xTaskGetSchedulerState>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d109      	bne.n	80052ee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052da:	4b11      	ldr	r3, [pc, #68]	; (8005320 <xTimerGenericCommand+0x98>)
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	f107 0114 	add.w	r1, r7, #20
 80052e2:	2300      	movs	r3, #0
 80052e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e6:	f7fe fa27 	bl	8003738 <xQueueGenericSend>
 80052ea:	6278      	str	r0, [r7, #36]	; 0x24
 80052ec:	e012      	b.n	8005314 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <xTimerGenericCommand+0x98>)
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	f107 0114 	add.w	r1, r7, #20
 80052f6:	2300      	movs	r3, #0
 80052f8:	2200      	movs	r2, #0
 80052fa:	f7fe fa1d 	bl	8003738 <xQueueGenericSend>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24
 8005300:	e008      	b.n	8005314 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <xTimerGenericCommand+0x98>)
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	f107 0114 	add.w	r1, r7, #20
 800530a:	2300      	movs	r3, #0
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	f7fe fb11 	bl	8003934 <xQueueGenericSendFromISR>
 8005312:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005316:	4618      	mov	r0, r3
 8005318:	3728      	adds	r7, #40	; 0x28
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	200003d4 	.word	0x200003d4

08005324 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <prvProcessExpiredTimer+0x94>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3304      	adds	r3, #4
 800533c:	4618      	mov	r0, r3
 800533e:	f7fe f8b2 	bl	80034a6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d022      	beq.n	8005396 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	18d1      	adds	r1, r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	6978      	ldr	r0, [r7, #20]
 800535e:	f000 f8d1 	bl	8005504 <prvInsertTimerInActiveList>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01f      	beq.n	80053a8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005368:	2300      	movs	r3, #0
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2300      	movs	r3, #0
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	2100      	movs	r1, #0
 8005372:	6978      	ldr	r0, [r7, #20]
 8005374:	f7ff ff88 	bl	8005288 <xTimerGenericCommand>
 8005378:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d113      	bne.n	80053a8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
    }
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	6978      	ldr	r0, [r7, #20]
 80053ae:	4798      	blx	r3
    }
 80053b0:	bf00      	nop
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	200003cc 	.word	0x200003cc

080053bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f857 	bl	800547c <prvGetNextExpireTime>
 80053ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4619      	mov	r1, r3
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f803 	bl	80053e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80053da:	f000 f8d5 	bl	8005588 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053de:	e7f1      	b.n	80053c4 <prvTimerTask+0x8>

080053e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80053ea:	f7ff f94b 	bl	8004684 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f866 	bl	80054c4 <prvSampleTimeNow>
 80053f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d130      	bne.n	8005462 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <prvProcessTimerOrBlockTask+0x3c>
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	429a      	cmp	r2, r3
 800540c:	d806      	bhi.n	800541c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800540e:	f7ff f947 	bl	80046a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff85 	bl	8005324 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800541a:	e024      	b.n	8005466 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005422:	4b13      	ldr	r3, [pc, #76]	; (8005470 <prvProcessTimerOrBlockTask+0x90>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <prvProcessTimerOrBlockTask+0x50>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <prvProcessTimerOrBlockTask+0x52>
 8005430:	2300      	movs	r3, #0
 8005432:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <prvProcessTimerOrBlockTask+0x94>)
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	4619      	mov	r1, r3
 8005442:	f7fe ff1f 	bl	8004284 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005446:	f7ff f92b 	bl	80046a0 <xTaskResumeAll>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <prvProcessTimerOrBlockTask+0x98>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
    }
 8005460:	e001      	b.n	8005466 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005462:	f7ff f91d 	bl	80046a0 <xTaskResumeAll>
    }
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200003d0 	.word	0x200003d0
 8005474:	200003d4 	.word	0x200003d4
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <prvGetNextExpireTime+0x44>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <prvGetNextExpireTime+0x16>
 800548e:	2201      	movs	r2, #1
 8005490:	e000      	b.n	8005494 <prvGetNextExpireTime+0x18>
 8005492:	2200      	movs	r2, #0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <prvGetNextExpireTime+0x44>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e001      	b.n	80054b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80054b0:	68fb      	ldr	r3, [r7, #12]
    }
 80054b2:	4618      	mov	r0, r3
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	200003cc 	.word	0x200003cc

080054c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80054cc:	f7ff f984 	bl	80047d8 <xTaskGetTickCount>
 80054d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <prvSampleTimeNow+0x3c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d205      	bcs.n	80054e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80054dc:	f000 f91a 	bl	8005714 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e002      	b.n	80054ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <prvSampleTimeNow+0x3c>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80054f4:	68fb      	ldr	r3, [r7, #12]
    }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	200003dc 	.word	0x200003dc

08005504 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d812      	bhi.n	8005550 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	429a      	cmp	r2, r3
 8005536:	d302      	bcc.n	800553e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005538:	2301      	movs	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e01b      	b.n	8005576 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800553e:	4b10      	ldr	r3, [pc, #64]	; (8005580 <prvInsertTimerInActiveList+0x7c>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f7fd ff73 	bl	8003434 <vListInsert>
 800554e:	e012      	b.n	8005576 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d206      	bcs.n	8005566 <prvInsertTimerInActiveList+0x62>
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e007      	b.n	8005576 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <prvInsertTimerInActiveList+0x80>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	4619      	mov	r1, r3
 8005570:	4610      	mov	r0, r2
 8005572:	f7fd ff5f 	bl	8003434 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005576:	697b      	ldr	r3, [r7, #20]
    }
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200003d0 	.word	0x200003d0
 8005584:	200003cc 	.word	0x200003cc

08005588 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	; 0x30
 800558c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800558e:	e0ae      	b.n	80056ee <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f2c0 80aa 	blt.w	80056ec <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	3304      	adds	r3, #4
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fd ff7c 	bl	80034a6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff87 	bl	80054c4 <prvSampleTimeNow>
 80055b6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	f200 8097 	bhi.w	80056ee <prvProcessReceivedCommands+0x166>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <prvProcessReceivedCommands+0x40>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	08005665 	.word	0x08005665
 80055d8:	08005679 	.word	0x08005679
 80055dc:	080056c3 	.word	0x080056c3
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	080055f1 	.word	0x080055f1
 80055e8:	08005665 	.word	0x08005665
 80055ec:	08005679 	.word	0x08005679
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	18d1      	adds	r1, r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a3a      	ldr	r2, [r7, #32]
 800560e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005610:	f7ff ff78 	bl	8005504 <prvInsertTimerInActiveList>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d069      	beq.n	80056ee <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005620:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d05e      	beq.n	80056ee <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	441a      	add	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2300      	movs	r3, #0
 800563e:	2100      	movs	r1, #0
 8005640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005642:	f7ff fe21 	bl	8005288 <xTimerGenericCommand>
 8005646:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d14f      	bne.n	80056ee <prvProcessReceivedCommands+0x166>
        __asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	61bb      	str	r3, [r7, #24]
    }
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800566a:	f023 0301 	bic.w	r3, r3, #1
 800566e:	b2da      	uxtb	r2, r3
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005676:	e03a      	b.n	80056ee <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	b2da      	uxtb	r2, r3
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	617b      	str	r3, [r7, #20]
    }
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	18d1      	adds	r1, r2, r3
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	6a3a      	ldr	r2, [r7, #32]
 80056ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056bc:	f7ff ff22 	bl	8005504 <prvInsertTimerInActiveList>
                        break;
 80056c0:	e015      	b.n	80056ee <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80056d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056d2:	f000 fbeb 	bl	8005eac <vPortFree>
 80056d6:	e00a      	b.n	80056ee <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80056ea:	e000      	b.n	80056ee <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80056ec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <prvProcessReceivedCommands+0x188>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f107 0108 	add.w	r1, r7, #8
 80056f6:	2200      	movs	r2, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe fa61 	bl	8003bc0 <xQueueReceive>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f af45 	bne.w	8005590 <prvProcessReceivedCommands+0x8>
        }
    }
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	3728      	adds	r7, #40	; 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200003d4 	.word	0x200003d4

08005714 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800571a:	e048      	b.n	80057ae <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <prvSwitchTimerLists+0xc0>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005726:	4b2b      	ldr	r3, [pc, #172]	; (80057d4 <prvSwitchTimerLists+0xc0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3304      	adds	r3, #4
 8005734:	4618      	mov	r0, r3
 8005736:	f7fd feb6 	bl	80034a6 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d02e      	beq.n	80057ae <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4413      	add	r3, r2
 8005758:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	429a      	cmp	r2, r3
 8005760:	d90e      	bls.n	8005780 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <prvSwitchTimerLists+0xc0>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f7fd fe5b 	bl	8003434 <vListInsert>
 800577e:	e016      	b.n	80057ae <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005780:	2300      	movs	r3, #0
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2300      	movs	r3, #0
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	2100      	movs	r1, #0
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff fd7c 	bl	8005288 <xTimerGenericCommand>
 8005790:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	603b      	str	r3, [r7, #0]
    }
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <prvSwitchTimerLists+0xc0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1b1      	bne.n	800571c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <prvSwitchTimerLists+0xc0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <prvSwitchTimerLists+0xc4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <prvSwitchTimerLists+0xc0>)
 80057c4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80057c6:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <prvSwitchTimerLists+0xc4>)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	6013      	str	r3, [r2, #0]
    }
 80057cc:	bf00      	nop
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200003cc 	.word	0x200003cc
 80057d8:	200003d0 	.word	0x200003d0

080057dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80057e0:	f000 f962 	bl	8005aa8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <prvCheckForValidListAndQueue+0x54>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11d      	bne.n	8005828 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80057ec:	4811      	ldr	r0, [pc, #68]	; (8005834 <prvCheckForValidListAndQueue+0x58>)
 80057ee:	f7fd fdd0 	bl	8003392 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80057f2:	4811      	ldr	r0, [pc, #68]	; (8005838 <prvCheckForValidListAndQueue+0x5c>)
 80057f4:	f7fd fdcd 	bl	8003392 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <prvCheckForValidListAndQueue+0x60>)
 80057fa:	4a0e      	ldr	r2, [pc, #56]	; (8005834 <prvCheckForValidListAndQueue+0x58>)
 80057fc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80057fe:	4b10      	ldr	r3, [pc, #64]	; (8005840 <prvCheckForValidListAndQueue+0x64>)
 8005800:	4a0d      	ldr	r2, [pc, #52]	; (8005838 <prvCheckForValidListAndQueue+0x5c>)
 8005802:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005804:	2200      	movs	r2, #0
 8005806:	210c      	movs	r1, #12
 8005808:	200a      	movs	r0, #10
 800580a:	f7fd fedf 	bl	80035cc <xQueueGenericCreate>
 800580e:	4603      	mov	r3, r0
 8005810:	4a07      	ldr	r2, [pc, #28]	; (8005830 <prvCheckForValidListAndQueue+0x54>)
 8005812:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <prvCheckForValidListAndQueue+0x54>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <prvCheckForValidListAndQueue+0x54>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4908      	ldr	r1, [pc, #32]	; (8005844 <prvCheckForValidListAndQueue+0x68>)
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fd04 	bl	8004230 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005828:	f000 f96e 	bl	8005b08 <vPortExitCritical>
    }
 800582c:	bf00      	nop
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200003d4 	.word	0x200003d4
 8005834:	200003a4 	.word	0x200003a4
 8005838:	200003b8 	.word	0x200003b8
 800583c:	200003cc 	.word	0x200003cc
 8005840:	200003d0 	.word	0x200003d0
 8005844:	08006a94 	.word	0x08006a94

08005848 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3b04      	subs	r3, #4
 8005858:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005860:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3b04      	subs	r3, #4
 8005866:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3b04      	subs	r3, #4
 8005876:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <pxPortInitialiseStack+0x64>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3b14      	subs	r3, #20
 8005882:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3b04      	subs	r3, #4
 800588e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f06f 0202 	mvn.w	r2, #2
 8005896:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3b20      	subs	r3, #32
 800589c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800589e:	68fb      	ldr	r3, [r7, #12]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	080058b1 	.word	0x080058b1

080058b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80058ba:	4b12      	ldr	r3, [pc, #72]	; (8005904 <prvTaskExitError+0x54>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c2:	d00a      	beq.n	80058da <prvTaskExitError+0x2a>
        __asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60fb      	str	r3, [r7, #12]
    }
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <prvTaskExitError+0x28>
        __asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60bb      	str	r3, [r7, #8]
    }
 80058ec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80058ee:	bf00      	nop
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0fc      	beq.n	80058f0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	20000010 	.word	0x20000010
	...

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	200002a0 	.word	0x200002a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <prvPortStartFirstTask+0x24>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8814 	msr	CONTROL, r0
 800594a:	b662      	cpsie	i
 800594c:	b661      	cpsie	f
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	df00      	svc	0
 8005958:	bf00      	nop
 800595a:	0000      	.short	0x0000
 800595c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop

08005964 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800596a:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <xPortStartScheduler+0x120>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a46      	ldr	r2, [pc, #280]	; (8005a88 <xPortStartScheduler+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d10a      	bne.n	800598a <xPortStartScheduler+0x26>
        __asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	613b      	str	r3, [r7, #16]
    }
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800598a:	4b3e      	ldr	r3, [pc, #248]	; (8005a84 <xPortStartScheduler+0x120>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3f      	ldr	r2, [pc, #252]	; (8005a8c <xPortStartScheduler+0x128>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10a      	bne.n	80059aa <xPortStartScheduler+0x46>
        __asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	60fb      	str	r3, [r7, #12]
    }
 80059a6:	bf00      	nop
 80059a8:	e7fe      	b.n	80059a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059aa:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <xPortStartScheduler+0x12c>)
 80059ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	22ff      	movs	r2, #255	; 0xff
 80059ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <xPortStartScheduler+0x130>)
 80059d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <xPortStartScheduler+0x134>)
 80059d4:	2207      	movs	r2, #7
 80059d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059d8:	e009      	b.n	80059ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <xPortStartScheduler+0x134>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3b01      	subs	r3, #1
 80059e0:	4a2d      	ldr	r2, [pc, #180]	; (8005a98 <xPortStartScheduler+0x134>)
 80059e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d0ef      	beq.n	80059da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <xPortStartScheduler+0x134>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f1c3 0307 	rsb	r3, r3, #7
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d00a      	beq.n	8005a1c <xPortStartScheduler+0xb8>
        __asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60bb      	str	r3, [r7, #8]
    }
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a26:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2e:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <xPortStartScheduler+0x134>)
 8005a30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005a3a:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005a46:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <xPortStartScheduler+0x138>)
 8005a4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005a52:	f000 f8db 	bl	8005c0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005a56:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <xPortStartScheduler+0x13c>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005a5c:	f000 f8fa 	bl	8005c54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <xPortStartScheduler+0x140>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a0f      	ldr	r2, [pc, #60]	; (8005aa4 <xPortStartScheduler+0x140>)
 8005a66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005a6c:	f7ff ff64 	bl	8005938 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005a70:	f7fe ff7a 	bl	8004968 <vTaskSwitchContext>
    prvTaskExitError();
 8005a74:	f7ff ff1c 	bl	80058b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000ed00 	.word	0xe000ed00
 8005a88:	410fc271 	.word	0x410fc271
 8005a8c:	410fc270 	.word	0x410fc270
 8005a90:	e000e400 	.word	0xe000e400
 8005a94:	200003e0 	.word	0x200003e0
 8005a98:	200003e4 	.word	0x200003e4
 8005a9c:	e000ed20 	.word	0xe000ed20
 8005aa0:	20000010 	.word	0x20000010
 8005aa4:	e000ef34 	.word	0xe000ef34

08005aa8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
        __asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	607b      	str	r3, [r7, #4]
    }
 8005ac0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <vPortEnterCritical+0x58>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <vPortEnterCritical+0x58>)
 8005aca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <vPortEnterCritical+0x58>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10f      	bne.n	8005af4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <vPortEnterCritical+0x5c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <vPortEnterCritical+0x4c>
        __asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	603b      	str	r3, [r7, #0]
    }
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <vPortEnterCritical+0x4a>
    }
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	20000010 	.word	0x20000010
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <vPortExitCritical+0x50>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <vPortExitCritical+0x24>
        __asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	607b      	str	r3, [r7, #4]
    }
 8005b28:	bf00      	nop
 8005b2a:	e7fe      	b.n	8005b2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <vPortExitCritical+0x50>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <vPortExitCritical+0x50>)
 8005b34:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <vPortExitCritical+0x50>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <vPortExitCritical+0x42>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f383 8811 	msr	BASEPRI, r3
    }
 8005b48:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20000010 	.word	0x20000010
 8005b5c:	00000000 	.word	0x00000000

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f01e 0f10 	tst.w	lr, #16
 8005b70:	bf08      	it	eq
 8005b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b84:	f380 8811 	msr	BASEPRI, r0
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f7fe feea 	bl	8004968 <vTaskSwitchContext>
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f380 8811 	msr	BASEPRI, r0
 8005b9c:	bc09      	pop	{r0, r3}
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6808      	ldr	r0, [r1, #0]
 8005ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f01e 0f10 	tst.w	lr, #16
 8005baa:	bf08      	it	eq
 8005bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bb0:	f380 8809 	msr	PSP, r0
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	200002a0 	.word	0x200002a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
    }
 8005be0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005be2:	f7fe fe09 	bl	80047f8 <xTaskIncrementTick>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <SysTick_Handler+0x40>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
    }
 8005bfe:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <vPortSetupTimerInterrupt+0x38>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <vPortSetupTimerInterrupt+0x3c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <vPortSetupTimerInterrupt+0x40>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <vPortSetupTimerInterrupt+0x44>)
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c30:	2207      	movs	r2, #7
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e010 	.word	0xe000e010
 8005c44:	e000e018 	.word	0xe000e018
 8005c48:	20000008 	.word	0x20000008
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	e000e014 	.word	0xe000e014

08005c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c64 <vPortEnableVFP+0x10>
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c5e:	6001      	str	r1, [r0, #0]
 8005c60:	4770      	bx	lr
 8005c62:	0000      	.short	0x0000
 8005c64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop

08005c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005c72:	f3ef 8305 	mrs	r3, IPSR
 8005c76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d914      	bls.n	8005ca8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c7e:	4a17      	ldr	r2, [pc, #92]	; (8005cdc <vPortValidateInterruptPriority+0x70>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <vPortValidateInterruptPriority+0x74>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	7afa      	ldrb	r2, [r7, #11]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d20a      	bcs.n	8005ca8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	607b      	str	r3, [r7, #4]
    }
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <vPortValidateInterruptPriority+0x78>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <vPortValidateInterruptPriority+0x7c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d90a      	bls.n	8005cce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	603b      	str	r3, [r7, #0]
    }
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <vPortValidateInterruptPriority+0x60>
    }
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	e000e3f0 	.word	0xe000e3f0
 8005ce0:	200003e0 	.word	0x200003e0
 8005ce4:	e000ed0c 	.word	0xe000ed0c
 8005ce8:	200003e4 	.word	0x200003e4

08005cec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005cf8:	f7fe fcc4 	bl	8004684 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005cfc:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <pvPortMalloc+0x1a8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005d04:	f000 f934 	bl	8005f70 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d08:	4b63      	ldr	r3, [pc, #396]	; (8005e98 <pvPortMalloc+0x1ac>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 80a7 	bne.w	8005e64 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d02d      	beq.n	8005d78 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d227      	bcs.n	8005d78 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005d28:	2208      	movs	r2, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d021      	beq.n	8005d7e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f023 0307 	bic.w	r3, r3, #7
 8005d40:	3308      	adds	r3, #8
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d214      	bcs.n	8005d72 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f023 0307 	bic.w	r3, r3, #7
 8005d4e:	3308      	adds	r3, #8
 8005d50:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d010      	beq.n	8005d7e <pvPortMalloc+0x92>
        __asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	617b      	str	r3, [r7, #20]
    }
 8005d6e:	bf00      	nop
 8005d70:	e7fe      	b.n	8005d70 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d76:	e002      	b.n	8005d7e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	e000      	b.n	8005d80 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d7e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06e      	beq.n	8005e64 <pvPortMalloc+0x178>
 8005d86:	4b45      	ldr	r3, [pc, #276]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d869      	bhi.n	8005e64 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d90:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <pvPortMalloc+0x1b4>)
 8005d92:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005d94:	4b42      	ldr	r3, [pc, #264]	; (8005ea0 <pvPortMalloc+0x1b4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d9a:	e004      	b.n	8005da6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d903      	bls.n	8005db8 <pvPortMalloc+0xcc>
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f1      	bne.n	8005d9c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005db8:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <pvPortMalloc+0x1a8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d050      	beq.n	8005e64 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	4413      	add	r3, r2
 8005dca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	2308      	movs	r3, #8
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d91f      	bls.n	8005e24 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <pvPortMalloc+0x120>
        __asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	613b      	str	r3, [r7, #16]
    }
 8005e08:	bf00      	nop
 8005e0a:	e7fe      	b.n	8005e0a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f000 f908 	bl	8006034 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e32:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <pvPortMalloc+0x1b8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d203      	bcs.n	8005e46 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e3e:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <pvPortMalloc+0x1b0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <pvPortMalloc+0x1b8>)
 8005e44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <pvPortMalloc+0x1ac>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005e5a:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <pvPortMalloc+0x1bc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a11      	ldr	r2, [pc, #68]	; (8005ea8 <pvPortMalloc+0x1bc>)
 8005e62:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005e64:	f7fe fc1c 	bl	80046a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <pvPortMalloc+0x19c>
        __asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
    }
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <pvPortMalloc+0x19a>
    return pvReturn;
 8005e88:	69fb      	ldr	r3, [r7, #28]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20012ff0 	.word	0x20012ff0
 8005e98:	20013004 	.word	0x20013004
 8005e9c:	20012ff4 	.word	0x20012ff4
 8005ea0:	20012fe8 	.word	0x20012fe8
 8005ea4:	20012ff8 	.word	0x20012ff8
 8005ea8:	20012ffc 	.word	0x20012ffc

08005eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04d      	beq.n	8005f5a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	425b      	negs	r3, r3
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <vPortFree+0xb8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <vPortFree+0x44>
        __asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60fb      	str	r3, [r7, #12]
    }
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <vPortFree+0x62>
        __asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	60bb      	str	r3, [r7, #8]
    }
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <vPortFree+0xb8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01e      	beq.n	8005f5a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d11a      	bne.n	8005f5a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <vPortFree+0xb8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	401a      	ands	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005f34:	f7fe fba6 	bl	8004684 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <vPortFree+0xbc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4413      	add	r3, r2
 8005f42:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <vPortFree+0xbc>)
 8005f44:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f46:	6938      	ldr	r0, [r7, #16]
 8005f48:	f000 f874 	bl	8006034 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005f4c:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <vPortFree+0xc0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a06      	ldr	r2, [pc, #24]	; (8005f6c <vPortFree+0xc0>)
 8005f54:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005f56:	f7fe fba3 	bl	80046a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005f5a:	bf00      	nop
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20013004 	.word	0x20013004
 8005f68:	20012ff4 	.word	0x20012ff4
 8005f6c:	20013000 	.word	0x20013000

08005f70 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f76:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005f7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005f7c:	4b27      	ldr	r3, [pc, #156]	; (800601c <prvHeapInit+0xac>)
 8005f7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00c      	beq.n	8005fa4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3307      	adds	r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0307 	bic.w	r3, r3, #7
 8005f96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	; (800601c <prvHeapInit+0xac>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fa8:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <prvHeapInit+0xb0>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005fae:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <prvHeapInit+0xb0>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4413      	add	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a15      	ldr	r2, [pc, #84]	; (8006024 <prvHeapInit+0xb4>)
 8005fd0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005fd2:	4b14      	ldr	r3, [pc, #80]	; (8006024 <prvHeapInit+0xb4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <prvHeapInit+0xb4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	1ad2      	subs	r2, r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <prvHeapInit+0xb4>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <prvHeapInit+0xb8>)
 8005ffe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a09      	ldr	r2, [pc, #36]	; (800602c <prvHeapInit+0xbc>)
 8006006:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <prvHeapInit+0xc0>)
 800600a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	200003e8 	.word	0x200003e8
 8006020:	20012fe8 	.word	0x20012fe8
 8006024:	20012ff0 	.word	0x20012ff0
 8006028:	20012ff8 	.word	0x20012ff8
 800602c:	20012ff4 	.word	0x20012ff4
 8006030:	20013004 	.word	0x20013004

08006034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <prvInsertBlockIntoFreeList+0xac>)
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e002      	b.n	8006048 <prvInsertBlockIntoFreeList+0x14>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d8f7      	bhi.n	8006042 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	4413      	add	r3, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d108      	bne.n	8006076 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	441a      	add	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d118      	bne.n	80060bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d00d      	beq.n	80060b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	441a      	add	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e008      	b.n	80060c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060b2:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <prvInsertBlockIntoFreeList+0xb0>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e003      	b.n	80060c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d002      	beq.n	80060d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20012fe8 	.word	0x20012fe8
 80060e4:	20012ff0 	.word	0x20012ff0

080060e8 <__libc_init_array>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4d0d      	ldr	r5, [pc, #52]	; (8006120 <__libc_init_array+0x38>)
 80060ec:	4c0d      	ldr	r4, [pc, #52]	; (8006124 <__libc_init_array+0x3c>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	2600      	movs	r6, #0
 80060f4:	42a6      	cmp	r6, r4
 80060f6:	d109      	bne.n	800610c <__libc_init_array+0x24>
 80060f8:	4d0b      	ldr	r5, [pc, #44]	; (8006128 <__libc_init_array+0x40>)
 80060fa:	4c0c      	ldr	r4, [pc, #48]	; (800612c <__libc_init_array+0x44>)
 80060fc:	f000 fc9c 	bl	8006a38 <_init>
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	2600      	movs	r6, #0
 8006106:	42a6      	cmp	r6, r4
 8006108:	d105      	bne.n	8006116 <__libc_init_array+0x2e>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006110:	4798      	blx	r3
 8006112:	3601      	adds	r6, #1
 8006114:	e7ee      	b.n	80060f4 <__libc_init_array+0xc>
 8006116:	f855 3b04 	ldr.w	r3, [r5], #4
 800611a:	4798      	blx	r3
 800611c:	3601      	adds	r6, #1
 800611e:	e7f2      	b.n	8006106 <__libc_init_array+0x1e>
 8006120:	08006af0 	.word	0x08006af0
 8006124:	08006af0 	.word	0x08006af0
 8006128:	08006af0 	.word	0x08006af0
 800612c:	08006af4 	.word	0x08006af4

08006130 <memcpy>:
 8006130:	440a      	add	r2, r1
 8006132:	4291      	cmp	r1, r2
 8006134:	f100 33ff 	add.w	r3, r0, #4294967295
 8006138:	d100      	bne.n	800613c <memcpy+0xc>
 800613a:	4770      	bx	lr
 800613c:	b510      	push	{r4, lr}
 800613e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006146:	4291      	cmp	r1, r2
 8006148:	d1f9      	bne.n	800613e <memcpy+0xe>
 800614a:	bd10      	pop	{r4, pc}

0800614c <memset>:
 800614c:	4402      	add	r2, r0
 800614e:	4603      	mov	r3, r0
 8006150:	4293      	cmp	r3, r2
 8006152:	d100      	bne.n	8006156 <memset+0xa>
 8006154:	4770      	bx	lr
 8006156:	f803 1b01 	strb.w	r1, [r3], #1
 800615a:	e7f9      	b.n	8006150 <memset+0x4>

0800615c <siprintf>:
 800615c:	b40e      	push	{r1, r2, r3}
 800615e:	b500      	push	{lr}
 8006160:	b09c      	sub	sp, #112	; 0x70
 8006162:	ab1d      	add	r3, sp, #116	; 0x74
 8006164:	9002      	str	r0, [sp, #8]
 8006166:	9006      	str	r0, [sp, #24]
 8006168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800616c:	4809      	ldr	r0, [pc, #36]	; (8006194 <siprintf+0x38>)
 800616e:	9107      	str	r1, [sp, #28]
 8006170:	9104      	str	r1, [sp, #16]
 8006172:	4909      	ldr	r1, [pc, #36]	; (8006198 <siprintf+0x3c>)
 8006174:	f853 2b04 	ldr.w	r2, [r3], #4
 8006178:	9105      	str	r1, [sp, #20]
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	a902      	add	r1, sp, #8
 8006180:	f000 f868 	bl	8006254 <_svfiprintf_r>
 8006184:	9b02      	ldr	r3, [sp, #8]
 8006186:	2200      	movs	r2, #0
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	b01c      	add	sp, #112	; 0x70
 800618c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006190:	b003      	add	sp, #12
 8006192:	4770      	bx	lr
 8006194:	20000014 	.word	0x20000014
 8006198:	ffff0208 	.word	0xffff0208

0800619c <__ssputs_r>:
 800619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	688e      	ldr	r6, [r1, #8]
 80061a2:	429e      	cmp	r6, r3
 80061a4:	4682      	mov	sl, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	4690      	mov	r8, r2
 80061aa:	461f      	mov	r7, r3
 80061ac:	d838      	bhi.n	8006220 <__ssputs_r+0x84>
 80061ae:	898a      	ldrh	r2, [r1, #12]
 80061b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061b4:	d032      	beq.n	800621c <__ssputs_r+0x80>
 80061b6:	6825      	ldr	r5, [r4, #0]
 80061b8:	6909      	ldr	r1, [r1, #16]
 80061ba:	eba5 0901 	sub.w	r9, r5, r1
 80061be:	6965      	ldr	r5, [r4, #20]
 80061c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061c8:	3301      	adds	r3, #1
 80061ca:	444b      	add	r3, r9
 80061cc:	106d      	asrs	r5, r5, #1
 80061ce:	429d      	cmp	r5, r3
 80061d0:	bf38      	it	cc
 80061d2:	461d      	movcc	r5, r3
 80061d4:	0553      	lsls	r3, r2, #21
 80061d6:	d531      	bpl.n	800623c <__ssputs_r+0xa0>
 80061d8:	4629      	mov	r1, r5
 80061da:	f000 fb55 	bl	8006888 <_malloc_r>
 80061de:	4606      	mov	r6, r0
 80061e0:	b950      	cbnz	r0, 80061f8 <__ssputs_r+0x5c>
 80061e2:	230c      	movs	r3, #12
 80061e4:	f8ca 3000 	str.w	r3, [sl]
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f8:	6921      	ldr	r1, [r4, #16]
 80061fa:	464a      	mov	r2, r9
 80061fc:	f7ff ff98 	bl	8006130 <memcpy>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	6126      	str	r6, [r4, #16]
 800620e:	6165      	str	r5, [r4, #20]
 8006210:	444e      	add	r6, r9
 8006212:	eba5 0509 	sub.w	r5, r5, r9
 8006216:	6026      	str	r6, [r4, #0]
 8006218:	60a5      	str	r5, [r4, #8]
 800621a:	463e      	mov	r6, r7
 800621c:	42be      	cmp	r6, r7
 800621e:	d900      	bls.n	8006222 <__ssputs_r+0x86>
 8006220:	463e      	mov	r6, r7
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	4632      	mov	r2, r6
 8006226:	4641      	mov	r1, r8
 8006228:	f000 faa8 	bl	800677c <memmove>
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	1b9b      	subs	r3, r3, r6
 8006230:	60a3      	str	r3, [r4, #8]
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	4433      	add	r3, r6
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	2000      	movs	r0, #0
 800623a:	e7db      	b.n	80061f4 <__ssputs_r+0x58>
 800623c:	462a      	mov	r2, r5
 800623e:	f000 fb97 	bl	8006970 <_realloc_r>
 8006242:	4606      	mov	r6, r0
 8006244:	2800      	cmp	r0, #0
 8006246:	d1e1      	bne.n	800620c <__ssputs_r+0x70>
 8006248:	6921      	ldr	r1, [r4, #16]
 800624a:	4650      	mov	r0, sl
 800624c:	f000 fab0 	bl	80067b0 <_free_r>
 8006250:	e7c7      	b.n	80061e2 <__ssputs_r+0x46>
	...

08006254 <_svfiprintf_r>:
 8006254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006258:	4698      	mov	r8, r3
 800625a:	898b      	ldrh	r3, [r1, #12]
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	b09d      	sub	sp, #116	; 0x74
 8006260:	4607      	mov	r7, r0
 8006262:	460d      	mov	r5, r1
 8006264:	4614      	mov	r4, r2
 8006266:	d50e      	bpl.n	8006286 <_svfiprintf_r+0x32>
 8006268:	690b      	ldr	r3, [r1, #16]
 800626a:	b963      	cbnz	r3, 8006286 <_svfiprintf_r+0x32>
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	f000 fb0b 	bl	8006888 <_malloc_r>
 8006272:	6028      	str	r0, [r5, #0]
 8006274:	6128      	str	r0, [r5, #16]
 8006276:	b920      	cbnz	r0, 8006282 <_svfiprintf_r+0x2e>
 8006278:	230c      	movs	r3, #12
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e0d1      	b.n	8006426 <_svfiprintf_r+0x1d2>
 8006282:	2340      	movs	r3, #64	; 0x40
 8006284:	616b      	str	r3, [r5, #20]
 8006286:	2300      	movs	r3, #0
 8006288:	9309      	str	r3, [sp, #36]	; 0x24
 800628a:	2320      	movs	r3, #32
 800628c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006290:	f8cd 800c 	str.w	r8, [sp, #12]
 8006294:	2330      	movs	r3, #48	; 0x30
 8006296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006440 <_svfiprintf_r+0x1ec>
 800629a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800629e:	f04f 0901 	mov.w	r9, #1
 80062a2:	4623      	mov	r3, r4
 80062a4:	469a      	mov	sl, r3
 80062a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062aa:	b10a      	cbz	r2, 80062b0 <_svfiprintf_r+0x5c>
 80062ac:	2a25      	cmp	r2, #37	; 0x25
 80062ae:	d1f9      	bne.n	80062a4 <_svfiprintf_r+0x50>
 80062b0:	ebba 0b04 	subs.w	fp, sl, r4
 80062b4:	d00b      	beq.n	80062ce <_svfiprintf_r+0x7a>
 80062b6:	465b      	mov	r3, fp
 80062b8:	4622      	mov	r2, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	4638      	mov	r0, r7
 80062be:	f7ff ff6d 	bl	800619c <__ssputs_r>
 80062c2:	3001      	adds	r0, #1
 80062c4:	f000 80aa 	beq.w	800641c <_svfiprintf_r+0x1c8>
 80062c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ca:	445a      	add	r2, fp
 80062cc:	9209      	str	r2, [sp, #36]	; 0x24
 80062ce:	f89a 3000 	ldrb.w	r3, [sl]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80a2 	beq.w	800641c <_svfiprintf_r+0x1c8>
 80062d8:	2300      	movs	r3, #0
 80062da:	f04f 32ff 	mov.w	r2, #4294967295
 80062de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e2:	f10a 0a01 	add.w	sl, sl, #1
 80062e6:	9304      	str	r3, [sp, #16]
 80062e8:	9307      	str	r3, [sp, #28]
 80062ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ee:	931a      	str	r3, [sp, #104]	; 0x68
 80062f0:	4654      	mov	r4, sl
 80062f2:	2205      	movs	r2, #5
 80062f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f8:	4851      	ldr	r0, [pc, #324]	; (8006440 <_svfiprintf_r+0x1ec>)
 80062fa:	f7f9 ff71 	bl	80001e0 <memchr>
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	b9d8      	cbnz	r0, 800633a <_svfiprintf_r+0xe6>
 8006302:	06d0      	lsls	r0, r2, #27
 8006304:	bf44      	itt	mi
 8006306:	2320      	movmi	r3, #32
 8006308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630c:	0711      	lsls	r1, r2, #28
 800630e:	bf44      	itt	mi
 8006310:	232b      	movmi	r3, #43	; 0x2b
 8006312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006316:	f89a 3000 	ldrb.w	r3, [sl]
 800631a:	2b2a      	cmp	r3, #42	; 0x2a
 800631c:	d015      	beq.n	800634a <_svfiprintf_r+0xf6>
 800631e:	9a07      	ldr	r2, [sp, #28]
 8006320:	4654      	mov	r4, sl
 8006322:	2000      	movs	r0, #0
 8006324:	f04f 0c0a 	mov.w	ip, #10
 8006328:	4621      	mov	r1, r4
 800632a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800632e:	3b30      	subs	r3, #48	; 0x30
 8006330:	2b09      	cmp	r3, #9
 8006332:	d94e      	bls.n	80063d2 <_svfiprintf_r+0x17e>
 8006334:	b1b0      	cbz	r0, 8006364 <_svfiprintf_r+0x110>
 8006336:	9207      	str	r2, [sp, #28]
 8006338:	e014      	b.n	8006364 <_svfiprintf_r+0x110>
 800633a:	eba0 0308 	sub.w	r3, r0, r8
 800633e:	fa09 f303 	lsl.w	r3, r9, r3
 8006342:	4313      	orrs	r3, r2
 8006344:	9304      	str	r3, [sp, #16]
 8006346:	46a2      	mov	sl, r4
 8006348:	e7d2      	b.n	80062f0 <_svfiprintf_r+0x9c>
 800634a:	9b03      	ldr	r3, [sp, #12]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9103      	str	r1, [sp, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfbb      	ittet	lt
 8006356:	425b      	neglt	r3, r3
 8006358:	f042 0202 	orrlt.w	r2, r2, #2
 800635c:	9307      	strge	r3, [sp, #28]
 800635e:	9307      	strlt	r3, [sp, #28]
 8006360:	bfb8      	it	lt
 8006362:	9204      	strlt	r2, [sp, #16]
 8006364:	7823      	ldrb	r3, [r4, #0]
 8006366:	2b2e      	cmp	r3, #46	; 0x2e
 8006368:	d10c      	bne.n	8006384 <_svfiprintf_r+0x130>
 800636a:	7863      	ldrb	r3, [r4, #1]
 800636c:	2b2a      	cmp	r3, #42	; 0x2a
 800636e:	d135      	bne.n	80063dc <_svfiprintf_r+0x188>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	9203      	str	r2, [sp, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	bfb8      	it	lt
 800637c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006380:	3402      	adds	r4, #2
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006450 <_svfiprintf_r+0x1fc>
 8006388:	7821      	ldrb	r1, [r4, #0]
 800638a:	2203      	movs	r2, #3
 800638c:	4650      	mov	r0, sl
 800638e:	f7f9 ff27 	bl	80001e0 <memchr>
 8006392:	b140      	cbz	r0, 80063a6 <_svfiprintf_r+0x152>
 8006394:	2340      	movs	r3, #64	; 0x40
 8006396:	eba0 000a 	sub.w	r0, r0, sl
 800639a:	fa03 f000 	lsl.w	r0, r3, r0
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	4303      	orrs	r3, r0
 80063a2:	3401      	adds	r4, #1
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063aa:	4826      	ldr	r0, [pc, #152]	; (8006444 <_svfiprintf_r+0x1f0>)
 80063ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063b0:	2206      	movs	r2, #6
 80063b2:	f7f9 ff15 	bl	80001e0 <memchr>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d038      	beq.n	800642c <_svfiprintf_r+0x1d8>
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <_svfiprintf_r+0x1f4>)
 80063bc:	bb1b      	cbnz	r3, 8006406 <_svfiprintf_r+0x1b2>
 80063be:	9b03      	ldr	r3, [sp, #12]
 80063c0:	3307      	adds	r3, #7
 80063c2:	f023 0307 	bic.w	r3, r3, #7
 80063c6:	3308      	adds	r3, #8
 80063c8:	9303      	str	r3, [sp, #12]
 80063ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063cc:	4433      	add	r3, r6
 80063ce:	9309      	str	r3, [sp, #36]	; 0x24
 80063d0:	e767      	b.n	80062a2 <_svfiprintf_r+0x4e>
 80063d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d6:	460c      	mov	r4, r1
 80063d8:	2001      	movs	r0, #1
 80063da:	e7a5      	b.n	8006328 <_svfiprintf_r+0xd4>
 80063dc:	2300      	movs	r3, #0
 80063de:	3401      	adds	r4, #1
 80063e0:	9305      	str	r3, [sp, #20]
 80063e2:	4619      	mov	r1, r3
 80063e4:	f04f 0c0a 	mov.w	ip, #10
 80063e8:	4620      	mov	r0, r4
 80063ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ee:	3a30      	subs	r2, #48	; 0x30
 80063f0:	2a09      	cmp	r2, #9
 80063f2:	d903      	bls.n	80063fc <_svfiprintf_r+0x1a8>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0c5      	beq.n	8006384 <_svfiprintf_r+0x130>
 80063f8:	9105      	str	r1, [sp, #20]
 80063fa:	e7c3      	b.n	8006384 <_svfiprintf_r+0x130>
 80063fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006400:	4604      	mov	r4, r0
 8006402:	2301      	movs	r3, #1
 8006404:	e7f0      	b.n	80063e8 <_svfiprintf_r+0x194>
 8006406:	ab03      	add	r3, sp, #12
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	462a      	mov	r2, r5
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <_svfiprintf_r+0x1f8>)
 800640e:	a904      	add	r1, sp, #16
 8006410:	4638      	mov	r0, r7
 8006412:	f3af 8000 	nop.w
 8006416:	1c42      	adds	r2, r0, #1
 8006418:	4606      	mov	r6, r0
 800641a:	d1d6      	bne.n	80063ca <_svfiprintf_r+0x176>
 800641c:	89ab      	ldrh	r3, [r5, #12]
 800641e:	065b      	lsls	r3, r3, #25
 8006420:	f53f af2c 	bmi.w	800627c <_svfiprintf_r+0x28>
 8006424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006426:	b01d      	add	sp, #116	; 0x74
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	ab03      	add	r3, sp, #12
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	462a      	mov	r2, r5
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <_svfiprintf_r+0x1f8>)
 8006434:	a904      	add	r1, sp, #16
 8006436:	4638      	mov	r0, r7
 8006438:	f000 f87a 	bl	8006530 <_printf_i>
 800643c:	e7eb      	b.n	8006416 <_svfiprintf_r+0x1c2>
 800643e:	bf00      	nop
 8006440:	08006ab4 	.word	0x08006ab4
 8006444:	08006abe 	.word	0x08006abe
 8006448:	00000000 	.word	0x00000000
 800644c:	0800619d 	.word	0x0800619d
 8006450:	08006aba 	.word	0x08006aba

08006454 <_printf_common>:
 8006454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006458:	4616      	mov	r6, r2
 800645a:	4699      	mov	r9, r3
 800645c:	688a      	ldr	r2, [r1, #8]
 800645e:	690b      	ldr	r3, [r1, #16]
 8006460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006464:	4293      	cmp	r3, r2
 8006466:	bfb8      	it	lt
 8006468:	4613      	movlt	r3, r2
 800646a:	6033      	str	r3, [r6, #0]
 800646c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006470:	4607      	mov	r7, r0
 8006472:	460c      	mov	r4, r1
 8006474:	b10a      	cbz	r2, 800647a <_printf_common+0x26>
 8006476:	3301      	adds	r3, #1
 8006478:	6033      	str	r3, [r6, #0]
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	0699      	lsls	r1, r3, #26
 800647e:	bf42      	ittt	mi
 8006480:	6833      	ldrmi	r3, [r6, #0]
 8006482:	3302      	addmi	r3, #2
 8006484:	6033      	strmi	r3, [r6, #0]
 8006486:	6825      	ldr	r5, [r4, #0]
 8006488:	f015 0506 	ands.w	r5, r5, #6
 800648c:	d106      	bne.n	800649c <_printf_common+0x48>
 800648e:	f104 0a19 	add.w	sl, r4, #25
 8006492:	68e3      	ldr	r3, [r4, #12]
 8006494:	6832      	ldr	r2, [r6, #0]
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	42ab      	cmp	r3, r5
 800649a:	dc26      	bgt.n	80064ea <_printf_common+0x96>
 800649c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064a0:	1e13      	subs	r3, r2, #0
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	bf18      	it	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	0692      	lsls	r2, r2, #26
 80064aa:	d42b      	bmi.n	8006504 <_printf_common+0xb0>
 80064ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064b0:	4649      	mov	r1, r9
 80064b2:	4638      	mov	r0, r7
 80064b4:	47c0      	blx	r8
 80064b6:	3001      	adds	r0, #1
 80064b8:	d01e      	beq.n	80064f8 <_printf_common+0xa4>
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	68e5      	ldr	r5, [r4, #12]
 80064be:	6832      	ldr	r2, [r6, #0]
 80064c0:	f003 0306 	and.w	r3, r3, #6
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	bf08      	it	eq
 80064c8:	1aad      	subeq	r5, r5, r2
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	6922      	ldr	r2, [r4, #16]
 80064ce:	bf0c      	ite	eq
 80064d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064d4:	2500      	movne	r5, #0
 80064d6:	4293      	cmp	r3, r2
 80064d8:	bfc4      	itt	gt
 80064da:	1a9b      	subgt	r3, r3, r2
 80064dc:	18ed      	addgt	r5, r5, r3
 80064de:	2600      	movs	r6, #0
 80064e0:	341a      	adds	r4, #26
 80064e2:	42b5      	cmp	r5, r6
 80064e4:	d11a      	bne.n	800651c <_printf_common+0xc8>
 80064e6:	2000      	movs	r0, #0
 80064e8:	e008      	b.n	80064fc <_printf_common+0xa8>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4652      	mov	r2, sl
 80064ee:	4649      	mov	r1, r9
 80064f0:	4638      	mov	r0, r7
 80064f2:	47c0      	blx	r8
 80064f4:	3001      	adds	r0, #1
 80064f6:	d103      	bne.n	8006500 <_printf_common+0xac>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006500:	3501      	adds	r5, #1
 8006502:	e7c6      	b.n	8006492 <_printf_common+0x3e>
 8006504:	18e1      	adds	r1, r4, r3
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	2030      	movs	r0, #48	; 0x30
 800650a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800650e:	4422      	add	r2, r4
 8006510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006518:	3302      	adds	r3, #2
 800651a:	e7c7      	b.n	80064ac <_printf_common+0x58>
 800651c:	2301      	movs	r3, #1
 800651e:	4622      	mov	r2, r4
 8006520:	4649      	mov	r1, r9
 8006522:	4638      	mov	r0, r7
 8006524:	47c0      	blx	r8
 8006526:	3001      	adds	r0, #1
 8006528:	d0e6      	beq.n	80064f8 <_printf_common+0xa4>
 800652a:	3601      	adds	r6, #1
 800652c:	e7d9      	b.n	80064e2 <_printf_common+0x8e>
	...

08006530 <_printf_i>:
 8006530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	7e0f      	ldrb	r7, [r1, #24]
 8006536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006538:	2f78      	cmp	r7, #120	; 0x78
 800653a:	4691      	mov	r9, r2
 800653c:	4680      	mov	r8, r0
 800653e:	460c      	mov	r4, r1
 8006540:	469a      	mov	sl, r3
 8006542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006546:	d807      	bhi.n	8006558 <_printf_i+0x28>
 8006548:	2f62      	cmp	r7, #98	; 0x62
 800654a:	d80a      	bhi.n	8006562 <_printf_i+0x32>
 800654c:	2f00      	cmp	r7, #0
 800654e:	f000 80d8 	beq.w	8006702 <_printf_i+0x1d2>
 8006552:	2f58      	cmp	r7, #88	; 0x58
 8006554:	f000 80a3 	beq.w	800669e <_printf_i+0x16e>
 8006558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800655c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006560:	e03a      	b.n	80065d8 <_printf_i+0xa8>
 8006562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006566:	2b15      	cmp	r3, #21
 8006568:	d8f6      	bhi.n	8006558 <_printf_i+0x28>
 800656a:	a101      	add	r1, pc, #4	; (adr r1, 8006570 <_printf_i+0x40>)
 800656c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006570:	080065c9 	.word	0x080065c9
 8006574:	080065dd 	.word	0x080065dd
 8006578:	08006559 	.word	0x08006559
 800657c:	08006559 	.word	0x08006559
 8006580:	08006559 	.word	0x08006559
 8006584:	08006559 	.word	0x08006559
 8006588:	080065dd 	.word	0x080065dd
 800658c:	08006559 	.word	0x08006559
 8006590:	08006559 	.word	0x08006559
 8006594:	08006559 	.word	0x08006559
 8006598:	08006559 	.word	0x08006559
 800659c:	080066e9 	.word	0x080066e9
 80065a0:	0800660d 	.word	0x0800660d
 80065a4:	080066cb 	.word	0x080066cb
 80065a8:	08006559 	.word	0x08006559
 80065ac:	08006559 	.word	0x08006559
 80065b0:	0800670b 	.word	0x0800670b
 80065b4:	08006559 	.word	0x08006559
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006559 	.word	0x08006559
 80065c0:	08006559 	.word	0x08006559
 80065c4:	080066d3 	.word	0x080066d3
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	1d1a      	adds	r2, r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	602a      	str	r2, [r5, #0]
 80065d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065d8:	2301      	movs	r3, #1
 80065da:	e0a3      	b.n	8006724 <_printf_i+0x1f4>
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	6829      	ldr	r1, [r5, #0]
 80065e0:	0606      	lsls	r6, r0, #24
 80065e2:	f101 0304 	add.w	r3, r1, #4
 80065e6:	d50a      	bpl.n	80065fe <_printf_i+0xce>
 80065e8:	680e      	ldr	r6, [r1, #0]
 80065ea:	602b      	str	r3, [r5, #0]
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	da03      	bge.n	80065f8 <_printf_i+0xc8>
 80065f0:	232d      	movs	r3, #45	; 0x2d
 80065f2:	4276      	negs	r6, r6
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	485e      	ldr	r0, [pc, #376]	; (8006774 <_printf_i+0x244>)
 80065fa:	230a      	movs	r3, #10
 80065fc:	e019      	b.n	8006632 <_printf_i+0x102>
 80065fe:	680e      	ldr	r6, [r1, #0]
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006606:	bf18      	it	ne
 8006608:	b236      	sxthne	r6, r6
 800660a:	e7ef      	b.n	80065ec <_printf_i+0xbc>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	6820      	ldr	r0, [r4, #0]
 8006610:	1d19      	adds	r1, r3, #4
 8006612:	6029      	str	r1, [r5, #0]
 8006614:	0601      	lsls	r1, r0, #24
 8006616:	d501      	bpl.n	800661c <_printf_i+0xec>
 8006618:	681e      	ldr	r6, [r3, #0]
 800661a:	e002      	b.n	8006622 <_printf_i+0xf2>
 800661c:	0646      	lsls	r6, r0, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0xe8>
 8006620:	881e      	ldrh	r6, [r3, #0]
 8006622:	4854      	ldr	r0, [pc, #336]	; (8006774 <_printf_i+0x244>)
 8006624:	2f6f      	cmp	r7, #111	; 0x6f
 8006626:	bf0c      	ite	eq
 8006628:	2308      	moveq	r3, #8
 800662a:	230a      	movne	r3, #10
 800662c:	2100      	movs	r1, #0
 800662e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006632:	6865      	ldr	r5, [r4, #4]
 8006634:	60a5      	str	r5, [r4, #8]
 8006636:	2d00      	cmp	r5, #0
 8006638:	bfa2      	ittt	ge
 800663a:	6821      	ldrge	r1, [r4, #0]
 800663c:	f021 0104 	bicge.w	r1, r1, #4
 8006640:	6021      	strge	r1, [r4, #0]
 8006642:	b90e      	cbnz	r6, 8006648 <_printf_i+0x118>
 8006644:	2d00      	cmp	r5, #0
 8006646:	d04d      	beq.n	80066e4 <_printf_i+0x1b4>
 8006648:	4615      	mov	r5, r2
 800664a:	fbb6 f1f3 	udiv	r1, r6, r3
 800664e:	fb03 6711 	mls	r7, r3, r1, r6
 8006652:	5dc7      	ldrb	r7, [r0, r7]
 8006654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006658:	4637      	mov	r7, r6
 800665a:	42bb      	cmp	r3, r7
 800665c:	460e      	mov	r6, r1
 800665e:	d9f4      	bls.n	800664a <_printf_i+0x11a>
 8006660:	2b08      	cmp	r3, #8
 8006662:	d10b      	bne.n	800667c <_printf_i+0x14c>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	07de      	lsls	r6, r3, #31
 8006668:	d508      	bpl.n	800667c <_printf_i+0x14c>
 800666a:	6923      	ldr	r3, [r4, #16]
 800666c:	6861      	ldr	r1, [r4, #4]
 800666e:	4299      	cmp	r1, r3
 8006670:	bfde      	ittt	le
 8006672:	2330      	movle	r3, #48	; 0x30
 8006674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800667c:	1b52      	subs	r2, r2, r5
 800667e:	6122      	str	r2, [r4, #16]
 8006680:	f8cd a000 	str.w	sl, [sp]
 8006684:	464b      	mov	r3, r9
 8006686:	aa03      	add	r2, sp, #12
 8006688:	4621      	mov	r1, r4
 800668a:	4640      	mov	r0, r8
 800668c:	f7ff fee2 	bl	8006454 <_printf_common>
 8006690:	3001      	adds	r0, #1
 8006692:	d14c      	bne.n	800672e <_printf_i+0x1fe>
 8006694:	f04f 30ff 	mov.w	r0, #4294967295
 8006698:	b004      	add	sp, #16
 800669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669e:	4835      	ldr	r0, [pc, #212]	; (8006774 <_printf_i+0x244>)
 80066a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066a4:	6829      	ldr	r1, [r5, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80066ac:	6029      	str	r1, [r5, #0]
 80066ae:	061d      	lsls	r5, r3, #24
 80066b0:	d514      	bpl.n	80066dc <_printf_i+0x1ac>
 80066b2:	07df      	lsls	r7, r3, #31
 80066b4:	bf44      	itt	mi
 80066b6:	f043 0320 	orrmi.w	r3, r3, #32
 80066ba:	6023      	strmi	r3, [r4, #0]
 80066bc:	b91e      	cbnz	r6, 80066c6 <_printf_i+0x196>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	f023 0320 	bic.w	r3, r3, #32
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	2310      	movs	r3, #16
 80066c8:	e7b0      	b.n	800662c <_printf_i+0xfc>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	f043 0320 	orr.w	r3, r3, #32
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	2378      	movs	r3, #120	; 0x78
 80066d4:	4828      	ldr	r0, [pc, #160]	; (8006778 <_printf_i+0x248>)
 80066d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066da:	e7e3      	b.n	80066a4 <_printf_i+0x174>
 80066dc:	0659      	lsls	r1, r3, #25
 80066de:	bf48      	it	mi
 80066e0:	b2b6      	uxthmi	r6, r6
 80066e2:	e7e6      	b.n	80066b2 <_printf_i+0x182>
 80066e4:	4615      	mov	r5, r2
 80066e6:	e7bb      	b.n	8006660 <_printf_i+0x130>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	6826      	ldr	r6, [r4, #0]
 80066ec:	6961      	ldr	r1, [r4, #20]
 80066ee:	1d18      	adds	r0, r3, #4
 80066f0:	6028      	str	r0, [r5, #0]
 80066f2:	0635      	lsls	r5, r6, #24
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0x1cc>
 80066f8:	6019      	str	r1, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0x1d2>
 80066fc:	0670      	lsls	r0, r6, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0x1c8>
 8006700:	8019      	strh	r1, [r3, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	4615      	mov	r5, r2
 8006708:	e7ba      	b.n	8006680 <_printf_i+0x150>
 800670a:	682b      	ldr	r3, [r5, #0]
 800670c:	1d1a      	adds	r2, r3, #4
 800670e:	602a      	str	r2, [r5, #0]
 8006710:	681d      	ldr	r5, [r3, #0]
 8006712:	6862      	ldr	r2, [r4, #4]
 8006714:	2100      	movs	r1, #0
 8006716:	4628      	mov	r0, r5
 8006718:	f7f9 fd62 	bl	80001e0 <memchr>
 800671c:	b108      	cbz	r0, 8006722 <_printf_i+0x1f2>
 800671e:	1b40      	subs	r0, r0, r5
 8006720:	6060      	str	r0, [r4, #4]
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	2300      	movs	r3, #0
 8006728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800672c:	e7a8      	b.n	8006680 <_printf_i+0x150>
 800672e:	6923      	ldr	r3, [r4, #16]
 8006730:	462a      	mov	r2, r5
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d0ab      	beq.n	8006694 <_printf_i+0x164>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	079b      	lsls	r3, r3, #30
 8006740:	d413      	bmi.n	800676a <_printf_i+0x23a>
 8006742:	68e0      	ldr	r0, [r4, #12]
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	4298      	cmp	r0, r3
 8006748:	bfb8      	it	lt
 800674a:	4618      	movlt	r0, r3
 800674c:	e7a4      	b.n	8006698 <_printf_i+0x168>
 800674e:	2301      	movs	r3, #1
 8006750:	4632      	mov	r2, r6
 8006752:	4649      	mov	r1, r9
 8006754:	4640      	mov	r0, r8
 8006756:	47d0      	blx	sl
 8006758:	3001      	adds	r0, #1
 800675a:	d09b      	beq.n	8006694 <_printf_i+0x164>
 800675c:	3501      	adds	r5, #1
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	9903      	ldr	r1, [sp, #12]
 8006762:	1a5b      	subs	r3, r3, r1
 8006764:	42ab      	cmp	r3, r5
 8006766:	dcf2      	bgt.n	800674e <_printf_i+0x21e>
 8006768:	e7eb      	b.n	8006742 <_printf_i+0x212>
 800676a:	2500      	movs	r5, #0
 800676c:	f104 0619 	add.w	r6, r4, #25
 8006770:	e7f5      	b.n	800675e <_printf_i+0x22e>
 8006772:	bf00      	nop
 8006774:	08006ac5 	.word	0x08006ac5
 8006778:	08006ad6 	.word	0x08006ad6

0800677c <memmove>:
 800677c:	4288      	cmp	r0, r1
 800677e:	b510      	push	{r4, lr}
 8006780:	eb01 0402 	add.w	r4, r1, r2
 8006784:	d902      	bls.n	800678c <memmove+0x10>
 8006786:	4284      	cmp	r4, r0
 8006788:	4623      	mov	r3, r4
 800678a:	d807      	bhi.n	800679c <memmove+0x20>
 800678c:	1e43      	subs	r3, r0, #1
 800678e:	42a1      	cmp	r1, r4
 8006790:	d008      	beq.n	80067a4 <memmove+0x28>
 8006792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679a:	e7f8      	b.n	800678e <memmove+0x12>
 800679c:	4402      	add	r2, r0
 800679e:	4601      	mov	r1, r0
 80067a0:	428a      	cmp	r2, r1
 80067a2:	d100      	bne.n	80067a6 <memmove+0x2a>
 80067a4:	bd10      	pop	{r4, pc}
 80067a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067ae:	e7f7      	b.n	80067a0 <memmove+0x24>

080067b0 <_free_r>:
 80067b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067b2:	2900      	cmp	r1, #0
 80067b4:	d044      	beq.n	8006840 <_free_r+0x90>
 80067b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ba:	9001      	str	r0, [sp, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f1a1 0404 	sub.w	r4, r1, #4
 80067c2:	bfb8      	it	lt
 80067c4:	18e4      	addlt	r4, r4, r3
 80067c6:	f000 f913 	bl	80069f0 <__malloc_lock>
 80067ca:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <_free_r+0x94>)
 80067cc:	9801      	ldr	r0, [sp, #4]
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	b933      	cbnz	r3, 80067e0 <_free_r+0x30>
 80067d2:	6063      	str	r3, [r4, #4]
 80067d4:	6014      	str	r4, [r2, #0]
 80067d6:	b003      	add	sp, #12
 80067d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067dc:	f000 b90e 	b.w	80069fc <__malloc_unlock>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d908      	bls.n	80067f6 <_free_r+0x46>
 80067e4:	6825      	ldr	r5, [r4, #0]
 80067e6:	1961      	adds	r1, r4, r5
 80067e8:	428b      	cmp	r3, r1
 80067ea:	bf01      	itttt	eq
 80067ec:	6819      	ldreq	r1, [r3, #0]
 80067ee:	685b      	ldreq	r3, [r3, #4]
 80067f0:	1949      	addeq	r1, r1, r5
 80067f2:	6021      	streq	r1, [r4, #0]
 80067f4:	e7ed      	b.n	80067d2 <_free_r+0x22>
 80067f6:	461a      	mov	r2, r3
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	b10b      	cbz	r3, 8006800 <_free_r+0x50>
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d9fa      	bls.n	80067f6 <_free_r+0x46>
 8006800:	6811      	ldr	r1, [r2, #0]
 8006802:	1855      	adds	r5, r2, r1
 8006804:	42a5      	cmp	r5, r4
 8006806:	d10b      	bne.n	8006820 <_free_r+0x70>
 8006808:	6824      	ldr	r4, [r4, #0]
 800680a:	4421      	add	r1, r4
 800680c:	1854      	adds	r4, r2, r1
 800680e:	42a3      	cmp	r3, r4
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	d1e0      	bne.n	80067d6 <_free_r+0x26>
 8006814:	681c      	ldr	r4, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	6053      	str	r3, [r2, #4]
 800681a:	4421      	add	r1, r4
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	e7da      	b.n	80067d6 <_free_r+0x26>
 8006820:	d902      	bls.n	8006828 <_free_r+0x78>
 8006822:	230c      	movs	r3, #12
 8006824:	6003      	str	r3, [r0, #0]
 8006826:	e7d6      	b.n	80067d6 <_free_r+0x26>
 8006828:	6825      	ldr	r5, [r4, #0]
 800682a:	1961      	adds	r1, r4, r5
 800682c:	428b      	cmp	r3, r1
 800682e:	bf04      	itt	eq
 8006830:	6819      	ldreq	r1, [r3, #0]
 8006832:	685b      	ldreq	r3, [r3, #4]
 8006834:	6063      	str	r3, [r4, #4]
 8006836:	bf04      	itt	eq
 8006838:	1949      	addeq	r1, r1, r5
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6054      	str	r4, [r2, #4]
 800683e:	e7ca      	b.n	80067d6 <_free_r+0x26>
 8006840:	b003      	add	sp, #12
 8006842:	bd30      	pop	{r4, r5, pc}
 8006844:	20013008 	.word	0x20013008

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 f8bc 	bl	80069d0 <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f8b7 	bl	80069d0 <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f8ac 	bl	80069d0 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	2001300c 	.word	0x2001300c

08006888 <_malloc_r>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	2600      	movs	r6, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4e2e      	ldr	r6, [pc, #184]	; (800696c <_malloc_r+0xe4>)
 80068b2:	f000 f89d 	bl	80069f0 <__malloc_lock>
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	461c      	mov	r4, r3
 80068ba:	bb34      	cbnz	r4, 800690a <_malloc_r+0x82>
 80068bc:	4629      	mov	r1, r5
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ffc2 	bl	8006848 <sbrk_aligned>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	4604      	mov	r4, r0
 80068c8:	d14d      	bne.n	8006966 <_malloc_r+0xde>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	4626      	mov	r6, r4
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d140      	bne.n	8006954 <_malloc_r+0xcc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4638      	mov	r0, r7
 80068d8:	eb04 0803 	add.w	r8, r4, r3
 80068dc:	f000 f878 	bl	80069d0 <_sbrk_r>
 80068e0:	4580      	cmp	r8, r0
 80068e2:	d13a      	bne.n	800695a <_malloc_r+0xd2>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	3503      	adds	r5, #3
 80068e8:	1a6d      	subs	r5, r5, r1
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	4629      	mov	r1, r5
 80068f8:	4638      	mov	r0, r7
 80068fa:	f7ff ffa5 	bl	8006848 <sbrk_aligned>
 80068fe:	3001      	adds	r0, #1
 8006900:	d02b      	beq.n	800695a <_malloc_r+0xd2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	442b      	add	r3, r5
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e00e      	b.n	8006928 <_malloc_r+0xa0>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	d41e      	bmi.n	800694e <_malloc_r+0xc6>
 8006910:	2a0b      	cmp	r2, #11
 8006912:	d916      	bls.n	8006942 <_malloc_r+0xba>
 8006914:	1961      	adds	r1, r4, r5
 8006916:	42a3      	cmp	r3, r4
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	bf18      	it	ne
 800691c:	6059      	strne	r1, [r3, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	bf08      	it	eq
 8006922:	6031      	streq	r1, [r6, #0]
 8006924:	5162      	str	r2, [r4, r5]
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	4638      	mov	r0, r7
 800692a:	f104 060b 	add.w	r6, r4, #11
 800692e:	f000 f865 	bl	80069fc <__malloc_unlock>
 8006932:	f026 0607 	bic.w	r6, r6, #7
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	1af2      	subs	r2, r6, r3
 800693a:	d0b6      	beq.n	80068aa <_malloc_r+0x22>
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	50a3      	str	r3, [r4, r2]
 8006940:	e7b3      	b.n	80068aa <_malloc_r+0x22>
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	42a3      	cmp	r3, r4
 8006946:	bf0c      	ite	eq
 8006948:	6032      	streq	r2, [r6, #0]
 800694a:	605a      	strne	r2, [r3, #4]
 800694c:	e7ec      	b.n	8006928 <_malloc_r+0xa0>
 800694e:	4623      	mov	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7b2      	b.n	80068ba <_malloc_r+0x32>
 8006954:	4634      	mov	r4, r6
 8006956:	6876      	ldr	r6, [r6, #4]
 8006958:	e7b9      	b.n	80068ce <_malloc_r+0x46>
 800695a:	230c      	movs	r3, #12
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4638      	mov	r0, r7
 8006960:	f000 f84c 	bl	80069fc <__malloc_unlock>
 8006964:	e7a1      	b.n	80068aa <_malloc_r+0x22>
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	e7de      	b.n	8006928 <_malloc_r+0xa0>
 800696a:	bf00      	nop
 800696c:	20013008 	.word	0x20013008

08006970 <_realloc_r>:
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4680      	mov	r8, r0
 8006976:	4614      	mov	r4, r2
 8006978:	460e      	mov	r6, r1
 800697a:	b921      	cbnz	r1, 8006986 <_realloc_r+0x16>
 800697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	4611      	mov	r1, r2
 8006982:	f7ff bf81 	b.w	8006888 <_malloc_r>
 8006986:	b92a      	cbnz	r2, 8006994 <_realloc_r+0x24>
 8006988:	f7ff ff12 	bl	80067b0 <_free_r>
 800698c:	4625      	mov	r5, r4
 800698e:	4628      	mov	r0, r5
 8006990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006994:	f000 f838 	bl	8006a08 <_malloc_usable_size_r>
 8006998:	4284      	cmp	r4, r0
 800699a:	4607      	mov	r7, r0
 800699c:	d802      	bhi.n	80069a4 <_realloc_r+0x34>
 800699e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069a2:	d812      	bhi.n	80069ca <_realloc_r+0x5a>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff ff6e 	bl	8006888 <_malloc_r>
 80069ac:	4605      	mov	r5, r0
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0ed      	beq.n	800698e <_realloc_r+0x1e>
 80069b2:	42bc      	cmp	r4, r7
 80069b4:	4622      	mov	r2, r4
 80069b6:	4631      	mov	r1, r6
 80069b8:	bf28      	it	cs
 80069ba:	463a      	movcs	r2, r7
 80069bc:	f7ff fbb8 	bl	8006130 <memcpy>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7ff fef4 	bl	80067b0 <_free_r>
 80069c8:	e7e1      	b.n	800698e <_realloc_r+0x1e>
 80069ca:	4635      	mov	r5, r6
 80069cc:	e7df      	b.n	800698e <_realloc_r+0x1e>
	...

080069d0 <_sbrk_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_sbrk_r+0x1c>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	f000 f81e 	bl	8006a1c <_sbrk>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_sbrk_r+0x1a>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_sbrk_r+0x1a>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20013010 	.word	0x20013010

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f000 b811 	b.w	8006a18 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20013014 	.word	0x20013014

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f000 b80c 	b.w	8006a1a <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20013014 	.word	0x20013014

08006a08 <_malloc_usable_size_r>:
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f18      	subs	r0, r3, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfbc      	itt	lt
 8006a12:	580b      	ldrlt	r3, [r1, r0]
 8006a14:	18c0      	addlt	r0, r0, r3
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_sbrk>:
 8006a1c:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <_sbrk+0x14>)
 8006a1e:	6811      	ldr	r1, [r2, #0]
 8006a20:	4603      	mov	r3, r0
 8006a22:	b909      	cbnz	r1, 8006a28 <_sbrk+0xc>
 8006a24:	4903      	ldr	r1, [pc, #12]	; (8006a34 <_sbrk+0x18>)
 8006a26:	6011      	str	r1, [r2, #0]
 8006a28:	6810      	ldr	r0, [r2, #0]
 8006a2a:	4403      	add	r3, r0
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	4770      	bx	lr
 8006a30:	20013018 	.word	0x20013018
 8006a34:	20013020 	.word	0x20013020

08006a38 <_init>:
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	bf00      	nop
 8006a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3e:	bc08      	pop	{r3}
 8006a40:	469e      	mov	lr, r3
 8006a42:	4770      	bx	lr

08006a44 <_fini>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr
